{"SetPlayerScoreEx":{"prefix":"SetPlayerScoreEx","description":"set player score extended function","body":"SetPlayerScoreEx(playerid, score)"},"OnSetPlayerScoreEx":{"prefix":"OnSetPlayerScoreEx","description":"set player score extended function callback","body":"OnSetPlayerScoreEx(playerid, score)"},"SetPlayerDisableKeysSync":{"prefix":"SetPlayerDisableKeysSync","description":"set sync state of keys","body":"SetPlayerDisableKeysSync(playerid, keys, left = false, right = false, up = false, down = false)"},"Y_HOOKS_CONTINUE_RETURN_1":{"prefix":"Y_HOOKS_CONTINUE_RETURN_1","body":"Y_HOOKS_CONTINUE_RETURN_1"},"Y_HOOKS_CONTINUE_RETURN_0":{"prefix":"Y_HOOKS_CONTINUE_RETURN_0","body":"Y_HOOKS_CONTINUE_RETURN_0"},"Y_HOOKS_BREAK_RETURN_0":{"prefix":"Y_HOOKS_BREAK_RETURN_0","body":"Y_HOOKS_BREAK_RETURN_0"},"Y_HOOKS_BREAK_RETURN_1":{"prefix":"Y_HOOKS_BREAK_RETURN_1","body":"Y_HOOKS_BREAK_RETURN_1"},"ER_DBACCESS_DENIED_ERROR":{"prefix":"ER_DBACCESS_DENIED_ERROR","body":"ER_DBACCESS_DENIED_ERROR"},"ER_ACCESS_DENIED_ERROR":{"prefix":"ER_ACCESS_DENIED_ERROR","body":"ER_ACCESS_DENIED_ERROR"},"ER_UNKNOWN_TABLE":{"prefix":"ER_UNKNOWN_TABLE","body":"ER_UNKNOWN_TABLE"},"ER_SYNTAX_ERROR":{"prefix":"ER_SYNTAX_ERROR","body":"ER_SYNTAX_ERROR"},"CR_SERVER_GONE_ERROR":{"prefix":"CR_SERVER_GONE_ERROR","body":"CR_SERVER_GONE_ERROR"},"CR_SERVER_LOST":{"prefix":"CR_SERVER_LOST","body":"CR_SERVER_LOST"},"CR_COMMAND_OUT_OF_SYNC":{"prefix":"CR_COMMAND_OUT_OF_SYNC","body":"CR_COMMAND_OUT_OF_SYNC"},"CR_SERVER_LOST_EXTENDED":{"prefix":"CR_SERVER_LOST_EXTENDED","body":"CR_SERVER_LOST_EXTENDED"},"MYSQL_DEFAULT_HANDLE":{"prefix":"MYSQL_DEFAULT_HANDLE","body":"MYSQL_DEFAULT_HANDLE"},"MYSQL_INVALID_HANDLE":{"prefix":"MYSQL_INVALID_HANDLE","body":"MYSQL_INVALID_HANDLE"},"MYSQL_INVALID_CACHE":{"prefix":"MYSQL_INVALID_CACHE","body":"MYSQL_INVALID_CACHE"},"MYSQL_INVALID_ORM":{"prefix":"MYSQL_INVALID_ORM","body":"MYSQL_INVALID_ORM"},"DUPLICATE_CONNECTIONS":{"prefix":"DUPLICATE_CONNECTIONS","body":"DUPLICATE_CONNECTIONS"},"DUPLICATE_CONNECTION_WARNING":{"prefix":"DUPLICATE_CONNECTION_WARNING","body":"DUPLICATE_CONNECTION_WARNING"},"ERROR_INVALID":{"prefix":"ERROR_INVALID","body":"ERROR_INVALID"},"ERROR_OK":{"prefix":"ERROR_OK","body":"ERROR_OK"},"ERROR_NO_DATA":{"prefix":"ERROR_NO_DATA","body":"ERROR_NO_DATA"},"NONE":{"prefix":"NONE","body":"NONE"},"DEBUG":{"prefix":"DEBUG","body":"DEBUG"},"INFO":{"prefix":"INFO","body":"INFO"},"WARNING":{"prefix":"WARNING","body":"WARNING"},"ERROR":{"prefix":"ERROR","body":"ERROR"},"ALL":{"prefix":"ALL","body":"ALL"},"MYSQL_TYPE_INVALID":{"prefix":"MYSQL_TYPE_INVALID","body":"MYSQL_TYPE_INVALID"},"MYSQL_TYPE_DECIMAL":{"prefix":"MYSQL_TYPE_DECIMAL","body":"MYSQL_TYPE_DECIMAL"},"MYSQL_TYPE_TINY":{"prefix":"MYSQL_TYPE_TINY","body":"MYSQL_TYPE_TINY"},"MYSQL_TYPE_SHORT":{"prefix":"MYSQL_TYPE_SHORT","body":"MYSQL_TYPE_SHORT"},"MYSQL_TYPE_LONG":{"prefix":"MYSQL_TYPE_LONG","body":"MYSQL_TYPE_LONG"},"MYSQL_TYPE_FLOAT":{"prefix":"MYSQL_TYPE_FLOAT","body":"MYSQL_TYPE_FLOAT"},"MYSQL_TYPE_DOUBLE":{"prefix":"MYSQL_TYPE_DOUBLE","body":"MYSQL_TYPE_DOUBLE"},"MYSQL_TYPE_NULL":{"prefix":"MYSQL_TYPE_NULL","body":"MYSQL_TYPE_NULL"},"MYSQL_TYPE_TIMESTAMP":{"prefix":"MYSQL_TYPE_TIMESTAMP","body:":"MYSQL_TYPE_TIMESTAMP"},"MYSQL_TYPE_LONGLONG":{"prefix":"MYSQL_TYPE_LONGLONG","body:":"MYSQL_TYPE_LONGLONG"},"MYSQL_TYPE_INT24":{"prefix":"MYSQL_TYPE_INT24","body:":"MYSQL_TYPE_INT24"},"MYSQL_TYPE_DATE":{"prefix":"MYSQL_TYPE_DATE","body:":"MYSQL_TYPE_DATE"},"MYSQL_TYPE_TIME":{"prefix":"MYSQL_TYPE_TIME","body:":"MYSQL_TYPE_TIME"},"MYSQL_TYPE_DATETIME":{"prefix":"MYSQL_TYPE_DATETIME","body:":"MYSQL_TYPE_DATETIME"},"MYSQL_TYPE_YEAR":{"prefix":"MYSQL_TYPE_YEAR","body:":"MYSQL_TYPE_YEAR"},"MYSQL_TYPE_NEWDATE":{"prefix":"MYSQL_TYPE_NEWDATE","body:":"MYSQL_TYPE_NEWDATE"},"MYSQL_TYPE_VARCHAR":{"prefix":"MYSQL_TYPE_VARCHAR","body:":"MYSQL_TYPE_VARCHAR"},"MYSQL_TYPE_BIT":{"prefix":"MYSQL_TYPE_BIT","body:":"MYSQL_TYPE_BIT"},"MYSQL_TYPE_TIMESTAMP2":{"prefix":"MYSQL_TYPE_TIMESTAMP2","body:":"MYSQL_TYPE_TIMESTAMP2"},"MYSQL_TYPE_DATETIME2":{"prefix":"MYSQL_TYPE_DATETIME2","body:":"MYSQL_TYPE_DATETIME2"},"MYSQL_TYPE_TIME2":{"prefix":"MYSQL_TYPE_TIME2","body":"MYSQL_TYPE_TIME2"},"MYSQL_TYPE_JSON":{"prefix":"MYSQL_TYPE_JSON","body":"MYSQL_TYPE_JSON"},"MYSQL_TYPE_NEWDECIMAL":{"prefix":"MYSQL_TYPE_NEWDECIMAL","body":"MYSQL_TYPE_NEWDECIMAL"},"MYSQL_TYPE_ENUM":{"prefix":"MYSQL_TYPE_ENUM","body":"MYSQL_TYPE_ENUM"},"MYSQL_TYPE_SET":{"prefix":"MYSQL_TYPE_SET","body":"MYSQL_TYPE_SET"},"MYSQL_TYPE_TINY_BLOB":{"prefix":"MYSQL_TYPE_TINY_BLOB","body":"MYSQL_TYPE_TINY_BLOB"},"MYSQL_TYPE_MEDIUM_BLOB":{"prefix":"MYSQL_TYPE_MEDIUM_BLOB","body":"MYSQL_TYPE_MEDIUM_BLOB"},"MYSQL_TYPE_LONG_BLOB":{"prefix":"MYSQL_TYPE_LONG_BLOB","body":"MYSQL_TYPE_LONG_BLOB"},"MYSQL_TYPE_BLOB":{"prefix":"MYSQL_TYPE_BLOB","body":"MYSQL_TYPE_BLOB"},"MYSQL_TYPE_VAR_STRING":{"prefix":"MYSQL_TYPE_VAR_STRING","body":"MYSQL_TYPE_VAR_STRING"},"MYSQL_TYPE_STRING":{"prefix":"MYSQL_TYPE_STRING","body":"MYSQL_TYPE_STRING"},"MYSQL_TYPE_GEOMETRY":{"prefix":"MYSQL_TYPE_GEOMETRY","body":"MYSQL_TYPE_GEOMETRY"},"MILLISECONDS":{"prefix":"MILLISECONDS","body":"MILLISECONDS"},"MICROSECONDS":{"prefix":"MICROSECONDS","body":"MICROSECONDS"},"Acp_Init":{"prefix":"Acp_Init","body":"Acp_Init(playerid, page = 0)","description":"IORP Stock Function"},"Acp_AddCommand":{"prefix":"Acp_AddCommand","body":"Acp_AddCommand(playerid, const command[], bool:top = false)","description":"IORP Stock Function"},"Acp_OnResponse":{"prefix":"Acp_OnResponse","body":"Acp_OnResponse(playerid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"Acp_OnInit":{"prefix":"Acp_OnInit","body":"Acp_OnInit(playerid, page)","description":"IORP Public Function"},"Ascp_Init":{"prefix":"Ascp_Init","body":"Ascp_Init(playerid, page = 0)","description":"IORP Stock Function"},"Ascp_AddCommand":{"prefix":"Ascp_AddCommand","body":"Ascp_AddCommand(playerid, const command[], bool:top = false)","description":"IORP Stock Function"},"Ascp_OnResponse":{"prefix":"Ascp_OnResponse","body":"Ascp_OnResponse(playerid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"Ascp_OnInit":{"prefix":"Ascp_OnInit","body":"Ascp_OnInit(playerid, page)","description":"IORP Public Function"},"Pcp_Init":{"prefix":"Pcp_Init","body":"Pcp_Init(playerid, page = 0)","description":"IORP Stock Function"},"Pcp_AddCommand":{"prefix":"Pcp_AddCommand","body":"Pcp_AddCommand(playerid, const command[], bool:top = false)","description":"IORP Stock Function"},"Pcp_OnResponse":{"prefix":"Pcp_OnResponse","body":"Pcp_OnResponse(playerid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"Pcp_OnInit":{"prefix":"Pcp_OnInit","body":"Pcp_OnInit(playerid, page)","description":"IORP Public Function"},"Scp_Init":{"prefix":"Scp_Init","body":"Scp_Init(playerid, page = 0)","description":"IORP Stock Function"},"Scp_AddCommand":{"prefix":"Scp_AddCommand","body":"Scp_AddCommand(playerid, const command[], bool:top = false)","description":"IORP Stock Function"},"Scp_OnResponse":{"prefix":"Scp_OnResponse","body":"Scp_OnResponse(playerid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"Scp_OnInit":{"prefix":"Scp_OnInit","body":"Scp_OnInit(playerid, page)","description":"IORP Public Function"},"Ucp_Init":{"prefix":"Ucp_Init","body":"Ucp_Init(playerid, page = 0)","description":"IORP Stock Function"},"Ucp_AddCommand":{"prefix":"Ucp_AddCommand","body":"Ucp_AddCommand(playerid, const command[], bool:top = false)","description":"IORP Stock Function"},"Ucp_OnResponse":{"prefix":"Ucp_OnResponse","body":"Ucp_OnResponse(playerid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"Ucp_OnInit":{"prefix":"Ucp_OnInit","body":"Ucp_OnInit(playerid, page)","description":"IORP Public Function"},"ETShop_Init":{"prefix":"ETShop_Init","body":"ETShop_Init(playerid, page = 0)","description":"IORP Stock Function"},"ETShop_OnInit":{"prefix":"ETShop_OnInit","body":"ETShop_OnInit(playerid, page)","description":"IORP Public Function"},"ETShop_AddCommand":{"prefix":"ETShop_AddCommand","body":"ETShop_AddCommand(playerid, const product[], price = 0, bool:item_status = false, bool:top = false)","description":"IORP Stock Function"},"ETShop_OnResponse":{"prefix":"ETShop_OnResponse","body":"ETShop_OnResponse(playerid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"QuickActions_Init":{"prefix":"QuickActions_Init","body":"QuickActions_Init(playerid, targetid, page = 0)","description":"IORP Stock Function"},"QuickActions_OnInit":{"prefix":"QuickActions_OnInit","body":"QuickActions_OnInit(playerid, targetid, page)","description":"IORP Public Function"},"QuickActions_AddCommand":{"prefix":"QuickActions_AddCommand","body":"QuickActions_AddCommand(playerid, const command[], bool:top = false)","description":"IORP Stock Function"},"QuickActions_OnResponse":{"prefix":"QuickActions_OnResponse","body":"QuickActions_OnResponse(playerid, targetid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"Vcp_Init":{"prefix":"Vcp_Init","body":"Vcp_Init(playerid, page = 0)","description":"IORP Stock Function"},"Vcp_AddCommand":{"prefix":"Vcp_AddCommand","body":"Vcp_AddCommand(playerid, const command[], bool:top = false)","description":"IORP Stock Function"},"Vcp_OnResponse":{"prefix":"Vcp_OnResponse","body":"Vcp_OnResponse(playerid, page, response, listitem, const inputtext[])","description":"IORP Public Function"},"Vcp_OnInit":{"prefix":"Vcp_OnInit","body":"Vcp_OnInit(playerid, page)","description":"IORP Public Function"},"Iter_Init":{"prefix":"Iter_Init","body":"Iter_Init(IteratorArray:Name[]<>)"},"Iter_Add":{"prefix":"Iter_Add","body":"Iter_Add(Iterator:Name<>, value)"},"Iter_Free":{"prefix":"Iter_Free","body":"Iter_Free(Iterator:Name<>)"},"Iter_Remove":{"prefix":"Iter_Remove","body":"Iter_Remove(Iterator:Name<>, value)"},"Iter_SafeRemove":{"prefix":"Iter_SafeRemove","body":"Iter_SafeRemove(Iterator:Name<>, value, &next)"},"Iter_Random":{"prefix":"Iter_Random","body":"Iter_Random(Iterator:Name<>)"},"Iter_Count":{"prefix":"Iter_Count","body":"Iter_Count(Iterator:Name<>)"},"Iter_Clear":{"prefix":"Iter_Clear","body":"Iter_Clear(IteratorArray:Name[]<>)"},"Iter_Index":{"prefix":"Iter_Index","body":"Iter_Index(IteratorArray:Name[]<>, index)"},"Iter_Contains":{"prefix":"Iter_Contains","body":"Iter_Contains(IteratorArray:Name[]<>, index)"},"CountPlayers":{"prefix":"CountPlayers","body":"CountPlayers(bool:isplayer=true,bool:isnpc=true)"},"CountActors":{"prefix":"CountActors","body":"CountActors()"},"CountVisibleActors":{"prefix":"CountVisibleActors","body":"CountVisibleActors(playerid)"},"CountVisibleVehicles":{"prefix":"CountVisibleVehicles","body":"CountVisibleVehicles(playerid)"},"CountVisiblePlayers":{"prefix":"CountVisiblePlayers","body":"CountVisiblePlayers(playerid,bool:isplayer=true,bool:isnpc=true)"},"RecoilFloat":{"prefix":"RecoilFloat","body":"RecoilFloat(Float:value,Float:recoil)"},"RecoilVector":{"prefix":"RecoilVector","body":"RecoilVector(&Float:vx,&Float:vy,&Float:vz,Float:sx,Float:sy,Float:sz)"},"ShiftDegreeToRadian":{"prefix":"ShiftDegreeToRadian","body":"Float:ShiftDegreeToRadian(Float:deg)"},"ShiftDegreeToRadianEx":{"prefix":"ShiftDegreeToRadianEx","body":"Float:ShiftDegreeToRadianEx(Float:deg)"},"ShiftDegreeToGrades":{"prefix":"ShiftDegreeToGrades","body":"Float:ShiftDegreeToGrades(Float:deg)"},"ShiftRadianToDegree":{"prefix":"ShiftRadianToDegree","body":"Float:ShiftRadianToDegree(Float:rad)"},"ShiftRadianToDegreeEx":{"prefix":"ShiftRadianToDegreeEx","body":"Float:ShiftRadianToDegreeEx(Float:rad)"},"ShiftRadianToGrades":{"prefix":"ShiftRadianToGrades","body":"Float:ShiftRadianToGrades(Float:rad)"},"ShiftGradesToDegree":{"prefix":"ShiftGradesToDegree","body":"Float:ShiftGradesToDegree(Float:grad)"},"ShiftGradesToRadian":{"prefix":"ShiftGradesToRadian","body":"Float:ShiftGradesToRadian(Float:grad)"},"GetRandomHit":{"prefix":"GetRandomHit","body":"GetRandomHit(Float:x,Float:y,Float:z,range,&Float:tx,&Float:ty,&Float:tz)"},"GetDistanceBetweenPoints1D":{"prefix":"GetDistanceBetweenPoints1D","body":"Float:GetDistanceBetweenPoints1D(Float:x1,Float:x2)"},"GetDistanceBetweenPoints2D":{"prefix":"GetDistanceBetweenPoints2D","body":"Float:GetDistanceBetweenPoints2D(Float:x1,Float:y1,Float:x2,Float:y2)"},"GetDistanceBetweenPoints3D":{"prefix":"GetDistanceBetweenPoints3D","body":"Float:GetDistanceBetweenPoints3D(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)"},"GetPointInFront2D":{"prefix":"GetPointInFront2D","body":"GetPointInFront2D(Float:x,Float:y,Float:rz,Float:radius,&Float:tx,&Float:ty)"},"GetPointInFront3D":{"prefix":"GetPointInFront3D","body":"GetPointInFront3D(Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetPointInFront3DEx":{"prefix":"GetPointInFront3DEx","body":"GetPointInFront3DEx(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetPointInFrontOfPlayer":{"prefix":"GetPointInFrontOfPlayer","body":"Float:GetPointInFrontOfPlayer(playerid,&Float:tx,&Float:ty,Float:radius)"},"GetPointInFrontOfCamera2D":{"prefix":"GetPointInFrontOfCamera2D","body":"Float:GetPointInFrontOfCamera2D(playerid,&Float:tx,&Float:ty,Float:radius)"},"GetPointInFrontOfCamera3D":{"prefix":"GetPointInFrontOfCamera3D","body":"GetPointInFrontOfCamera3D(playerid,&Float:tx,&Float:ty,&Float:tz,Float:radius,&Float:rx=0.0,&Float:rz=0.0)"},"GetRotationFor2Point2D":{"prefix":"GetRotationFor2Point2D","body":"GetRotationFor2Point2D(Float:x,Float:y,Float:tx,Float:ty,&Float:rz)"},"GetRotationFor2Point3D":{"prefix":"GetRotationFor2Point3D","body":"GetRotationFor2Point3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,&Float:rx,&Float:rz)"},"GetMoveTime":{"prefix":"GetMoveTime","body":"GetMoveTime(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:speed,&rtime=0)"},"GetSpeedForMoveTime":{"prefix":"GetSpeedForMoveTime","body":"GetSpeedForMoveTime(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,&Float:speed,rtime)"},"GetVehicleRotation":{"prefix":"GetVehicleRotation","body":"GetVehicleRotation(vehicleid,&Float:rx,&Float:ry,&Float:rz)"},"GetPointInFrontOfVehicle2D":{"prefix":"GetPointInFrontOfVehicle2D","body":"Float:GetPointInFrontOfVehicle2D(vehicleid,&Float:tx,&Float:ty,Float:radius)"},"GetPointInFrontOfVehicle3D":{"prefix":"GetPointInFrontOfVehicle3D","body":"GetPointInFrontOfVehicle3D(vehicleid,&Float:tx,&Float:ty,&Float:tz,Float:radius,&Float:rx=0.0,&Float:rz=0.0)"},"GetPlayerCameraRotation":{"prefix":"GetPlayerCameraRotation","body":"GetPlayerCameraRotation(playerid,&Float:rx,&Float:rz)"},"SetPlayerCameraRotation":{"prefix":"SetPlayerCameraRotation","body":"SetPlayerCameraRotation(playerid,Float:rx,Float:rz)"},"GetPlayerCameraZAngle":{"prefix":"GetPlayerCameraZAngle","body":"Float:GetPlayerCameraZAngle(playerid,&Float:rz=0.0)"},"SetPlayerCameraZAngle":{"prefix":"SetPlayerCameraZAngle","body":"SetPlayerCameraZAngle(playerid,Float:rz)"},"GetPointFor2Point2D":{"prefix":"GetPointFor2Point2D","body":"GetPointFor2Point2D(Float:x1,Float:y1,Float:x2,Float:y2,Float:percent_size,&Float:tx,&Float:ty)"},"GetPointFor2Point3D":{"prefix":"GetPointFor2Point3D","body":"GetPointFor2Point3D(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2,Float:percent_size,&Float:tx,&Float:ty,&Float:tz)"},"GetPointFor2Point2DEx":{"prefix":"GetPointFor2Point2DEx","body":"GetPointFor2Point2DEx(Float:x1,Float:y1,Float:x2,Float:y2,Float:distance,&Float:tx,&Float:ty)"},"GetPointFor2Point3DEx":{"prefix":"GetPointFor2Point3DEx","body":"GetPointFor2Point3DEx(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2,Float:distance,&Float:tx,&Float:ty,&Float:tz)"},"ShiftVectorToRotation":{"prefix":"ShiftVectorToRotation","body":"ShiftVectorToRotation(Float:vx,Float:vy,Float:vz,&Float:rx,&Float:rz)"},"ShiftRotationToVector":{"prefix":"ShiftRotationToVector","body":"ShiftRotationToVector(Float:rx,Float:rz,&Float:vx,&Float:vy,&Float:vz)"},"GetPointToPointVector":{"prefix":"GetPointToPointVector","body":"GetPointToPointVector(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,&Float:vx,&Float:vy,&Float:vz)"},"GetRandomPointOnClock":{"prefix":"GetRandomPointOnClock","body":"Float:GetRandomPointOnClock(Float:x,Float:y,Float:radius,&Float:tx,&Float:ty,&Float:trz,Float:rz=INVALID_ROTATION)"},"GetRandomPointInCircle":{"prefix":"GetRandomPointInCircle","body":"GetRandomPointInCircle(Float:x,Float:y,Float:radius,&Float:tx,&Float:ty)"},"GetRandomPointInCylinder2D":{"prefix":"GetRandomPointInCylinder2D","body":"GetRandomPointInCylinder2D(Float:x,Float:y,Float:minz,Float:maxz,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointInCylinder3D":{"prefix":"GetRandomPointInCylinder3D","body":"GetRandomPointInCylinder3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointInSphere":{"prefix":"GetRandomPointInSphere","body":"GetRandomPointInSphere(Float:x,Float:y,Float:z,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointInRectangle":{"prefix":"GetRandomPointInRectangle","body":"GetRandomPointInRectangle(Float:minx,Float:miny,Float:maxx,Float:maxy,&Float:tx,&Float:ty)"},"GetRandomPointInCube":{"prefix":"GetRandomPointInCube","body":"GetRandomPointInCube(Float:minx,Float:miny,Float:minz,Float:maxx,Float:maxy,Float:maxz,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointInPolygon":{"prefix":"GetRandomPointInPolygon","body":"GetRandomPointInPolygon(Float:points[],&Float:tx,&Float:ty,maxpoints=sizeof(points))"},"GetRandomPointInCircularSector":{"prefix":"GetRandomPointInCircularSector","body":"GetRandomPointInCircularSector(Float:x,Float:y,Float:rz,Float:radius,Float:view_angle,&Float:tx,&Float:ty)"},"GetRandomPointInSphericalSector":{"prefix":"GetRandomPointInSphericalSector","body":"GetRandomPointInSphericalSector(Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointInCone3D":{"prefix":"GetRandomPointInCone3D","body":"GetRandomPointInCone3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:pointA_radius,Float:pointB_radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointInCube3D":{"prefix":"GetRandomPointInCube3D","body":"GetRandomPointInCube3D(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointInEllipse":{"prefix":"GetRandomPointInEllipse","body":"GetRandomPointInEllipse(Float:cx,Float:cy,Float:size_x,Float:size_y,&Float:tx,&Float:ty)"},"GetRandomPointInEllipticalCyl2D":{"prefix":"GetRandomPointInEllipticalCyl2D","body":"GetRandomPointInEllipticalCyl2D(Float:cx,Float:cy,Float:minz,Float:maxz,Float:size_x,Float:size_y,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnCircle":{"prefix":"GetRandomPointOnCircle","body":"GetRandomPointOnCircle(Float:x,Float:y,Float:radius,&Float:tx,&Float:ty)"},"GetRandomPointOnCylinder2D":{"prefix":"GetRandomPointOnCylinder2D","body":"GetRandomPointOnCylinder2D(Float:x,Float:y,Float:minz,Float:maxz,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnCylinder3D":{"prefix":"GetRandomPointOnCylinder3D","body":"GetRandomPointOnCylinder3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnSphere":{"prefix":"GetRandomPointOnSphere","body":"GetRandomPointOnSphere(Float:x,Float:y,Float:z,Float:radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnRectangle":{"prefix":"GetRandomPointOnRectangle","body":"GetRandomPointOnRectangle(Float:minx,Float:miny,Float:maxx,Float:maxy,&Float:tx,&Float:ty)"},"GetRandomPointOnCube":{"prefix":"GetRandomPointOnCube","body":"GetRandomPointOnCube(Float:minx,Float:miny,Float:minz,Float:maxx,Float:maxy,Float:maxz,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnCircularSector":{"prefix":"GetRandomPointOnCircularSector","body":"GetRandomPointOnCircularSector(Float:x,Float:y,Float:rz,Float:radius,Float:view_angle,&Float:tx,&Float:ty)"},"GetRandomPointOnSphericalSector":{"prefix":"GetRandomPointOnSphericalSector","body":"GetRandomPointOnSphericalSector(Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnCone3D":{"prefix":"GetRandomPointOnCone3D","body":"GetRandomPointOnCone3D(Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:pointA_radius,Float:pointB_radius,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnCube3D":{"prefix":"GetRandomPointOnCube3D","body":"GetRandomPointOnCube3D(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z,&Float:tx,&Float:ty,&Float:tz)"},"GetRandomPointOnEllipse":{"prefix":"GetRandomPointOnEllipse","body":"GetRandomPointOnEllipse(Float:cx,Float:cy,Float:size_x,Float:size_y,&Float:tx,&Float:ty)"},"GetRandomPointOnEllipticalCyl2D":{"prefix":"GetRandomPointOnEllipticalCyl2D","body":"GetRandomPointOnEllipticalCyl2D(Float:cx,Float:cy,Float:minz,Float:maxz,Float:size_x,Float:size_y,&Float:tx,&Float:ty,&Float:tz)"},"IsPointBetween2Points2D":{"prefix":"IsPointBetween2Points2D","body":"IsPointBetween2Points2D(Float:px,Float:py,Float:xA,Float:yA,Float:xB,Float:yB)"},"IsPointBetween2Points3D":{"prefix":"IsPointBetween2Points3D","body":"IsPointBetween2Points3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB)"},"IsPointNearly2Points2D":{"prefix":"IsPointNearly2Points2D","body":"IsPointNearly2Points2D(Float:px,Float:py,Float:xA,Float:yA,Float:xB,Float:yB,Float:maxdist)"},"IsPointNearly2Points3D":{"prefix":"IsPointNearly2Points3D","body":"IsPointNearly2Points3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:maxdist)"},"IsPointInCircle":{"prefix":"IsPointInCircle","body":"IsPointInCircle(Float:px,Float:py,Float:x,Float:y,Float:radius)"},"IsPointInCylinder3D":{"prefix":"IsPointInCylinder3D","body":"IsPointInCylinder3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:radius)"},"IsPointInCylinder2D":{"prefix":"IsPointInCylinder2D","body":"IsPointInCylinder2D(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:minz,Float:maxz,Float:radius)"},"IsPointInSphere":{"prefix":"IsPointInSphere","body":"IsPointInSphere(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:radius)"},"IsPointInRectangle":{"prefix":"IsPointInRectangle","body":"IsPointInRectangle(Float:x,Float:y,Float:minx,Float:miny,Float:maxx,Float:maxy)"},"IsPointInCube":{"prefix":"IsPointInCube","body":"IsPointInCube(Float:x,Float:y,Float:z,Float:minx,Float:miny,Float:minz,Float:maxx,Float:maxy,Float:maxz)"},"IsPointInPolygon":{"prefix":"IsPointInPolygon","body":"IsPointInPolygon(Float:x,Float:y,Float:points[],maxpoints=sizeof(points))"},"IsPointInCircularSector":{"prefix":"IsPointInCircularSector","body":"IsPointInCircularSector(Float:px,Float:py,Float:x,Float:y,Float:rz,Float:radius,Float:view_angle)"},"IsPointInSphericalSector":{"prefix":"IsPointInSphericalSector","body":"IsPointInSphericalSector(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz)"},"IsPointInCone3D":{"prefix":"IsPointInCone3D","body":"IsPointInCone3D(Float:px,Float:py,Float:pz,Float:xA,Float:yA,Float:zA,Float:xB,Float:yB,Float:zB,Float:pointA_radius,Float:pointB_radius)"},"IsPointInCube3D":{"prefix":"IsPointInCube3D","body":"IsPointInCube3D(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z)"},"IsPointInEllipse":{"prefix":"IsPointInEllipse","body":"IsPointInEllipse(Float:px,Float:py,Float:cx,Float:cy,Float:size_x,Float:size_y)"},"IsPointInEllipticalCylinder2D":{"prefix":"IsPointInEllipticalCylinder2D","body":"IsPointInEllipticalCylinder2D(Float:px,Float:py,Float:pz,Float:cx,Float:cy,Float:minz,Float:maxz,Float:size_x,Float:size_y)"},"IsPointInSphericalSectorEx":{"prefix":"IsPointInSphericalSectorEx","body":"IsPointInSphericalSectorEx(Float:px,Float:py,Float:pz,Float:x,Float:y,Float:z,Float:rx,Float:rz,Float:radius,Float:vrx,Float:vrz,bool:testLOS=true,bool:veh_col=false)"},"IsProbable":{"prefix":"IsProbable","body":"IsProbable(chance)"},"CalculatePercent":{"prefix":"CalculatePercent","body":"Float:CalculatePercent(Float:value,Float:maxvalue)"},"GetPlayerTargetAngle":{"prefix":"GetPlayerTargetAngle","body":"Float:GetPlayerTargetAngle(playerid,Float:x,Float:y,&Float:rz=0.0)"},"SetPlayerTargetAngle":{"prefix":"SetPlayerTargetAngle","body":"Float:SetPlayerTargetAngle(playerid,Float:x,Float:y,&Float:rz=0.0)"},"GetPlayerTargetPlayerAngle":{"prefix":"GetPlayerTargetPlayerAngle","body":"Float:GetPlayerTargetPlayerAngle(playerid,targetid,&Float:rz=0.0)"},"SetPlayerTargetPlayerAngle":{"prefix":"SetPlayerTargetPlayerAngle","body":"Float:SetPlayerTargetPlayerAngle(playerid,targetid,&Float:rz=0.0)"},"GetVehicleSpeed":{"prefix":"GetVehicleSpeed","body":"Float:GetVehicleSpeed(vehicleid)"},"SetVehicleSpeed":{"prefix":"SetVehicleSpeed","body":"SetVehicleSpeed(vehicleid,Float:speed)"},"GetPlayerSpeed":{"prefix":"GetPlayerSpeed","body":"Float:GetPlayerSpeed(playerid)"},"CreateDynamicExplosion":{"prefix":"CreateDynamicExplosion","body":"CreateDynamicExplosion(Float:x,Float:y,Float:z,type,Float:radius,worldid=-1,interiorid=-1,playerid=-1,Float:distance=200.0)"},"CreateDynamicExplosionDMG":{"prefix":"CreateDynamicExplosionDMG","body":"CreateDynamicExplosionDMG(Float:x,Float:y,Float:z,type,Float:radius,worldid=-1,interiorid=-1,playerid=-1,Float:distance=200.0,Float:damage=82.5,Float:vehicle_damage=82.5,byplayerid=INVALID_PLAYER_ID)"},"SendFakeDamageInRadius":{"prefix":"SendFakeDamageInRadius","body":"SendFakeDamageInRadius(weaponid,bodypart,Float:damage,Float:vehicle_damage,Float:x,Float:y,Float:z,Float:radius,worldid=-1,interiorid=-1,playerid=-1,byplayerid=INVALID_PLAYER_ID)"},"GetVehicleFlags":{"prefix":"GetVehicleFlags","body":"GetVehicleFlags(vehicleid)"},"GetVehicleDefaultFlagsByModel":{"prefix":"GetVehicleDefaultFlagsByModel","body":"GetVehicleDefaultFlagsByModel(modelid)"},"GetVehicleFlagsByModel":{"prefix":"GetVehicleFlagsByModel","body":"GetVehicleFlagsByModel(modelid)"},"SetVehicleFlagsByModel":{"prefix":"SetVehicleFlagsByModel","body":"SetVehicleFlagsByModel(modelid,value)"},"ToggleVehicleModelFlag":{"prefix":"ToggleVehicleModelFlag","body":"ToggleVehicleModelFlag(modelid,flag,bool:toggle)"},"IsVehicleFlag":{"prefix":"IsVehicleFlag","body":"IsVehicleFlag(value,flag)"},"GetWeaponShotPos":{"prefix":"GetWeaponShotPos","body":"GetWeaponShotPos(playerid,hittype,&Float:fx,&Float:fy,&Float:fz)"},"SetPlayerLookAtPlayer":{"prefix":"SetPlayerLookAtPlayer","body":"SetPlayerLookAtPlayer(playerid,targetid,cut=CAMERA_CUT)"},"GetPlayerCameraLookAt":{"prefix":"GetPlayerCameraLookAt","body":"GetPlayerCameraLookAt(playerid,&Float:x,&Float:y,&Float:z)"},"IsPlayerLookAtSky":{"prefix":"IsPlayerLookAtSky","body":"IsPlayerLookAtSky(playerid)"},"GetQuatUpVector":{"prefix":"GetQuatUpVector","body":"GetQuatUpVector(Float:qw,Float:qx,Float:qy,Float:qz,&Float:vx,&Float:vy,&Float:vz)"},"GetLineSize2D":{"prefix":"GetLineSize2D","body":"Float:GetLineSize2D(Float:points[][],maxpoints=sizeof(points))"},"GetLineSize3D":{"prefix":"GetLineSize3D","body":"Float:GetLineSize3D(Float:points[][],maxpoints=sizeof(points))"},"IsVehicleInRangeOfPoint":{"prefix":"IsVehicleInRangeOfPoint","body":"IsVehicleInRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)"},"IsActorInRangeOfPoint":{"prefix":"IsActorInRangeOfPoint","body":"IsActorInRangeOfPoint(actorid,Float:range,Float:x,Float:y,Float:z)"},"IsObjectInRangeOfPoint":{"prefix":"IsObjectInRangeOfPoint","body":"IsObjectInRangeOfPoint(objectid,Float:range,Float:x,Float:y,Float:z)"},"ShiftLineRotation":{"prefix":"ShiftLineRotation","body":"ShiftLineRotation(Float:sX,Float:sY,Float:sZ,Float:eX,Float:eY,Float:eZ,Float:rx,Float:ry,Float:rz,&Float:nX,&Float:nY,&Float:nZ)"},"ShiftLineRotationVector":{"prefix":"ShiftLineRotationVector","body":"ShiftLineRotationVector(Float:sX,Float:sY,Float:sZ,Float:eX,Float:eY,Float:eZ,Float:rx,Float:ry,Float:rz,&Float:nX,&Float:nY,&Float:nZ)"},"GetEllipseRadius":{"prefix":"GetEllipseRadius","body":"Float:GetEllipseRadius(Float:x,Float:y,Float:angle)"},"GetArcPoints3D":{"prefix":"GetArcPoints3D","body":"GetArcPoints3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:ry,Float:height,Float:points[][],max_points=sizeof(points))"},"GetArcPointsFloor3D":{"prefix":"GetArcPointsFloor3D","body":"GetArcPointsFloor3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points))"},"GetArcPointsCellar3D":{"prefix":"GetArcPointsCellar3D","body":"GetArcPointsCellar3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points))"},"GetArcPointsLarboard3D":{"prefix":"GetArcPointsLarboard3D","body":"GetArcPointsLarboard3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points))"},"GetArcPointsStarboard3D":{"prefix":"GetArcPointsStarboard3D","body":"GetArcPointsStarboard3D(Float:x,Float:y,Float:z,Float:tx,Float:ty,Float:tz,Float:spread,Float:points[][],max_points=sizeof(points))"},"GetDistanceFromPointToLine":{"prefix":"GetDistanceFromPointToLine","body":"Float:GetDistanceFromPointToLine(Float:px,Float:py,Float:pz,Float:sX,Float:sY,Float:sZ,Float:eX,Float:eY,Float:eZ,&Float:iX=0.0,&Float:iY=0.0,&Float:iZ=0.0)"},"ShiftOffsetToPosition":{"prefix":"ShiftOffsetToPosition","body":"ShiftOffsetToPosition(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:offset_x,Float:offset_y,Float:offset_z,&Float:tx,&Float:ty,&Float:tz)"},"ShiftPositionToOffset":{"prefix":"ShiftPositionToOffset","body":"ShiftPositionToOffset(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,&Float:offset_x,&Float:offset_y,&Float:offset_z,Float:tx,Float:ty,Float:tz)"},"EulerToQuat":{"prefix":"EulerToQuat","body":"Tryg3D::EulerToQuat(Float:rx,Float:ry,Float:rz,&Float:qw,&Float:qx,&Float:qy,&Float:qz)"},"QuatToEuler":{"prefix":"QuatToEuler","body":"Tryg3D::QuatToEuler(&Float:rx,&Float:ry,&Float:rz,Float:qw,Float:qx,Float:qy,Float:qz)"},"ShiftVectorRotation":{"prefix":"ShiftVectorRotation","body":"ShiftVectorRotation(Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,&Float:tx,&Float:ty,&Float:tz)"},"GetCube3DPoint":{"prefix":"GetCube3DPoint","body":"GetCube3DPoint(OrientationCube3D:orientation,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,Float:size_x,Float:size_y,Float:size_z,&Float:tx,&Float:ty,&Float:tz)"},"IsPlayerFakeSpectating":{"prefix":"IsPlayerFakeSpectating","body":"IsPlayerFakeSpectating(playerid,bool:force_disable=true)"},"GenerateGangZone":{"prefix":"GenerateGangZone","body":"GenerateGangZone(Float:x,Float:y,Float:radius,&Float:minx,&Float:miny,&Float:maxx,&Float:maxy)"},"GetCameraTargetDistance":{"prefix":"GetCameraTargetDistance","body":"Float:GetCameraTargetDistance(Float:CamX,Float:CamY,Float:CamZ,Float:ObjX,Float:ObjY,Float:ObjZ,Float:FrX,Float:FrY,Float:FrZ)"},"IsPlayerAimingAt":{"prefix":"IsPlayerAimingAt","body":"IsPlayerAimingAt(playerid,Float:x,Float:y,Float:z,Float:radius)"},"IPL_CreateObject":{"prefix":"IPL_CreateObject","body":"IPL_CreateObject(modelid,Float:x,Float:y,Float:z,Float:qx,Float:qy,Float:qz,Float:qw,Float:drawdistance=0.0)"},"IsValidVehicleModelID":{"prefix":"IsValidVehicleModelID","body":"IsValidVehicleModelID(modelid)"},"GetVehiclePanels":{"prefix":"GetVehiclePanels","body":"GetVehiclePanels(vehicleid, & front_left, & front_right, & rear_left, & rear_right, & windshield, & front_bumper, & rear_bumper)"},"SetVehiclePanels":{"prefix":"SetVehiclePanels","body":"SetVehiclePanels(vehicleid, front_left, front_right, rear_left, rear_right, windshield, front_bumper, rear_bumper)"},"GetVehicleLights":{"prefix":"GetVehicleLights","body":"GetVehicleLights(vehicleid, & front_left_light, & front_right_light, & back_lights)"},"SetVehicleLights":{"prefix":"SetVehicleLights","body":"SetVehicleLights(vehicleid, front_left_light, front_right_light, back_lights)"},"GetVehicleDoors":{"prefix":"GetVehicleDoors","body":"GetVehicleDoors(vehicleid, & bonnet, & boot, & driver_door, & passenger_door)"},"SetVehicleDoors":{"prefix":"SetVehicleDoors","body":"SetVehicleDoors(vehicleid, bonnet, boot, driver_door, passenger_door)"},"GetVehicleTires":{"prefix":"GetVehicleTires","body":"GetVehicleTires(vehicleid, & front_left, & front_right, & rear_left, & rear_right)"},"SetVehicleTires":{"prefix":"SetVehicleTires","body":"SetVehicleTires(vehicleid, front_left, front_right, rear_left, rear_right)"},"GetVehicleWindowState":{"prefix":"GetVehicleWindowState","body":"GetVehicleWindowState(vehicleid, doorid)"},"SetVehicleWindowState":{"prefix":"SetVehicleWindowState","body":"SetVehicleWindowState(vehicleid, doorid, window_state)"},"GetVehicleDoorState":{"prefix":"GetVehicleDoorState","body":"GetVehicleDoorState(vehicleid, doorid)"},"SetVehicleDoorState":{"prefix":"SetVehicleDoorState","body":"SetVehicleDoorState(vehicleid, doorid, door_state)"},"IsValidVehicleDoor":{"prefix":"IsValidVehicleDoor","body":"IsValidVehicleDoor(vehicleid, doorid)"},"GetVehicleModelDoorAmount":{"prefix":"GetVehicleModelDoorAmount","body":"GetVehicleModelDoorAmount(modelid)"},"GetVehicleDoorAmount":{"prefix":"GetVehicleDoorAmount","body":"GetVehicleDoorAmount(vehicleid)"},"SwitchVehicleEngine":{"prefix":"SwitchVehicleEngine","body":"SwitchVehicleEngine(vehicleid, bool:engine_status)"},"SwitchVehicleLight":{"prefix":"SwitchVehicleLight","body":"SwitchVehicleLight(vehicleid, bool:light_status)"},"SwitchVehicleAlarm":{"prefix":"SwitchVehicleAlarm","body":"SwitchVehicleAlarm(vehicleid, bool:alarm_status)"},"SwitchVehicleDoors":{"prefix":"SwitchVehicleDoors","body":"SwitchVehicleDoors(vehicleid, bool:doors_status)"},"SwitchVehicleBonnet":{"prefix":"SwitchVehicleBonnet","body":"SwitchVehicleBonnet(vehicleid, bool:bonnet_status)"},"SwitchVehicleBoot":{"prefix":"SwitchVehicleBoot","body":"SwitchVehicleBoot(vehicleid, bool:boot_status)"},"SwitchVehicleObjective":{"prefix":"SwitchVehicleObjective","body":"SwitchVehicleObjective(vehicleid, bool:objective_status)"},"GetVehicleParams":{"prefix":"GetVehicleParams","body":"GetVehicleParams(vehicleid, type)"},"SetVehicleParams":{"prefix":"SetVehicleParams","body":"SetVehicleParams(vehicleid, type, status, delay = 0)"},"GetVehicleRandomColors":{"prefix":"GetVehicleRandomColors","body":"GetVehicleRandomColors(modelid, & color1, & color2)"},"GetNearestVehicleToPos":{"prefix":"GetNearestVehicleToPos","body":"GetNearestVehicleToPos(Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, Float:maxdist = 0.0, bool:fast = true, except_vid = 0)"},"GetNearestVehicleToPlayer":{"prefix":"GetNearestVehicleToPlayer","body":"GetNearestVehicleToPlayer(playerid, Float:maxdist = 0.0, bool:fast = false)"},"GetVehicleDriver":{"prefix":"GetVehicleDriver","body":"GetVehicleDriver(vehicleid)"},"GetVehicleModelTopSpeed":{"prefix":"GetVehicleModelTopSpeed","body":"Float:GetVehicleModelTopSpeed(modelid)"},"GetVehicleTopSpeed":{"prefix":"GetVehicleTopSpeed","body":"Float:GetVehicleTopSpeed(vehicleid)"},"SetVehicleInterior":{"prefix":"SetVehicleInterior","body":"SetVehicleInterior(vehicleid, interiorid)"},"GetVehicleSeats":{"prefix":"GetVehicleSeats","body":"GetVehicleSeats(vehicleid)"},"GetVehicleModelSeats":{"prefix":"GetVehicleModelSeats","body":"GetVehicleModelSeats(modelid)"},"IsVehicleSeatOccupied":{"prefix":"IsVehicleSeatOccupied","body":"IsVehicleSeatOccupied(vehicleid, seatid)"},"IsValidVehicle":{"prefix":"IsValidVehicle","body":"IsValidVehicle(${1:vehicleid})$0","description":"Check if a vehicle is created."},"RemoveVehiclePaintjob":{"prefix":"RemoveVehiclePaintjob","body":"RemoveVehiclePaintjob(vehicleid)"},"SetVehicleHorn":{"prefix":"SetVehicleHorn","body":"SetVehicleHorn(vehicleid, soundid)"},"GetVehicleHorn":{"prefix":"GetVehicleHorn","body":"GetVehicleHorn(vehicleid)"},"RestoreVehicleHorn":{"prefix":"RestoreVehicleHorn","body":"RestoreVehicleHorn(vehicleid)"},"GetVehicleBomb":{"prefix":"GetVehicleBomb","body":"GetVehicleBomb(vehicleid)"},"IsVehicleBombed":{"prefix":"IsVehicleBombed","body":"IsVehicleBombed(vehicleid)"},"RemoveVehicleBomb":{"prefix":"RemoveVehicleBomb","body":"RemoveVehicleBomb(vehicleid)"},"SetVehicleBomb":{"prefix":"SetVehicleBomb","body":"SetVehicleBomb(vehicleid, time = 1000)"},"IsVehicleBombActivated":{"prefix":"IsVehicleBombActivated","body":"IsVehicleBombActivated(vehicleid)"},"SetVehicleSpeedCap":{"prefix":"SetVehicleSpeedCap","body":"SetVehicleSpeedCap(vehicleid, Float:maxspeed)"},"GetVehicleSpeedCap":{"prefix":"GetVehicleSpeedCap","body":"Float:GetVehicleSpeedCap(vehicleid)"},"DisableVehicleSpeedCap":{"prefix":"DisableVehicleSpeedCap","body":"DisableVehicleSpeedCap(vehicleid)"},"SetVehicleFuel":{"prefix":"SetVehicleFuel","body":"SetVehicleFuel(vehicleid, fuel)"},"GetVehicleFuel":{"prefix":"GetVehicleFuel","body":"GetVehicleFuel(vehicleid)"},"ToggleVehicleFuel":{"prefix":"ToggleVehicleFuel","body":"ToggleVehicleFuel(vehicleid, bool:toggle)"},"IsVehicleFuelToggled":{"prefix":"IsVehicleFuelToggled","body":"IsVehicleFuelToggled(vehicleid)"},"ToggleVehicleSticky":{"prefix":"ToggleVehicleSticky","body":"ToggleVehicleSticky(vehicleid, bool:toggle)"},"IsVehicleSticky":{"prefix":"IsVehicleSticky","body":"IsVehicleSticky(vehicleid)"},"ToggleUnoccupiedVehicleDamage":{"prefix":"ToggleUnoccupiedVehicleDamage","body":"ToggleUnoccupiedVehicleDamage(vehicleid, bool:toggle)"},"IsUnoccupiedDamageToggled":{"prefix":"IsUnoccupiedDamageToggled","body":"IsUnoccupiedDamageToggled(vehicleid)"},"ToggleVehiclePetrolCapDestroy":{"prefix":"ToggleVehiclePetrolCapDestroy","body":"ToggleVehiclePetrolCapDestroy(vehicleid, bool:toggle)"},"IsPetrolCapDestroyToggled":{"prefix":"IsPetrolCapDestroyToggled","body":"IsPetrolCapDestroyToggled(vehicleid)"},"IsVehicleDamageToggled":{"prefix":"IsVehicleDamageToggled","body":"IsVehicleDamageToggled(vehicleid, type)"},"ToggleVehicleDamageUpdate":{"prefix":"ToggleVehicleDamageUpdate","body":"ToggleVehicleDamageUpdate(vehicleid, type, toggle)"},"GetVehicleNextSeat":{"prefix":"GetVehicleNextSeat","body":"GetVehicleNextSeat(vehicleid, passenger = 1)"},"TeleportVehicle":{"prefix":"TeleportVehicle","body":"TeleportVehicle(vehicleid, Float:x, Float:y, Float:z, Float:angle, worldid = -1, interiorid = -1)"},"GetVehicleSlotAttachedObject":{"prefix":"GetVehicleSlotAttachedObject","body":"GetVehicleSlotAttachedObject(vehicleid, slot)"},"IsObjectAttachedToVehicle":{"prefix":"IsObjectAttachedToVehicle","body":"IsObjectAttachedToVehicle(objectid, vehicleid)"},"UpdateVehicleDamage":{"prefix":"UpdateVehicleDamage","body":"EVF::UpdateVehicleDamage(vehicleid, type)"},"UpdateVehicleDamageStatus":{"prefix":"UpdateVehicleDamageStatus","body":"UpdateVehicleDamageStatus(${1:vehicleid}, ${2:panels}, ${3:doors}, ${4:lights}, ${5:tires})$0","description":"Sets the various visual damage statuses of a vehicle, such as popped tires, broken lights and damaged panels."},"GetVehicleDamageStatus":{"prefix":"GetVehicleDamageStatus","body":"GetVehicleDamageStatus(${1:vehicleid}, ${2:panels}, ${3:doors}, ${4:lights}, ${5:tires})$0","description":"Retrieve the damage statuses of a vehicle."},"SetVehicleNeonLights":{"prefix":"SetVehicleNeonLights","body":"SetVehicleNeonLights(vehicleid, bool:enable = true, color = RED_NEON, slotid = 0)"},"VehicleSupportsNeonLights":{"prefix":"VehicleSupportsNeonLights","body":"VehicleSupportsNeonLights(modelid)"},"GetVehicleNeonLightsState":{"prefix":"GetVehicleNeonLightsState","body":"GetVehicleNeonLightsState(vehicleid, slotid = 0)"},"IsToggledVehicleBulletproof":{"prefix":"IsToggledVehicleBulletproof","body":"IsToggledVehicleBulletproof(vehicleid)"},"ToggleVehicleBulletproof":{"prefix":"ToggleVehicleBulletproof","body":"ToggleVehicleBulletproof(vehicleid, bool:toggle)"},"GetComponentName":{"prefix":"GetComponentName","body":"GetComponentName(componentid, name[], len = sizeof(name))"},"GetComponentTypeName":{"prefix":"GetComponentTypeName","body":"GetComponentTypeName(component)"},"IsPlayerInModShop":{"prefix":"IsPlayerInModShop","body":"EVF::IsPlayerInModShop(playerid)"},"IsValidComponentForVehicle":{"prefix":"IsValidComponentForVehicle","body":"IsValidComponentForVehicle(vehicleid, componentid)"},"GetVehicleComponentPrice":{"prefix":"GetVehicleComponentPrice","body":"GetVehicleComponentPrice(componentid)"},"GetVehicleName":{"prefix":"GetVehicleName","body":"GetVehicleName(vehicleid)"},"GetVehicleModelName":{"prefix":"GetVehicleModelName","body":"GetVehicleModelName(modelid)"},"IsTrailer":{"prefix":"IsTrailer","body":"EVF::IsTrailer(vehicleid)"},"IsCarBlinking":{"prefix":"IsCarBlinking","body":"EVF::IsCarBlinking(vehicleid)"},"DisableCarBlinking":{"prefix":"DisableCarBlinking","body":"EVF::DisableCarBlinking(vehicleid)"},"SetCarBlinking":{"prefix":"SetCarBlinking","body":"EVF::SetCarBlinking(vehicleid, side, bool:skip = false)"},"ToggleVehicleBlinking":{"prefix":"ToggleVehicleBlinking","body":"EVF::ToggleVehicleBlinking(bool:toggle)"},"IsToggledVehicleBlinking":{"prefix":"IsToggledVehicleBlinking","body":"EVF::IsToggledVehicleBlinking()"},"EVF_ImportVehicle":{"prefix":"EVF_ImportVehicle","body":"EVF_ImportVehicle(vehicleid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, worldid, interiorid, unoccupied_damage)"},"EVF_RemoveVehicle":{"prefix":"EVF_RemoveVehicle","body":"EVF_RemoveVehicle(vehicleid)"},"GetVehicleColor":{"prefix":"GetVehicleColor","body":"GetVehicleColor(vehicleid, & color1, & color2)"},"GetVehiclePaintjob":{"prefix":"GetVehiclePaintjob","body":"GetVehiclePaintjob(vehicleid)"},"GetVehicleInterior":{"prefix":"GetVehicleInterior","body":"GetVehicleInterior(vehicleid)"},"GetVehicleSpawnInfo":{"prefix":"GetVehicleSpawnInfo","body":"EVF::GetVehicleSpawnInfo(vehicleid, & Float:x, & Float:y, & Float:z, & Float:rotation, & worldid, & interiorid)"},"SetVehicleSpawnInfo":{"prefix":"SetVehicleSpawnInfo","body":"EVF::SetVehicleSpawnInfo(vehicleid, Float:x, Float:y, Float:z, Float:rotation, worldid, interiorid)"},"IsVehicleOccupied":{"prefix":"IsVehicleOccupied","body":"IsVehicleOccupied(vehicleid)"},"OnVehicleCreated":{"prefix":"OnVehicleCreated","body":"OnVehicleCreated(vehicleid)"},"OnVehicleDestroyed":{"prefix":"OnVehicleDestroyed","body":"OnVehicleDestroyed(vehicleid)"},"OnTrailerHooked":{"prefix":"OnTrailerHooked","body":"OnTrailerHooked(playerid, vehicleid, trailerid)"},"OnTrailerUnhooked":{"prefix":"OnTrailerUnhooked","body":"OnTrailerUnhooked(playerid, vehicleid, trailerid)"},"OnPlayerShotVehicle":{"prefix":"OnPlayerShotVehicle","body":"OnPlayerShotVehicle(playerid, vehicleid, weaponid, Float:amount, bodypart)"},"OnVehiclePosChange":{"prefix":"OnVehiclePosChange","body":"OnVehiclePosChange(vehicleid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:oldx, Float:oldy, Float:oldz, Float:oldangle)"},"OnVehicleVelocityChange":{"prefix":"OnVehicleVelocityChange","body":"OnVehicleVelocityChange(vehicleid, Float:newx, Float:newy, Float:newz, Float:oldx, Float:oldy, Float:oldz)"},"OnVehicleHealthChange":{"prefix":"OnVehicleHealthChange","body":"OnVehicleHealthChange(vehicleid, Float:newhealth, Float:oldhealth)"},"OnVehicleFuelChange":{"prefix":"OnVehicleFuelChange","body":"OnVehicleFuelChange(vehicleid, newfuel, oldfuel)"},"OnVehicleBombDeactivate":{"prefix":"OnVehicleBombDeactivate","body":"OnVehicleBombDeactivate(vehicleid)"},"OnVehicleBombExplode":{"prefix":"OnVehicleBombExplode","body":"OnVehicleBombExplode(vehicleid)"},"OnPlayerEditVehicle":{"prefix":"OnPlayerEditVehicle","body":"OnPlayerEditVehicle(playerid, vehicleid, response, Float:fX, Float:fY, Float:fZ, Float:fRotZ)"},"OnPlayerEditVehicleObject":{"prefix":"OnPlayerEditVehicleObject","body":"OnPlayerEditVehicleObject(playerid, vehicleid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)"},"OnPlayerReachSpeedCapLimit":{"prefix":"OnPlayerReachSpeedCapLimit","body":"OnPlayerReachSpeedCapLimit(playerid, vehicleid, Float:speed)"},"OnVehicleBombActivate":{"prefix":"OnVehicleBombActivate","body":"OnVehicleBombActivate(vehicleid)"},"OnVehicleModEx":{"prefix":"OnVehicleModEx","body":"OnVehicleModEx(playerid, vehicleid, componentid, price, illegal)"},"GetWeaponModel":{"prefix":"GetWeaponModel","body":"GetWeaponModel(weaponid)"},"GetWeaponMagSize":{"prefix":"GetWeaponMagSize","body":"GetWeaponMagSize(weaponid)"},"GetWeaponSlot":{"prefix":"GetWeaponSlot","body":"GetWeaponSlot(weaponid)"},"GetWeaponMinDamage":{"prefix":"GetWeaponMinDamage","body":"GetWeaponMinDamage(weaponid)"},"GetWeaponMaxDamage":{"prefix":"GetWeaponMaxDamage","body":"GetWeaponMaxDamage(weaponid)"},"SetWeaponMinDamage":{"prefix":"SetWeaponMinDamage","body":"SetWeaponMinDamage(weaponid, &Float:damage)"},"SetWeaponMaxDamage":{"prefix":"SetWeaponMaxDamage","body":"SetWeaponMaxDamage(weaponid, &Float:damage)"},"GetWeaponMinRange":{"prefix":"GetWeaponMinRange","body":"GetWeaponMinRange(weaponid)"},"GetWeaponMaxRange":{"prefix":"GetWeaponMaxRange","body":"GetWeaponMaxRange(weaponid)"},"SetWeaponMinRange":{"prefix":"SetWeaponMinRange","body":"SetWeaponMinRange(weaponid, &Float:range)"},"SetWeaponMaxRange":{"prefix":"SetWeaponMaxRange","body":"SetWeaponMaxRange(weaponid, &Float:range)"},"GetWeaponShotInterval":{"prefix":"GetWeaponShotInterval","body":"GetWeaponShotInterval(weaponid)"},"GetWeaponRateOfFire":{"prefix":"GetWeaponRateOfFire","body":"GetWeaponRateOfFire(weaponid)"},"GetWeaponRangeCap":{"prefix":"GetWeaponRangeCap","body":"GetWeaponRangeCap(weaponid)"},"GetWeaponDamageFromDistance":{"prefix":"GetWeaponDamageFromDistance","body":"GetWeaponDamageFromDistance(weaponid, Float:distance)"},"ResetChatSpam":{"prefix":"ResetChatSpam","body":"ResetChatSpam(playerid)","description":"IORP Public Function"},"OnSpeedHackDetected":{"prefix":"OnSpeedHackDetected","body":"OnSpeedHackDetected(playerid)","description":"IORP Public Function"},"ResetOriginalPos":{"prefix":"ResetOriginalPos","body":"ResetOriginalPos(playerid)","description":"IORP Public Function"},"CallResetTeleportBit":{"prefix":"CallResetTeleportBit","body":"CallResetTeleportBit(playerid)","description":"IORP Public Function"},"GetPlayerTeleportKickStatus":{"prefix":"GetPlayerTeleportKickStatus","body":"GetPlayerTeleportKickStatus(playerid)","description":"IORP Public Function"},"SetPlayerTeleportKickStatus":{"prefix":"SetPlayerTeleportKickStatus","body":"SetPlayerTeleportKickStatus(playerid, bool:status)","description":"IORP Public Function"},"OnPlayerTeleport":{"prefix":"OnPlayerTeleport","body":"OnPlayerTeleport(playerid, Float:distance)","description":"IORP Public Function"},"SaveVehiclePosition":{"prefix":"SaveVehiclePosition","body":"SaveVehiclePosition(vehicleid)","description":"IORP Public Function"},"ResetHackCounter":{"prefix":"ResetHackCounter","body":"ResetHackCounter(playerid)","description":"IORP Public Function"},"OnAntiCheatVehicleWarp":{"prefix":"OnAntiCheatVehicleWarp","body":"OnAntiCheatVehicleWarp(playerid, vehicleid)","description":"IORP Public Function"},"OnAntiCheatVehicleWarpInto":{"prefix":"OnAntiCheatVehicleWarpInto","body":"OnAntiCheatVehicleWarpInto(playerid, vehicleid)","description":"IORP Public Function"},"OnPlayerInvalidBulletShot":{"prefix":"OnPlayerInvalidBulletShot","body":"OnPlayerInvalidBulletShot(playerid, reason)","description":"IORP Public Function"},"OnVehicleFlyHack":{"prefix":"OnVehicleFlyHack","body":"OnVehicleFlyHack(playerid, Float:distance)","description":"IORP Public Function"},"OnIncomingPacket":{"prefix":"OnIncomingPacket","body":"OnIncomingPacket(playerid, packetid, BitStream:bs)","description":"IORP Public Function"},"OnIncomingRPC":{"prefix":"OnIncomingRPC","body":"OnIncomingRPC(playerid, rpcid, BitStream:bs)","description":"IORP Public Function"},"OnVehicleDeathRequest":{"prefix":"OnVehicleDeathRequest","body":"OnVehicleDeathRequest(vehicleid, killerid)","description":"IORP Public Function"},"CheckVehicleHealthHack":{"prefix":"CheckVehicleHealthHack","body":"CheckVehicleHealthHack()","description":"IORP Public Function"},"ResetVehicleEx":{"prefix":"ResetVehicleEx","body":"ResetVehicleEx(vehicleid)","description":"IORP Public Function"},"OnPlayerVehicleRepair":{"prefix":"OnPlayerVehicleRepair","body":"OnPlayerVehicleRepair(playerid)","description":"IORP Public Function"},"OnSetVehicleToRespawnEx":{"prefix":"OnSetVehicleToRespawnEx","body":"OnSetVehicleToRespawnEx(vehicleid)","description":"IORP Public Function"},"SetVehicleToRespawnEx":{"prefix":"SetVehicleToRespawnEx","body":"SetVehicleToRespawnEx(vehicleid)","description":"IORP Public Function"},"freezeEx":{"prefix":"freezeEx","body":"freezeEx(playerid, time)","description":"IORP Public Function"},"freeze":{"prefix":"freeze","body":"freeze(playerid)","description":"IORP Public Function"},"unfreeze":{"prefix":"unfreeze","body":"unfreeze(playerid)","description":"IORP Public Function"},"OnPlayerfreezed":{"prefix":"OnPlayerfreezed","body":"OnPlayerfreezed(playerid)","description":"IORP Public Function"},"OnPlayerUnfreezed":{"prefix":"OnPlayerUnfreezed","body":"OnPlayerUnfreezed(playerid)","description":"IORP Public Function"},"ResetHealthBitCall":{"prefix":"ResetHealthBitCall","body":"ResetHealthBitCall(playerid)","description":"IORP Public Function"},"ResetArmourBitCall":{"prefix":"ResetArmourBitCall","body":"ResetArmourBitCall(playerid)","description":"IORP Public Function"},"TogglePlayerSpectatingEx":{"prefix":"TogglePlayerSpectatingEx","body":"TogglePlayerSpectatingEx(playerid,bool: toggle)","description":"IORP Public Function"},"OnTogglePRSpectatingEx":{"prefix":"OnTogglePRSpectatingEx","body":"OnTogglePRSpectatingEx(playerid, bool:toggle)","description":"IORP Public Function"},"SetPlayerPosEx":{"prefix":"SetPlayerPosEx","body":"SetPlayerPosEx(playerid, Float:x, Float:y, Float:z)","description":"IORP Public Function"},"OnSetPlayerPosEx":{"prefix":"OnSetPlayerPosEx","body":"OnSetPlayerPosEx(playerid, Float:x, Float:y, Float:z)","description":"IORP Public Function"},"SetPlayerPosFindZEx":{"prefix":"SetPlayerPosFindZEx","body":"SetPlayerPosFindZEx(playerid, Float:x, Float:y, Float:z)","description":"IORP Public Function"},"OnSetPlayerPosFindZEx":{"prefix":"OnSetPlayerPosFindZEx","body":"OnSetPlayerPosFindZEx(playerid, Float:x, Float:y, Float:z)","description":"IORP Public Function"},"PutPlayerInVehicleEx":{"prefix":"PutPlayerInVehicleEx","body":"PutPlayerInVehicleEx(playerid, vehicleid, seatid)","description":"IORP Public Function"},"OnPutPlayerInVehicleEx":{"prefix":"OnPutPlayerInVehicleEx","body":"OnPutPlayerInVehicleEx(playerid, vehicleid, seatid)","description":"IORP Public Function"},"SetPlayerInteriorEx":{"prefix":"SetPlayerInteriorEx","body":"SetPlayerInteriorEx(playerid, interiorid)","description":"IORP Public Function"},"OnSetPlayerInteriorEx":{"prefix":"OnSetPlayerInteriorEx","body":"OnSetPlayerInteriorEx(playerid, interiorid)","description":"IORP Public Function"},"SetPlayerVirtualWorldEx":{"prefix":"SetPlayerVirtualWorldEx","body":"SetPlayerVirtualWorldEx(playerid, worldid)","description":"IORP Public Function"},"OnSetPlayerVWEx":{"prefix":"OnSetPlayerVWEx","body":"OnSetPlayerVWEx(playerid, worldid)","description":"IORP Public Function"},"SetPlayerSkinEx":{"prefix":"SetPlayerSkinEx","body":"SetPlayerSkinEx(playerid, skinid)","description":"IORP Public Function"},"OnSetPlayerSkin":{"prefix":"OnSetPlayerSkin","body":"OnSetPlayerSkin(playerid, skinid)","description":"IORP Public Function"},"OnTeleportVehicleEx":{"prefix":"OnTeleportVehicleEx","body":"OnTeleportVehicleEx(vehicleid, x, y, z, angle, worldid, interiorid)","description":"IORP Public Function"},"OnSetVehiclePosEx":{"prefix":"OnSetVehiclePosEx","body":"OnSetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)","description":"IORP Public Function"},"OnPlayerSkinChange":{"prefix":"OnPlayerSkinChange","body":"OnPlayerSkinChange(playerid, newskin, oldskin)","description":"IORP Public Function"},"OnPlayerVirtualWorld":{"prefix":"OnPlayerVirtualWorld","body":"OnPlayerVirtualWorld(playerid, newvirtualworld, oldvirtualworld)","description":"IORP Public Function"},"Player_COD_Data_Update":{"prefix":"Player_COD_Data_Update","body":"Player_COD_Data_Update(playerid)","description":"IORP Public Function"},"Player_COD_Data_Init":{"prefix":"Player_COD_Data_Init","body":"Player_COD_Data_Init(playerid)","description":"IORP Public Function"},"COD_SpawnInMenu":{"prefix":"COD_SpawnInMenu","body":"COD_SpawnInMenu(playerid)","description":"IORP Public Function"},"COD_PlayerInfoTDUpdate":{"prefix":"COD_PlayerInfoTDUpdate","body":"COD_PlayerInfoTDUpdate()","description":"IORP Public Function"},"CSS_Respawn":{"prefix":"CSS_Respawn","body":"CSS_Respawn()","description":"IORP Public Function"},"CSS_Bomb":{"prefix":"CSS_Bomb","body":"CSS_Bomb(Float:X, Float:Y, Float:Z, type, Float:Radius)","description":"IORP Public Function"},"CSS_Defuse_Bomb":{"prefix":"CSS_Defuse_Bomb","body":"CSS_Defuse_Bomb()","description":"IORP Public Function"},"OnPlayerEventJoin":{"prefix":"OnPlayerEventJoin","body":"OnPlayerEventJoin(playerid, eventid)","description":"IORP Public Function"},"OnPlayerEventLeave":{"prefix":"OnPlayerEventLeave","body":"OnPlayerEventLeave(playerid, eventid)","description":"IORP Public Function"},"Fallout_Start_Event":{"prefix":"Fallout_Start_Event","body":"Fallout_Start_Event()","description":"IORP Public Function"},"FalloutStarting":{"prefix":"FalloutStarting","body":"FalloutStarting()","description":"IORP Public Function"},"CheckPlayer":{"prefix":"CheckPlayer","body":"CheckPlayer()","description":"IORP Public Function"},"FallingPlat":{"prefix":"FallingPlat","body":"FallingPlat()","description":"IORP Public Function"},"PUBG_Player_Data_Update":{"prefix":"PUBG_Player_Data_Update","body":"PUBG_Player_Data_Update(playerid)","description":"IORP Public Function"},"PUBG_Player_Data_Init":{"prefix":"PUBG_Player_Data_Init","body":"PUBG_Player_Data_Init(playerid)","description":"IORP Public Function"},"PUBG_UpdatePlayerTD":{"prefix":"PUBG_UpdatePlayerTD","body":"PUBG_UpdatePlayerTD()","description":"IORP Public Function"},"MapShrinkActivate":{"prefix":"MapShrinkActivate","body":"MapShrinkActivate()","description":"IORP Public Function"},"PUBG_DestroyPlane":{"prefix":"PUBG_DestroyPlane","body":"PUBG_DestroyPlane(plane_obj)","description":"IORP Public Function"},"PUBG_DestroyVehicles":{"prefix":"PUBG_DestroyVehicles","body":"PUBG_DestroyVehicles()","description":"IORP Public Function"},"PUBG_DestroyPickups":{"prefix":"PUBG_DestroyPickups","body":"PUBG_DestroyPickups()","description":"IORP Public Function"},"IsPlayerInMatchArea":{"prefix":"IsPlayerInMatchArea","body":"IsPlayerInMatchArea()","description":"IORP Public Function"},"EventStartCall":{"prefix":"EventStartCall","body":"EventStartCall()","description":"IORP Public Function"},"busroutestoptimer":{"prefix":"busroutestoptimer","body":"busroutestoptimer(playerid)","description":"IORP Public Function"},"PJobInfo":{"prefix":"PJobInfo","body":"PJobInfo(playerid)","description":"IORP Public Function"},"HidePJobInfo":{"prefix":"HidePJobInfo","body":"HidePJobInfo(playerid)","description":"IORP Public Function"},"LoadLumberJackTrees":{"prefix":"LoadLumberJackTrees","body":"LoadLumberJackTrees()","description":"IORP Public Function"},"LoadLumberJackBuyers":{"prefix":"LoadLumberJackBuyers","body":"LoadLumberJackBuyers()","description":"IORP Public Function"},"LJJS_CutTree":{"prefix":"LJJS_CutTree","body":"LJJS_CutTree(playerid)","description":"IORP Public Function"},"LJJS_RespawnTree":{"prefix":"LJJS_RespawnTree","body":"LJJS_RespawnTree(id)","description":"IORP Public Function"},"LJJS_RemoveLog":{"prefix":"LJJS_RemoveLog","body":"LJJS_RemoveLog(id)","description":"IORP Public Function"},"Vein_Generate":{"prefix":"Vein_Generate","body":"Vein_Generate()","description":"IORP Public Function"},"Player_Mine":{"prefix":"Player_Mine","body":"Player_Mine(playerid)","description":"IORP Public Function"},"Ore_Destroy":{"prefix":"Ore_Destroy","body":"Ore_Destroy(id)","description":"IORP Public Function"},"OnPlayerShowTaxiDialog":{"prefix":"OnPlayerShowTaxiDialog","body":"OnPlayerShowTaxiDialog(playerid)","description":"IORP Public Function"},"OnPlayerFinishedRace":{"prefix":"OnPlayerFinishedRace","body":"OnPlayerFinishedRace(playerid)","description":"IORP Public Function"},"OnPlayerExitCar":{"prefix":"OnPlayerExitCar","body":"OnPlayerExitCar(playerid)","description":"IORP Public Function"},"FillTrash":{"prefix":"FillTrash","body":"FillTrash(id)","description":"IORP Public Function"},"DownRollerBase":{"prefix":"DownRollerBase","body":"DownRollerBase()","description":"IORP Public Function"},"DownObserver_Base":{"prefix":"DownObserver_Base","body":"DownObserver_Base()","description":"IORP Public Function"},"DownCaida_Base":{"prefix":"DownCaida_Base","body":"DownCaida_Base()","description":"IORP Public Function"},"StopBull":{"prefix":"StopBull","body":"StopBull()","description":"IORP Public Function"},"spawnVehiculeWithPlayerInto":{"prefix":"spawnVehiculeWithPlayerInto","body":"spawnVehiculeWithPlayerInto(playerid, vehicle_num, Float:x, Float:y, Float:z, Float:angle, Float:variationZ)","description":"IORP Public Function"},"moveObject":{"prefix":"moveObject","body":"moveObject(objectid, Float:posx, Float:posy, Float:posz, Float:speed)","description":"IORP Public Function"},"destroyMissile":{"prefix":"destroyMissile","body":"destroyMissile()","description":"IORP Public Function"},"checkPlayerInZone":{"prefix":"checkPlayerInZone","body":"checkPlayerInZone(playerid)","description":"IORP Public Function"},"createMissile":{"prefix":"createMissile","body":"createMissile()","description":"IORP Public Function"},"explodeMissile":{"prefix":"explodeMissile","body":"explodeMissile()","description":"IORP Public Function"},"launchMissile":{"prefix":"launchMissile","body":"launchMissile()","description":"IORP Public Function"},"startCountdown":{"prefix":"startCountdown","body":"startCountdown()","description":"IORP Public Function"},"load_actors":{"prefix":"load_actors","body":"load_actors()","description":"IORP Public Function"},"Check":{"prefix":"Check","body":"Check()","description":"IORP Public Function"},"update_player_zone_mark":{"prefix":"update_player_zone_mark","body":"update_player_zone_mark()","description":"IORP Public Function"},"OnAutoDriveEnable":{"prefix":"OnAutoDriveEnable","body":"OnAutoDriveEnable(Path:pathid, playerid, start_time)","description":"IORP Public Function"},"AutoDrive":{"prefix":"AutoDrive","body":"AutoDrive(playerid)","description":"IORP Public Function"},"LoadBankers":{"prefix":"LoadBankers","body":"LoadBankers()","description":"IORP Public Function"},"LoadATMs":{"prefix":"LoadATMs","body":"LoadATMs()","description":"IORP Public Function"},"OnBankAccountCreated":{"prefix":"OnBankAccountCreated","body":"OnBankAccountCreated(playerid, pass[])","description":"IORP Public Function"},"OnBankAccountLogin":{"prefix":"OnBankAccountLogin","body":"OnBankAccountLogin(playerid, id)","description":"IORP Public Function"},"OnBankAccountDeposit":{"prefix":"OnBankAccountDeposit","body":"OnBankAccountDeposit(playerid, amount)","description":"IORP Public Function"},"OnBankAccountWithdraw":{"prefix":"OnBankAccountWithdraw","body":"OnBankAccountWithdraw(playerid, amount)","description":"IORP Public Function"},"OnBankAccountTransfer":{"prefix":"OnBankAccountTransfer","body":"OnBankAccountTransfer(playerid, id, amount)","description":"IORP Public Function"},"OnBankAccountTransferDone":{"prefix":"OnBankAccountTransferDone","body":"OnBankAccountTransferDone(playerid, id, amount)","description":"IORP Public Function"},"OnBankAccountPassChange":{"prefix":"OnBankAccountPassChange","body":"OnBankAccountPassChange(playerid, newpass[])","description":"IORP Public Function"},"OnBankAccountDeleted":{"prefix":"OnBankAccountDeleted","body":"OnBankAccountDeleted(playerid, id, amount)","description":"IORP Public Function"},"OnBankAccountAdminEdit":{"prefix":"OnBankAccountAdminEdit","body":"OnBankAccountAdminEdit(playerid)","description":"IORP Public Function"},"ATM_Regen":{"prefix":"ATM_Regen","body":"ATM_Regen(id)","description":"IORP Public Function"},"Player_Beta_Tester_Init":{"prefix":"Player_Beta_Tester_Init","body":"Player_Beta_Tester_Init(playerid)","description":"IORP Public Function"},"Excitement":{"prefix":"Excitement","body":"Excitement(playerid,bitchid)","description":"IORP Public Function"},"isPlayerInArea":{"prefix":"isPlayerInArea","body":"isPlayerInArea()","description":"IORP Public Function"},"syncActors":{"prefix":"syncActors","body":"syncActors()","description":"IORP Public Function"},"BusinessTimer":{"prefix":"BusinessTimer","body":"BusinessTimer()","description":"IORP Public Function"},"LoadBusinesses":{"prefix":"LoadBusinesses","body":"LoadBusinesses()","description":"IORP Public Function"},"OnBusinessCreated":{"prefix":"OnBusinessCreated","body":"OnBusinessCreated(businessid)","description":"IORP Public Function"},"BusinessSaleMoney":{"prefix":"BusinessSaleMoney","body":"BusinessSaleMoney(playerid)","description":"IORP Public Function"},"OnPermChange":{"prefix":"OnPermChange","body":"OnPermChange(playerid)","description":"IORP Public Function"},"OnPermRemoved":{"prefix":"OnPermRemoved","body":"OnPermRemoved(playerid)","description":"IORP Public Function"},"PlayerWins":{"prefix":"PlayerWins","body":"PlayerWins(playerid)","description":"IORP Public Function"},"GameOwers":{"prefix":"GameOwers","body":"GameOwers(playerid)","description":"IORP Public Function"},"Load_Clan":{"prefix":"Load_Clan","body":"Load_Clan()","description":"IORP Public Function"},"Load_Clan_Rank":{"prefix":"Load_Clan_Rank","body":"Load_Clan_Rank()","description":"IORP Public Function"},"Load_Clan_Skin":{"prefix":"Load_Clan_Skin","body":"Load_Clan_Skin()","description":"IORP Public Function"},"Load_Clan_Weapon":{"prefix":"Load_Clan_Weapon","body":"Load_Clan_Weapon()","description":"IORP Public Function"},"Load_Vehicle_Clan_Data":{"prefix":"Load_Vehicle_Clan_Data","body":"Load_Vehicle_Clan_Data()","description":"IORP Public Function"},"Clan_Player_Init":{"prefix":"Clan_Player_Init","body":"Clan_Player_Init(playerid)","description":"IORP Public Function"},"LoadPlayerProgress2":{"prefix":"LoadPlayerProgress2","body":"LoadPlayerProgress2(playerid)","description":"IORP Public Function"},"ResetCorpSys":{"prefix":"ResetCorpSys","body":"ResetCorpSys(playerid)","description":"IORP Public Function"},"crusher_OpenDoors":{"prefix":"crusher_OpenDoors","body":"crusher_OpenDoors()","description":"IORP Public Function"},"DCC_OnChannelMessage":{"prefix":"DCC_OnChannelMessage","body":"DCC_OnChannelMessage(DCC_Channel:channel, DCC_User:author, const message[])","description":"IORP Public Function"},"OnDCCommandPerformed":{"prefix":"OnDCCommandPerformed","body":"OnDCCommandPerformed(args[], success)","description":"IORP Public Function"},"reboot":{"prefix":"reboot","body":"reboot()","description":"IORP Public Function"},"kick":{"prefix":"kick","body":"kick(playerid)","description":"IORP Public Function"},"kickall":{"prefix":"kickall","body":"kickall(playerid)","description":"IORP Public Function"},"Player_DJ_Data_Init":{"prefix":"Player_DJ_Data_Init","body":"Player_DJ_Data_Init(playerid)","description":"IORP Public Function"},"DJRemixPlayList":{"prefix":"DJRemixPlayList","body":"DJRemixPlayList()","description":"IORP Public Function"},"DJAutoPlayList":{"prefix":"DJAutoPlayList","body":"DJAutoPlayList(PlayListID)","description":"IORP Public Function"},"LoadDealers":{"prefix":"LoadDealers","body":"LoadDealers()","description":"IORP Public Function"},"Player_SaveDrugs":{"prefix":"Player_SaveDrugs","body":"Player_SaveDrugs(playerid)","description":"IORP Public Function"},"Player_Init":{"prefix":"Player_Init","body":"Player_Init(playerid)","description":"IORP Public Function"},"UpdateDealerDrugs":{"prefix":"UpdateDealerDrugs","body":"UpdateDealerDrugs(dealerid)","description":"IORP Public Function"},"RemoveDealerDrugs":{"prefix":"RemoveDealerDrugs","body":"RemoveDealerDrugs(dealerid)","description":"IORP Public Function"},"PlantGrowth":{"prefix":"PlantGrowth","body":"PlantGrowth(id)","description":"IORP Public Function"},"PlantRot":{"prefix":"PlantRot","body":"PlantRot(id)","description":"IORP Public Function"},"RegenHealth":{"prefix":"RegenHealth","body":"RegenHealth(playerid, amount)","description":"IORP Public Function"},"RemoveEffects":{"prefix":"RemoveEffects","body":"RemoveEffects(playerid)","description":"IORP Public Function"},"PlayerData_Data_Init":{"prefix":"PlayerData_Data_Init","body":"PlayerData_Data_Init(playerid)","description":"IORP Public Function"},"OnDialogResponseEx":{"prefix":"OnDialogResponseEx","body":"OnDialogResponseEx(playerid, dialogid, offsetid, response, listitem, const inputtext[], extraid, const payload[])","description":"IORP Public Function"},"Hcp_OnResponse":{"prefix":"Hcp_OnResponse","body":"Hcp_OnResponse(playerid, docid, response)","description":"IORP Public Function"},"load_objectsystem":{"prefix":"load_objectsystem","body":"load_objectsystem()","description":"IORP Public Function"},"LoadEntrance":{"prefix":"LoadEntrance","body":"LoadEntrance()","description":"IORP Public Function"},"Load_Police_Faction_Objects":{"prefix":"Load_Police_Faction_Objects","body":"Load_Police_Faction_Objects()","description":"IORP Public Function"},"Load_Faction":{"prefix":"Load_Faction","body":"Load_Faction()","description":"IORP Public Function"},"Load_Faction_Rank":{"prefix":"Load_Faction_Rank","body":"Load_Faction_Rank()","description":"IORP Public Function"},"Load_Faction_Skin":{"prefix":"Load_Faction_Skin","body":"Load_Faction_Skin()","description":"IORP Public Function"},"Load_Faction_Weapon":{"prefix":"Load_Faction_Weapon","body":"Load_Faction_Weapon()","description":"IORP Public Function"},"Load_Vehicle_Faction_Data":{"prefix":"Load_Vehicle_Faction_Data","body":"Load_Vehicle_Faction_Data()","description":"IORP Public Function"},"Faction_Player_Init":{"prefix":"Faction_Player_Init","body":"Faction_Player_Init(playerid)","description":"IORP Public Function"},"load_food_system":{"prefix":"load_food_system","body":"load_food_system()","description":"IORP Public Function"},"RemoveObject":{"prefix":"RemoveObject","body":"RemoveObject(playerid)","description":"IORP Public Function"},"FootballAnimation":{"prefix":"FootballAnimation","body":"FootballAnimation(playerid)","description":"IORP Public Function"},"GoalCount":{"prefix":"GoalCount","body":"GoalCount()","description":"IORP Public Function"},"FootbalTime":{"prefix":"FootbalTime","body":"FootbalTime()","description":"IORP Public Function"},"ConsumeFuel":{"prefix":"ConsumeFuel","body":"ConsumeFuel()","description":"IORP Public Function"},"Refuel":{"prefix":"Refuel","body":"Refuel(playerid, vehicleid)","description":"IORP Public Function"},"load_autogates":{"prefix":"load_autogates","body":"load_autogates()","description":"IORP Public Function"},"GateSystemCheck":{"prefix":"GateSystemCheck","body":"GateSystemCheck()","description":"IORP Public Function"},"Hitmarket_LoadPlayerData":{"prefix":"Hitmarket_LoadPlayerData","body":"Hitmarket_LoadPlayerData(playerid)","description":"IORP Public Function"},"Hitmarket_HasBounty":{"prefix":"Hitmarket_HasBounty","body":"Hitmarket_HasBounty(playerid)","description":"IORP Public Function"},"PurgeExpiredHits":{"prefix":"PurgeExpiredHits","body":"PurgeExpiredHits()","description":"IORP Public Function"},"ResetAndSaveHouses":{"prefix":"ResetAndSaveHouses","body":"ResetAndSaveHouses()","description":"IORP Public Function"},"LoadHouses":{"prefix":"LoadHouses","body":"LoadHouses()","description":"IORP Public Function"},"LoadFurnitures":{"prefix":"LoadFurnitures","body":"LoadFurnitures()","description":"IORP Public Function"},"GiveHouseKeys":{"prefix":"GiveHouseKeys","body":"GiveHouseKeys(playerid)","description":"IORP Public Function"},"HouseSaleMoney":{"prefix":"HouseSaleMoney","body":"HouseSaleMoney(playerid)","description":"IORP Public Function"},"invisible_update":{"prefix":"invisible_update","body":"invisible_update()","description":"IORP Public Function"},"IsPlayerHaveingDlTest":{"prefix":"IsPlayerHaveingDlTest","body":"IsPlayerHaveingDlTest(playerid)","description":"IORP Public Function"},"IsPlayerHaveLightLicense":{"prefix":"IsPlayerHaveLightLicense","body":"IsPlayerHaveLightLicense(playerid)","description":"IORP Public Function"},"IsPlayerHaveHeavyLicense":{"prefix":"IsPlayerHaveHeavyLicense","body":"IsPlayerHaveHeavyLicense(playerid)","description":"IORP Public Function"},"IsPlayerHaveTwoWheelerLicense":{"prefix":"IsPlayerHaveTwoWheelerLicense","body":"IsPlayerHaveTwoWheelerLicense(playerid)","description":"IORP Public Function"},"IsPlayerHaveHeliCopterLicense":{"prefix":"IsPlayerHaveHeliCopterLicense","body":"IsPlayerHaveHeliCopterLicense(playerid)","description":"IORP Public Function"},"IsPlayerHavePlaneLicense":{"prefix":"IsPlayerHavePlaneLicense","body":"IsPlayerHavePlaneLicense(playerid)","description":"IORP Public Function"},"IsPlayerHaveBoatLicense":{"prefix":"IsPlayerHaveBoatLicense","body":"IsPlayerHaveBoatLicense(playerid)","description":"IORP Public Function"},"Player_Driving_Data_Init":{"prefix":"Player_Driving_Data_Init","body":"Player_Driving_Data_Init(playerid)","description":"IORP Public Function"},"Player_Driving_Data_Update":{"prefix":"Player_Driving_Data_Update","body":"Player_Driving_Data_Update(playerid)","description":"IORP Public Function"},"ResetDLStatus":{"prefix":"ResetDLStatus","body":"ResetDLStatus(playerid)","description":"IORP Public Function"},"ResetLocation":{"prefix":"ResetLocation","body":"ResetLocation(playerid)","description":"IORP Public Function"},"GetPlayerCash":{"prefix":"GetPlayerCash","body":"GetPlayerCash(playerid)","description":"IORP Public Function"},"GivePlayerCash":{"prefix":"GivePlayerCash","body":"GivePlayerCash(playerid, money)","description":"IORP Public Function"},"SetPlayerCash":{"prefix":"SetPlayerCash","body":"SetPlayerCash(playerid, money)","description":"IORP Public Function"},"ResetPlayerCash":{"prefix":"ResetPlayerCash","body":"ResetPlayerCash(playerid)","description":"IORP Public Function"},"GetPlayerLastHealth":{"prefix":"GetPlayerLastHealth","body":"GetPlayerLastHealth(playerid)","description":"IORP Public Function"},"SetPlayerLastHealth":{"prefix":"SetPlayerLastHealth","body":"SetPlayerLastHealth(playerid, data)","description":"IORP Public Function"},"GetPlayerLastArmour":{"prefix":"GetPlayerLastArmour","body":"GetPlayerLastArmour(playerid)","description":"IORP Public Function"},"SetPlayerLastArmour":{"prefix":"SetPlayerLastArmour","body":"SetPlayerLastArmour(playerid, data)","description":"IORP Public Function"},"GetPlayerAutoSpawn":{"prefix":"GetPlayerAutoSpawn","body":"GetPlayerAutoSpawn(playerid)","description":"IORP Public Function"},"SetPlayerAutoSpawn":{"prefix":"SetPlayerAutoSpawn","body":"SetPlayerAutoSpawn(playerid, data)","description":"IORP Public Function"},"GetPlayerAdminLevel":{"prefix":"GetPlayerAdminLevel","body":"GetPlayerAdminLevel(playerid)","description":"IORP Public Function"},"SetPlayerAdminLevel":{"prefix":"SetPlayerAdminLevel","body":"SetPlayerAdminLevel(playerid, data)","description":"IORP Public Function"},"GetPlayerVIPLevel":{"prefix":"GetPlayerVIPLevel","body":"GetPlayerVIPLevel(playerid)","description":"IORP Public Function"},"SetPlayerVIPLevel":{"prefix":"SetPlayerVIPLevel","body":"SetPlayerVIPLevel(playerid, data)","description":"IORP Public Function"},"GetPlayerWantedLevelEx":{"prefix":"GetPlayerWantedLevelEx","body":"GetPlayerWantedLevelEx(playerid)","description":"IORP Public Function"},"SetPlayerWantedLevelEx":{"prefix":"SetPlayerWantedLevelEx","body":"SetPlayerWantedLevelEx(playerid, data)","description":"IORP Public Function"},"GetPlayerInteriorID":{"prefix":"GetPlayerInteriorID","body":"GetPlayerInteriorID(playerid)","description":"IORP Public Function"},"SetPlayerInteriorID":{"prefix":"SetPlayerInteriorID","body":"SetPlayerInteriorID(playerid, data)","description":"IORP Public Function"},"GetPlayerVirtualWorldID":{"prefix":"GetPlayerVirtualWorldID","body":"GetPlayerVirtualWorldID(playerid)","description":"IORP Public Function"},"SetPlayerVirtualWorldID":{"prefix":"SetPlayerVirtualWorldID","body":"SetPlayerVirtualWorldID(playerid, data)","description":"IORP Public Function"},"IsPlayerMasterAdmin":{"prefix":"IsPlayerMasterAdmin","body":"IsPlayerMasterAdmin(playerid)","description":"IORP Public Function"},"SetPlayerMasterAdmin":{"prefix":"SetPlayerMasterAdmin","body":"SetPlayerMasterAdmin(playerid, bool:data)","description":"IORP Public Function"},"IsPlayerBanned":{"prefix":"IsPlayerBanned","body":"IsPlayerBanned(playerid)","description":"IORP Public Function"},"SetPlayerBanStatus":{"prefix":"SetPlayerBanStatus","body":"SetPlayerBanStatus(playerid, bool:data)","description":"IORP Public Function"},"UpdatePlayerDB":{"prefix":"UpdatePlayerDB","body":"UpdatePlayerDB(playerid)","description":"IORP Public Function"},"OnPlayerDataCheck":{"prefix":"OnPlayerDataCheck","body":"OnPlayerDataCheck(playerid, corrupt_check)","description":"IORP Public Function"},"OnPlayerLogin":{"prefix":"OnPlayerLogin","body":"OnPlayerLogin(playerid)","description":"IORP Public Function"},"OnPlayerRegister":{"prefix":"OnPlayerRegister","body":"OnPlayerRegister(playerid)","description":"IORP Public Function"},"CallOnFirstSpawn":{"prefix":"CallOnFirstSpawn","body":"CallOnFirstSpawn(playerid)","description":"IORP Public Function"},"OnFirstSpawn":{"prefix":"OnFirstSpawn","body":"OnFirstSpawn(playerid)","description":"IORP Public Function"},"opc_login_check":{"prefix":"opc_login_check","body":"opc_login_check(playerid)","description":"IORP Public Function"},"HTTP_OnLookupResponse":{"prefix":"HTTP_OnLookupResponse","body":"HTTP_OnLookupResponse(playerid, response, data[])","description":"IORP Public Function"},"OnPlayerKilled":{"prefix":"OnPlayerKilled","body":"OnPlayerKilled(playerid, killerid, weaponid)","description":"IORP Public Function"},"Lottery":{"prefix":"Lottery","body":"Lottery(playerid)","description":"IORP Public Function"},"ShowRandomNumbers":{"prefix":"ShowRandomNumbers","body":"ShowRandomNumbers(playerid)","description":"IORP Public Function"},"HideError":{"prefix":"HideError","body":"HideError(playerid)","description":"IORP Public Function"},"Elevator_Boost":{"prefix":"Elevator_Boost","body":"Elevator_Boost(floorid)","description":"IORP Public Function"},"Elevator_TurnToIdle":{"prefix":"Elevator_TurnToIdle","body":"Elevator_TurnToIdle()","description":"IORP Public Function"},"LoadDefaulMapIcons":{"prefix":"LoadDefaulMapIcons","body":"LoadDefaulMapIcons()","description":"IORP Public Function"},"elevator":{"prefix":"elevator","body":"elevator()","description":"IORP Public Function"},"Bus_NPC_Connect":{"prefix":"Bus_NPC_Connect","body":"Bus_NPC_Connect()","description":"IORP Public Function"},"__OnPlayerPSYSTimerUpdate":{"prefix":"__OnPlayerPSYSTimerUpdate","body":"__OnPlayerPSYSTimerUpdate(playerid)","description":"IORP Public Function"},"OnPlayerPause":{"prefix":"OnPlayerPause","body":"OnPlayerPause(playerid)","description":"IORP Public Function"},"OnPlayerResume":{"prefix":"OnPlayerResume","body":"OnPlayerResume(playerid, pausedtime)","description":"IORP Public Function"},"EndCallBecauseWait":{"prefix":"EndCallBecauseWait","body":"EndCallBecauseWait(playerid)","description":"IORP Public Function"},"S3TragaperrasGO":{"prefix":"S3TragaperrasGO","body":"S3TragaperrasGO(playerid)","description":"IORP Public Function"},"S3TragaperrasEND":{"prefix":"S3TragaperrasEND","body":"S3TragaperrasEND(playerid)","description":"IORP Public Function"},"GalaxyS3PhoneStart":{"prefix":"GalaxyS3PhoneStart","body":"GalaxyS3PhoneStart(playerid)","description":"IORP Public Function"},"UpdateTime":{"prefix":"UpdateTime","body":"UpdateTime()","description":"IORP Public Function"},"Player_Patch_Status_Init":{"prefix":"Player_Patch_Status_Init","body":"Player_Patch_Status_Init(playerid, const pName[])","description":"IORP Public Function"},"OnPatchStatusUpdate_Hud":{"prefix":"OnPatchStatusUpdate_Hud","body":"OnPatchStatusUpdate_Hud(playerid)","description":"IORP Public Function"},"OnPatchStatusUpdate_LSP":{"prefix":"OnPatchStatusUpdate_LSP","body":"OnPatchStatusUpdate_LSP(playerid)","description":"IORP Public Function"},"OnPlayerEditObject":{"prefix":"OnPlayerEditObject","body":"OnPlayerEditObject(${1:playerid}, ${2:playerobject}, ${3:objectid}, ${4:response}, ${5:Float:fX}, ${6:Float:fY}, ${7:Float:fZ}, ${8:Float:fRotX}, ${9:Float:fRotY}, ${10:Float:fRotZ })$0","description":"This callback is called when a player finishes editing an object (EditObject/EditPlayerObject)."},"countdownTimer":{"prefix":"countdownTimer","body":"countdownTimer(race, count)","description":"IORP Public Function"},"exitVehTimer":{"prefix":"exitVehTimer","body":"exitVehTimer(playerid)","description":"IORP Public Function"},"raceEndingTimer":{"prefix":"raceEndingTimer","body":"raceEndingTimer(race)","description":"IORP Public Function"},"respawnUnfreeze":{"prefix":"respawnUnfreeze","body":"respawnUnfreeze(playerid)","description":"IORP Public Function"},"removeText":{"prefix":"removeText","body":"removeText(playerid)","description":"IORP Public Function"},"OnRacePathCalculated":{"prefix":"OnRacePathCalculated","body":"OnRacePathCalculated(Path:pathid, slot)","description":"IORP Public Function"},"RanMessage":{"prefix":"RanMessage","body":"RanMessage()","description":"IORP Public Function"},"load_randmessage":{"prefix":"load_randmessage","body":"load_randmessage()","description":"IORP Public Function"},"LoadRegister_Data":{"prefix":"LoadRegister_Data","body":"LoadRegister_Data()","description":"IORP Public Function"},"CashReg_Reset":{"prefix":"CashReg_Reset","body":"CashReg_Reset(id, smokeid)","description":"IORP Public Function"},"CashReg_Rob":{"prefix":"CashReg_Rob","body":"CashReg_Rob(playerid)","description":"IORP Public Function"},"SetPlayerRPMode":{"prefix":"SetPlayerRPMode","body":"SetPlayerRPMode(playerid, bool:status)","description":"IORP Public Function"},"EnablePlayerRPMode":{"prefix":"EnablePlayerRPMode","body":"EnablePlayerRPMode(playerid)","description":"IORP Public Function"},"DisablePlayerRPMode":{"prefix":"DisablePlayerRPMode","body":"DisablePlayerRPMode(playerid)","description":"IORP Public Function"},"ResetRPMode":{"prefix":"ResetRPMode","body":"ResetRPMode(playerid)","description":"IORP Public Function"},"Safe_Lock":{"prefix":"Safe_Lock","body":"Safe_Lock(id)","description":"IORP Public Function"},"LoadSafe_Data":{"prefix":"LoadSafe_Data","body":"LoadSafe_Data()","description":"IORP Public Function"},"scoresystem":{"prefix":"scoresystem","body":"scoresystem(playerid)","description":"IORP Public Function"},"load_shop_systems":{"prefix":"load_shop_systems","body":"load_shop_systems()","description":"IORP Public Function"},"OnClothesLoad":{"prefix":"OnClothesLoad","body":"OnClothesLoad(playerid)","description":"IORP Public Function"},"OnFinishPurchase":{"prefix":"OnFinishPurchase","body":"OnFinishPurchase(playerid, index)","description":"IORP Public Function"},"OnRemoveFromSlot":{"prefix":"OnRemoveFromSlot","body":"OnRemoveFromSlot(playerid, slot)","description":"IORP Public Function"},"svetstart":{"prefix":"svetstart","body":"svetstart(playerid)","description":"IORP Public Function"},"dimstart":{"prefix":"dimstart","body":"dimstart(playerid)","description":"IORP Public Function"},"startone":{"prefix":"startone","body":"startone(playerid)","description":"IORP Public Function"},"startonex":{"prefix":"startonex","body":"startonex(playerid)","description":"IORP Public Function"},"destroyFlare":{"prefix":"destroyFlare","body":"destroyFlare(playerid)","description":"IORP Public Function"},"vms_car_repair":{"prefix":"vms_car_repair","body":"vms_car_repair(playerid)","description":"IORP Public Function"},"OnSnakeUpdate":{"prefix":"OnSnakeUpdate","body":"OnSnakeUpdate()","description":"IORP Public Function"},"ShipTimer":{"prefix":"ShipTimer","body":"ShipTimer()","description":"IORP Public Function"},"CloseDoor1":{"prefix":"CloseDoor1","body":"CloseDoor1()","description":"IORP Public Function"},"CloseDoor2":{"prefix":"CloseDoor2","body":"CloseDoor2()","description":"IORP Public Function"},"CloseDoor3":{"prefix":"CloseDoor3","body":"CloseDoor3()","description":"IORP Public Function"},"SprayTag_Dialog":{"prefix":"SprayTag_Dialog","body":"SprayTag_Dialog(iPlayerID, iType)","description":"IORP Public Function"},"SprayTag":{"prefix":"SprayTag","body":"SprayTag(playerid, type)","description":"IORP Public Function"},"SprayTag_Load":{"prefix":"SprayTag_Load","body":"SprayTag_Load(extraid, type)","description":"IORP Public Function"},"SprayTag_QueryCreate":{"prefix":"SprayTag_QueryCreate","body":"SprayTag_QueryCreate(playerid, iIndex)","description":"IORP Public Function"},"Load_Static_vehicles":{"prefix":"Load_Static_vehicles","body":"Load_Static_vehicles()","description":"IORP Public Function"},"Update_Static_Vehicle":{"prefix":"Update_Static_Vehicle","body":"Update_Static_Vehicle(Id)","description":"IORP Public Function"},"DestroyVehicleEx":{"prefix":"DestroyVehicleEx","body":"DestroyVehicleEx(vehicleid)","description":"IORP Public Function"},"FlyPlane":{"prefix":"FlyPlane","body":"FlyPlane(id, Float: x, Float: y, Float: z, angle)","description":"IORP Public Function"},"MakeDrop":{"prefix":"MakeDrop","body":"MakeDrop(id, Float: x, Float: y, Float: z)","description":"IORP Public Function"},"RemoveDrop":{"prefix":"RemoveDrop","body":"RemoveDrop(id)","description":"IORP Public Function"},"TragaperrasGO":{"prefix":"TragaperrasGO","body":"TragaperrasGO(playerid)","description":"IORP Public Function"},"TragaperrasEND":{"prefix":"TragaperrasEND","body":"TragaperrasEND(playerid)","description":"IORP Public Function"},"LoaderAnimation":{"prefix":"LoaderAnimation","body":"LoaderAnimation(playerid)","description":"IORP Public Function"},"StartWin8":{"prefix":"StartWin8","body":"StartWin8(playerid)","description":"IORP Public Function"},"LoaderAnimation2":{"prefix":"LoaderAnimation2","body":"LoaderAnimation2(playerid)","description":"IORP Public Function"},"Win8GO":{"prefix":"Win8GO","body":"Win8GO(playerid)","description":"IORP Public Function"},"tablet_UpdateTime":{"prefix":"tablet_UpdateTime","body":"tablet_UpdateTime(playerid)","description":"IORP Public Function"},"tablet_UpdateTime2":{"prefix":"tablet_UpdateTime2","body":"tablet_UpdateTime2(playerid)","description":"IORP Public Function"},"TaserGetUp":{"prefix":"TaserGetUp","body":"TaserGetUp(playerid)","description":"IORP Public Function"},"ChargeUp":{"prefix":"ChargeUp","body":"ChargeUp(playerid)","description":"IORP Public Function"},"nexttic":{"prefix":"nexttic","body":"nexttic(pplayer1,pplayer2)","description":"IORP Public Function"},"HP_TIme_Line":{"prefix":"HP_TIme_Line","body":"HP_TIme_Line()","description":"IORP Public Function"},"respawnunoccupiedvehicle":{"prefix":"respawnunoccupiedvehicle","body":"respawnunoccupiedvehicle()","description":"IORP Public Function"},"VSASUpdate":{"prefix":"VSASUpdate","body":"VSASUpdate(playerid)","description":"IORP Public Function"},"LoadxVehicles":{"prefix":"LoadxVehicles","body":"LoadxVehicles()","description":"IORP Public Function"},"BidBitir":{"prefix":"BidBitir","body":"BidBitir(sender, alan)","description":"IORP Public Function"},"LoadCarKeys":{"prefix":"LoadCarKeys","body":"LoadCarKeys(playerid)","description":"IORP Public Function"},"WalkAnim":{"prefix":"WalkAnim","body":"WalkAnim(playerid)","description":"IORP Public Function"},"OnPlayerGiveWantedLevel":{"prefix":"OnPlayerGiveWantedLevel","body":"OnPlayerGiveWantedLevel(playerid, const reason[])","description":"IORP Public Function"},"OnPlayerWantedLevelReset":{"prefix":"OnPlayerWantedLevelReset","body":"OnPlayerWantedLevelReset(playerid)","description":"IORP Public Function"},"Player_Wanted_Data_Init":{"prefix":"Player_Wanted_Data_Init","body":"Player_Wanted_Data_Init(playerid)","description":"IORP Public Function"},"UpdatePlayersWantedLevel":{"prefix":"UpdatePlayersWantedLevel","body":"UpdatePlayersWantedLevel()","description":"IORP Public Function"},"OnPlayerJailed":{"prefix":"OnPlayerJailed","body":"OnPlayerJailed(playerid)","description":"IORP Public Function"},"OnPlayerUnJailed":{"prefix":"OnPlayerUnJailed","body":"OnPlayerUnJailed(playerid)","description":"IORP Public Function"},"RemoveLastWantedLevel":{"prefix":"RemoveLastWantedLevel","body":"RemoveLastWantedLevel(playerid)","description":"IORP Public Function"},"OnAlexaCommand":{"prefix":"OnAlexaCommand","body":"OnAlexaCommand(playerid, const cmd[], const text[])","description":"IORP Public Function"},"OnAlexaResponse":{"prefix":"OnAlexaResponse","body":"OnAlexaResponse(playerid, const cmd[], const text[])","description":"IORP Public Function"},"IsTimePassedForPlayer":{"prefix":"IsTimePassedForPlayer","body":"bool:IsTimePassedForPlayer(playerid, const Function_Name[], seconds)","description":"IORP Public Function"},"OnServerReboot":{"prefix":"OnServerReboot","body":"OnServerReboot()","description":"IORP Public Function"},"OnPlayerMapLoad":{"prefix":"OnPlayerMapLoad","body":"OnPlayerMapLoad(playerid)","description":"IORP Public Function"},"OnPlayerRequestShop":{"prefix":"OnPlayerRequestShop","body":"OnPlayerRequestShop(playerid, shopid)","description":"IORP Public Function"},"OnAccountDelete":{"prefix":"OnAccountDelete","body":"OnAccountDelete(const AccountName[])","description":"IORP Public Function"},"OnAccountRename":{"prefix":"OnAccountRename","body":"OnAccountRename(const OldName[], const NewName[])","description":"IORP Public Function"},"ResetChatSpamTimer":{"prefix":"ResetChatSpamTimer","body":"ResetChatSpamTimer(playerid)"},"GetPlayerSpeedHackKickStatus":{"prefix":"GetPlayerSpeedHackKickStatus","body":"GetPlayerSpeedHackKickStatus(playerid)"},"SetPlayerSpeedHackKickStatus":{"prefix":"SetPlayerSpeedHackKickStatus","body":"SetPlayerSpeedHackKickStatus(playerid, bool:status)"},"IsPlayerFalling":{"prefix":"IsPlayerFalling","body":"IsPlayerFalling(playerid)          "},"ActivateResetOriginalPos":{"prefix":"ActivateResetOriginalPos","body":"ActivateResetOriginalPos(playerid)"},"DeactivateResetOriginalPos":{"prefix":"DeactivateResetOriginalPos","body":"DeactivateResetOriginalPos(playerid)"},"ResetTeleportBit":{"prefix":"ResetTeleportBit","body":"ResetTeleportBit(playerid, time)"},"SetVehicleOriginalPos":{"prefix":"SetVehicleOriginalPos","body":"SetVehicleOriginalPos(vehicleid)"},"AttachTrailerToVehicleEx":{"prefix":"AttachTrailerToVehicleEx","body":"AttachTrailerToVehicleEx(trailerid, vehicleid)"},"DetachTrailerFromVehicleEx":{"prefix":"DetachTrailerFromVehicleEx","body":"DetachTrailerFromVehicleEx(vehicleid)"},"BS_ReadGiveOrTake":{"prefix":"BS_ReadGiveOrTake","body":"BS_ReadGiveOrTake(BitStream:bs, data[PR_OnGiveTake])"},"BS_ReadEnterVehicle":{"prefix":"BS_ReadEnterVehicle","body":"BS_ReadEnterVehicle(BitStream:bs, data[PR_EnterVehicle])"},"BS_ReadExitVehicle":{"prefix":"BS_ReadExitVehicle","body":"BS_ReadExitVehicle(BitStream:bs, data[PR_ExitVehicle])"},"BS_ReadOnPlayerEditAttachedObj":{"prefix":"BS_ReadOnPlayerEditAttachedObj","body":"BS_ReadOnPlayerEditAttachedObj(BitStream:bs, data[PR_OnPlayerEditAttachedObject])"},"BS_ReadSendDialogResponse":{"prefix":"BS_ReadSendDialogResponse","body":"BS_ReadSendDialogResponse(BitStream:bs, data[PR_SendDialogResponse])"},"GetVehicleAntiHealthEx":{"prefix":"GetVehicleAntiHealthEx","body":"Float:GetVehicleAntiHealthEx(vehicleid)"},"GetVehicleHealthEx":{"prefix":"GetVehicleHealthEx","body":"Float:GetVehicleHealthEx(vehicleid)"},"SetVehicleHealthEx":{"prefix":"SetVehicleHealthEx","body":"SetVehicleHealthEx(vehicleid, Float:vhealth)"},"IsPlayerFreezed":{"prefix":"IsPlayerFreezed","body":"IsPlayerFreezed(playerid)"},"GivePlayerWeaponEx":{"prefix":"GivePlayerWeaponEx","body":"GivePlayerWeaponEx(playerid,weaponid,ammo)"},"ResetPlayerWeaponsEx":{"prefix":"ResetPlayerWeaponsEx","body":"ResetPlayerWeaponsEx(playerid)"},"IsPlayerHaveWeapon":{"prefix":"IsPlayerHaveWeapon","body":"IsPlayerHaveWeapon(playerid, weaponid)"},"SetPlayerHealthEx":{"prefix":"SetPlayerHealthEx","body":"SetPlayerHealthEx(playerid, Float:sHealth)"},"GetPlayerHealthEx":{"prefix":"GetPlayerHealthEx","body":"GetPlayerHealthEx(playerid)"},"ResetHealthBit":{"prefix":"ResetHealthBit","body":"ResetHealthBit(playerid)"},"SetPlayerArmourEx":{"prefix":"SetPlayerArmourEx","body":"SetPlayerArmourEx(playerid, Float:varmour)"},"GetPlayerArmourEx":{"prefix":"GetPlayerArmourEx","body":"GetPlayerArmourEx(playerid)"},"ResetArmourBit":{"prefix":"ResetArmourBit","body":"ResetArmourBit(playerid)"},"TeleportVehicleEx":{"prefix":"TeleportVehicleEx","body":"TeleportVehicleEx(vehicleid,Float:x,Float:y,Float:z,Float:angle, worldid = -1, interiorid = -1)"},"SetVehiclePosEx":{"prefix":"SetVehiclePosEx","body":"SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)"},"SendClientMessageEx":{"prefix":"SendClientMessageEx","body":"SendClientMessageEx(playerid, color, const message[])"},"GetPlayerSpectatingStatus":{"prefix":"GetPlayerSpectatingStatus","body":"bool:GetPlayerSpectatingStatus(playerid)"},"COD_GetPlayerScore":{"prefix":"COD_GetPlayerScore","body":"COD_GetPlayerScore(playerid)"},"COD_SetPlayerScore":{"prefix":"COD_SetPlayerScore","body":"COD_SetPlayerScore(playerid, data)"},"COD_GetPlayerDeaths":{"prefix":"COD_GetPlayerDeaths","body":"COD_GetPlayerDeaths(playerid)"},"COD_SetPlayerDeaths":{"prefix":"COD_SetPlayerDeaths","body":"COD_SetPlayerDeaths(playerid, data)"},"COD_GetPlayerKills":{"prefix":"COD_GetPlayerKills","body":"COD_GetPlayerKills(playerid)"},"COD_SetPlayerKills":{"prefix":"COD_SetPlayerKills","body":"COD_SetPlayerKills(playerid, data)"},"COD_IsTeamValid":{"prefix":"COD_IsTeamValid","body":"bool:COD_IsTeamValid(teamid)"},"COD_GetTeamColor":{"prefix":"COD_GetTeamColor","body":"COD_GetTeamColor(teamid)"},"COD_GetTeamName":{"prefix":"COD_GetTeamName","body":"COD_GetTeamName(teamid)"},"COD_GetRankName":{"prefix":"COD_GetRankName","body":"COD_GetRankName(rankid)"},"COD_GetRankRequireScore":{"prefix":"COD_GetRankRequireScore","body":"COD_GetRankRequireScore(rankid)"},"COD_GetTotalPlayerInTeam":{"prefix":"COD_GetTotalPlayerInTeam","body":"COD_GetTotalPlayerInTeam(teamid)"},"COD_SetPlayerTeam":{"prefix":"COD_SetPlayerTeam","body":"COD_SetPlayerTeam(playerid, teamid)"},"COD_GetPlayerRank":{"prefix":"COD_GetPlayerRank","body":"COD_GetPlayerRank(playerid)"},"COD_SetPlayerRank":{"prefix":"COD_SetPlayerRank","body":"COD_SetPlayerRank(playerid, rankid)"},"COD_GetPlayerTeam":{"prefix":"COD_GetPlayerTeam","body":"COD_GetPlayerTeam(playerid)"},"COD_ShowZonesToPlayer":{"prefix":"COD_ShowZonesToPlayer","body":"COD_ShowZonesToPlayer(playerid)"},"COD_HideZonesToPlayer":{"prefix":"COD_HideZonesToPlayer","body":"COD_HideZonesToPlayer(playerid)"},"COD_PlayerInfoTDCreate":{"prefix":"COD_PlayerInfoTDCreate","body":"COD_PlayerInfoTDCreate(playerid)"},"COD_PlayerInfoTDDestroy":{"prefix":"COD_PlayerInfoTDDestroy","body":"COD_PlayerInfoTDDestroy(playerid)"},"COD_PlayerInfoTDShow":{"prefix":"COD_PlayerInfoTDShow","body":"COD_PlayerInfoTDShow(playerid)"},"COD_PlayerInfoTDHide":{"prefix":"COD_PlayerInfoTDHide","body":"COD_PlayerInfoTDHide(playerid)"},"COD_HasPlayerFlag":{"prefix":"COD_HasPlayerFlag","body":"bool:COD_HasPlayerFlag(playerid)"},"COD_GetPlayerFlag":{"prefix":"COD_GetPlayerFlag","body":"COD_GetPlayerFlag(playerid)"},"COD_SetPlayerFlag":{"prefix":"COD_SetPlayerFlag","body":"COD_SetPlayerFlag(playerid, data)"},"COD_CODZ_CreateFlag":{"prefix":"COD_CODZ_CreateFlag","body":"COD_CODZ_CreateFlag(zoneid)"},"COD_CODZ_GetZoneColor":{"prefix":"COD_CODZ_GetZoneColor","body":"COD_CODZ_GetZoneColor(zoneid)"},"COD_CODZ_SetZoneTeam":{"prefix":"COD_CODZ_SetZoneTeam","body":"COD_CODZ_SetZoneTeam(zoneid, teamid)"},"COD_CODZ_GetZoneTeam":{"prefix":"COD_CODZ_GetZoneTeam","body":"COD_CODZ_GetZoneTeam(zoneid)"},"COD_CODZ_GetZoneName":{"prefix":"COD_CODZ_GetZoneName","body":"COD_CODZ_GetZoneName(zoneid)"},"COD_CODZ_ZoneSpawn":{"prefix":"COD_CODZ_ZoneSpawn","body":"COD_CODZ_ZoneSpawn(playerid, const inputtext[])"},"COD_CODZ_UpdateZonesForAll":{"prefix":"COD_CODZ_UpdateZonesForAll","body":"COD_CODZ_UpdateZonesForAll()"},"COD_CODZ_ShowZonesToPlayer":{"prefix":"COD_CODZ_ShowZonesToPlayer","body":"COD_CODZ_ShowZonesToPlayer(playerid)"},"COD_CODZ_HideZonesToPlayer":{"prefix":"COD_CODZ_HideZonesToPlayer","body":"COD_CODZ_HideZonesToPlayer(playerid)"},"CSS_Spawn_CT":{"prefix":"CSS_Spawn_CT","body":"CSS_Spawn_CT(playerid)"},"CSS_Spawn_TR":{"prefix":"CSS_Spawn_TR","body":"CSS_Spawn_TR(playerid)"},"CSS_SetPDeathstatus":{"prefix":"CSS_SetPDeathstatus","body":"CSS_SetPDeathstatus(playerid, bool:status)"},"CSS_GetPDeathstatus":{"prefix":"CSS_GetPDeathstatus","body":"CSS_GetPDeathstatus(playerid)"},"CSS_GetPCountCT":{"prefix":"CSS_GetPCountCT","body":"CSS_GetPCountCT()"},"CSS_GetPCountT":{"prefix":"CSS_GetPCountT","body":"CSS_GetPCountT()"},"CSS_IsTeamBalanced":{"prefix":"CSS_IsTeamBalanced","body":"CSS_IsTeamBalanced()"},"CSS_GetTPAliveCountCT":{"prefix":"CSS_GetTPAliveCountCT","body":"CSS_GetTPAliveCountCT()"},"CSS_GetTPAliveCountT":{"prefix":"CSS_GetTPAliveCountT","body":"CSS_GetTPAliveCountT()"},"CSS_TeamWinCT":{"prefix":"CSS_TeamWinCT","body":"CSS_TeamWinCT()"},"CSS_TeamWinT":{"prefix":"CSS_TeamWinT","body":"CSS_TeamWinT()"},"CSS_IsBombPlanted":{"prefix":"CSS_IsBombPlanted","body":"CSS_IsBombPlanted()"},"GetPlayerEventVSpawnAuth":{"prefix":"GetPlayerEventVSpawnAuth","body":"bool:GetPlayerEventVSpawnAuth(playerid)"},"SetPlayerEventVSpawnAuth":{"prefix":"SetPlayerEventVSpawnAuth","body":"SetPlayerEventVSpawnAuth(playerid, bool:status)"},"GetPlayerEventID":{"prefix":"GetPlayerEventID","body":"GetPlayerEventID(playerid)"},"IsPlayerInEvent":{"prefix":"IsPlayerInEvent","body":"IsPlayerInEvent(playerid)"},"SetPlayerEventID":{"prefix":"SetPlayerEventID","body":"SetPlayerEventID(playerid, event_id)"},"IsEventIdValid":{"prefix":"IsEventIdValid","body":"IsEventIdValid(event_id)"},"GetEventName":{"prefix":"GetEventName","body":"GetEventName(event_id)"},"GetEventStatus":{"prefix":"GetEventStatus","body":"GetEventStatus(event_id)"},"join_event":{"prefix":"join_event","body":"join_event(playerid, event_id)"},"leave_event":{"prefix":"leave_event","body":"leave_event(playerid)"},"events_cmd":{"prefix":"events_cmd","body":"events_cmd(playerid)"},"ev_cmd":{"prefix":"ev_cmd","body":"ev_cmd(playerid, const Vehicle[], VehicleID, ColorOne, ColorTwo)"},"SendEventMessage":{"prefix":"SendEventMessage","body":"SendEventMessage(playerid, eventid, const message[])"},"SendEventMessageAll":{"prefix":"SendEventMessageAll","body":"SendEventMessageAll(eventid, const message[])"},"PurgePlatform":{"prefix":"PurgePlatform","body":"PurgePlatform()"},"Platforms":{"prefix":"Platforms","body":"Platforms()"},"PUBG_GetRandomLocation":{"prefix":"PUBG_GetRandomLocation","body":"PUBG_GetRandomLocation(&Float:x, &Float:y, &Float:z)"},"PUBG_GetPlayerKills":{"prefix":"PUBG_GetPlayerKills","body":"PUBG_GetPlayerKills(playerid)"},"PUBG_SetPlayerKills":{"prefix":"PUBG_SetPlayerKills","body":"PUBG_SetPlayerKills(playerid, data)"},"PUBG_GetPlayerDeaths":{"prefix":"PUBG_GetPlayerDeaths","body":"PUBG_GetPlayerDeaths(playerid)"},"PUBG_SetPlayerDeaths":{"prefix":"PUBG_SetPlayerDeaths","body":"PUBG_SetPlayerDeaths(playerid, data)"},"PUBG_GetPlayerPlayed":{"prefix":"PUBG_GetPlayerPlayed","body":"PUBG_GetPlayerPlayed(playerid)"},"PUBG_SetPlayerPlayed":{"prefix":"PUBG_SetPlayerPlayed","body":"PUBG_SetPlayerPlayed(playerid, data)"},"PUBG_GetPlayerWins":{"prefix":"PUBG_GetPlayerWins","body":"PUBG_GetPlayerWins(playerid)"},"PUBG_SetPlayerWins":{"prefix":"PUBG_SetPlayerWins","body":"PUBG_SetPlayerWins(playerid, data)"},"PUBG_IsPlayerInPlane":{"prefix":"PUBG_IsPlayerInPlane","body":"PUBG_IsPlayerInPlane(playerid)"},"PUBG_SetPlayerInPlaneStatus":{"prefix":"PUBG_SetPlayerInPlaneStatus","body":"PUBG_SetPlayerInPlaneStatus(playerid, bool:data)"},"PUBG_IsPlayerInMatch":{"prefix":"PUBG_IsPlayerInMatch","body":"PUBG_IsPlayerInMatch(playerid)"},"PUBG_SetPlayerInMatchStatus":{"prefix":"PUBG_SetPlayerInMatchStatus","body":"PUBG_SetPlayerInMatchStatus(playerid, bool:data)"},"PUBG_GetTotalAlive":{"prefix":"PUBG_GetTotalAlive","body":"PUBG_GetTotalAlive()"},"PUBG_PlayerInfoTDCreate":{"prefix":"PUBG_PlayerInfoTDCreate","body":"PUBG_PlayerInfoTDCreate(playerid)"},"LobberySpawn":{"prefix":"LobberySpawn","body":"LobberySpawn(playerid)"},"PUBG_PlayerInfoTDDestroy":{"prefix":"PUBG_PlayerInfoTDDestroy","body":"PUBG_PlayerInfoTDDestroy(playerid)"},"PUBG_PlayerInfoTDShow":{"prefix":"PUBG_PlayerInfoTDShow","body":"PUBG_PlayerInfoTDShow(playerid)"},"PUBG_PlayerInfoTDHide":{"prefix":"PUBG_PlayerInfoTDHide","body":"PUBG_PlayerInfoTDHide(playerid)"},"PUBG_EventStart":{"prefix":"PUBG_EventStart","body":"PUBG_EventStart()"},"PUBG_EventEnd":{"prefix":"PUBG_EventEnd","body":"PUBG_EventEnd()"},"PUBG_WarnForMapArea":{"prefix":"PUBG_WarnForMapArea","body":"PUBG_WarnForMapArea()"},"PUBG_SpawnVehicles":{"prefix":"PUBG_SpawnVehicles","body":"PUBG_SpawnVehicles()"},"PUBG_SpawnPickups":{"prefix":"PUBG_SpawnPickups","body":"PUBG_SpawnPickups()"},"skyfall_cmd":{"prefix":"skyfall_cmd","body":"skyfall_cmd(playerid)"},"show_event_locations":{"prefix":"show_event_locations","body":"show_event_locations(playerid)"},"lumberjack_admin_panel":{"prefix":"lumberjack_admin_panel","body":"lumberjack_admin_panel(playerid)"},"GetPlayerPoint":{"prefix":"GetPlayerPoint","body":"GetPlayerPoint(playerid)"},"IsTaxiCar":{"prefix":"IsTaxiCar","body":"IsTaxiCar(vehicleid)"},"GetPriceTaxi":{"prefix":"GetPriceTaxi","body":"GetPriceTaxi(playerid)"},"GetPriceTaxiEx":{"prefix":"GetPriceTaxiEx","body":"GetPriceTaxiEx(playerid)"},"GetPlayerCarDriver":{"prefix":"GetPlayerCarDriver","body":"GetPlayerCarDriver(playerid)"},"GetPlayerCarPass":{"prefix":"GetPlayerCarPass","body":"GetPlayerCarPass(playerid)"},"lsfunfair_cmd":{"prefix":"lsfunfair_cmd","body":"lsfunfair_cmd(playerid)"},"actor_admin_panel":{"prefix":"actor_admin_panel","body":"actor_admin_panel(playerid)"},"actor_quick_action_cmd":{"prefix":"actor_quick_action_cmd","body":"actor_quick_action_cmd(playerid)"},"AMSS_Show":{"prefix":"AMSS_Show","body":"AMSS_Show(playerid)"},"AMSS_Hide":{"prefix":"AMSS_Hide","body":"AMSS_Hide(playerid)"},"GetPlayerUsingAnimationStatus":{"prefix":"GetPlayerUsingAnimationStatus","body":"GetPlayerUsingAnimationStatus(playerid)"},"SetPlayerUsingAnimationStatus":{"prefix":"SetPlayerUsingAnimationStatus","body":"SetPlayerUsingAnimationStatus(playerid, bool:status)"},"StopPlayerAnimation":{"prefix":"StopPlayerAnimation","body":"StopPlayerAnimation(playerid)"},"ANS_PreloadAnimLib":{"prefix":"ANS_PreloadAnimLib","body":"ANS_PreloadAnimLib(playerid, const animlib[])"},"IsInLowRider":{"prefix":"IsInLowRider","body":"IsInLowRider(playerid)"},"Anim_Commands":{"prefix":"Anim_Commands","body":"Anim_Commands(playerid)"},"weapsys_GetWeaponModel":{"prefix":"weapsys_GetWeaponModel","body":"weapsys_GetWeaponModel(weaponid)"},"atan2VehicleZ":{"prefix":"atan2VehicleZ","body":"Float:atan2VehicleZ(Float:Xb,Float:Yb,Float:Xe,Float:Ye)"},"PullVehicleIntoDirection":{"prefix":"PullVehicleIntoDirection","body":"PullVehicleIntoDirection(vehicleid, Float:x, Float:y, Float:z, Float:speed)"},"autodrive_cmd":{"prefix":"autodrive_cmd","body":"autodrive_cmd(playerid)"},"autodrivedspeed_cmd":{"prefix":"autodrivedspeed_cmd","body":"autodrivedspeed_cmd(playerid, Float:speed)"},"autodrivestop_cmd":{"prefix":"autodrivestop_cmd","body":"autodrivestop_cmd(playerid)"},"autodrive_menu":{"prefix":"autodrive_menu","body":"autodrive_menu(playerid)"},"GetPlayerRepairAuth":{"prefix":"GetPlayerRepairAuth","body":"GetPlayerRepairAuth(playerid)"},"SetPlayerRepairAuth":{"prefix":"SetPlayerRepairAuth","body":"SetPlayerRepairAuth(playerid, bool:status)"},"GetPlayerAutoRepairAuth":{"prefix":"GetPlayerAutoRepairAuth","body":"GetPlayerAutoRepairAuth(playerid)"},"SetPlayerAutoRepairAuth":{"prefix":"SetPlayerAutoRepairAuth","body":"SetPlayerAutoRepairAuth(playerid, bool:status)"},"bank_cmd":{"prefix":"bank_cmd","body":"bank_cmd(playerid)"},"atm_cmd":{"prefix":"atm_cmd","body":"atm_cmd(playerid)"},"bank_acp":{"prefix":"bank_acp","body":"bank_acp(playerid)"},"GetPlayerBetaTesterStatus":{"prefix":"GetPlayerBetaTesterStatus","body":"GetPlayerBetaTesterStatus(playerid)"},"SetPlayerBetaTesterStatus":{"prefix":"SetPlayerBetaTesterStatus","body":"SetPlayerBetaTesterStatus(playerid, bool:status)"},"SetPlayerBetaTester":{"prefix":"SetPlayerBetaTester","body":"SetPlayerBetaTester(playerid, bool:status)"},"static":{"prefix":"static","body":"static JHPreloadAnimLib(playerid)"},"TogglePlayerMovieMod":{"prefix":"TogglePlayerMovieMod","body":"TogglePlayerMovieMod(playerid,mod)"},"business_cmd":{"prefix":"business_cmd","body":"business_cmd(playerid)"},"CreateDynamicObjectCamp":{"prefix":"CreateDynamicObjectCamp","body":"CreateDynamicObjectCamp(Float:x,Float:y,Float:z,Float:a) "},"DestroyDynamicObjectCamp":{"prefix":"DestroyDynamicObjectCamp","body":"DestroyDynamicObjectCamp()"},"putcamp_cmd":{"prefix":"putcamp_cmd","body":"putcamp_cmd(playerid)"},"removecamp_cmd":{"prefix":"removecamp_cmd","body":"removecamp_cmd(playerid)"},"info_casino":{"prefix":"info_casino","body":"info_casino(playerid)"},"td_casino":{"prefix":"td_casino","body":"td_casino(playerid)"},"casinoplay_cmd":{"prefix":"casinoplay_cmd","body":"casinoplay_cmd(playerid)"},"GetVehicleClan":{"prefix":"GetVehicleClan","body":"GetVehicleClan(vehicleid)"},"ShowClanLockerMenu":{"prefix":"ShowClanLockerMenu","body":"ShowClanLockerMenu(playerid, clanid)"},"Update_Player_Clan_Data":{"prefix":"Update_Player_Clan_Data","body":"Update_Player_Clan_Data(playerid)"},"Remove_Player_Clan":{"prefix":"Remove_Player_Clan","body":"Remove_Player_Clan(playerid, PId)"},"Clan_ShowZonesToPlayer":{"prefix":"Clan_ShowZonesToPlayer","body":"Clan_ShowZonesToPlayer(playerid)"},"Clan_HideZonesToPlayer":{"prefix":"Clan_HideZonesToPlayer","body":"Clan_HideZonesToPlayer(playerid)"},"GetPlayerClan":{"prefix":"GetPlayerClan","body":"GetPlayerClan(playerid)"},"GetPlayerClanRank":{"prefix":"GetPlayerClanRank","body":"GetPlayerClanRank(playerid)"},"SetPlayerClan":{"prefix":"SetPlayerClan","body":"SetPlayerClan(playerid, clanid, rankid)"},"GetClanColor":{"prefix":"GetClanColor","body":"GetClanColor(fId)"},"GetPlayerClanStatus":{"prefix":"GetPlayerClanStatus","body":"GetPlayerClanStatus(playerid)"},"SetPlayerClanStatus":{"prefix":"SetPlayerClanStatus","body":"SetPlayerClanStatus(playerid, bool:status)"},"GetPlayerClanRequestID":{"prefix":"GetPlayerClanRequestID","body":"GetPlayerClanRequestID(playerid)"},"SetPlayerClanRequestID":{"prefix":"SetPlayerClanRequestID","body":"SetPlayerClanRequestID(playerid, clanid)"},"GetPlayersReqForClanCount":{"prefix":"GetPlayersReqForClanCount","body":"GetPlayersReqForClanCount(clanid)"},"GetClanLeader":{"prefix":"GetClanLeader","body":"GetClanLeader(Id)"},"GetClanLeaderId":{"prefix":"GetClanLeaderId","body":"GetClanLeaderId(fID)"},"GetClanMemberCount":{"prefix":"GetClanMemberCount","body":"GetClanMemberCount(Id)"},"GetClanName":{"prefix":"GetClanName","body":"GetClanName(Id)"},"GetClanId":{"prefix":"GetClanId","body":"GetClanId(Id)"},"GetClanWage":{"prefix":"GetClanWage","body":"GetClanWage(Id)"},"GetClanRankName":{"prefix":"GetClanRankName","body":"GetClanRankName(fId, rId)"},"clans_cmd":{"prefix":"clans_cmd","body":"clans_cmd(playerid)"},"clanpu_cmd":{"prefix":"clanpu_cmd","body":"clanpu_cmd(playerid)"},"SetClanWeaponbySlotID":{"prefix":"SetClanWeaponbySlotID","body":"SetClanWeaponbySlotID(playerid)"},"SetClanRankNameByRankID":{"prefix":"SetClanRankNameByRankID","body":"SetClanRankNameByRankID(playerid)"},"SetClanSkinbySlotID":{"prefix":"SetClanSkinbySlotID","body":"SetClanSkinbySlotID(playerid)"},"Computer_ReturnPlayerZone":{"prefix":"Computer_ReturnPlayerZone","body":"Computer_ReturnPlayerZone(playerid)"},"Computer_IsPlayerInZone":{"prefix":"Computer_IsPlayerInZone","body":"Computer_IsPlayerInZone(playerid, zoneid) "},"Computer_GetPlayerZone":{"prefix":"Computer_GetPlayerZone","body":"Computer_GetPlayerZone(playerid)"},"loadcomputers":{"prefix":"loadcomputers","body":"loadcomputers()"},"destroy":{"prefix":"destroy","body":"destroy( playerid, const params[] )"},"reditc":{"prefix":"reditc","body":"reditc( playerid,const params[] )"},"rgotoc":{"prefix":"rgotoc","body":"rgotoc( playerid,const params[] )"},"getco":{"prefix":"getco","body":"getco( playerid, const params[] )"},"buycom":{"prefix":"buycom","body":"buycom( playerid)"},"editcomplace":{"prefix":"editcomplace","body":"editcomplace(playerid)"},"sellcom":{"prefix":"sellcom","body":"sellcom(playerid)"},"rsellcom":{"prefix":"rsellcom","body":"rsellcom(playerid)"},"removecomputer":{"prefix":"removecomputer","body":"removecomputer(playerid)"},"gpscom":{"prefix":"gpscom","body":"gpscom(playerid)"},"lockunlock":{"prefix":"lockunlock","body":"lockunlock(playerid)"},"removecom":{"prefix":"removecom","body":"removecom(comid)"},"CreateComputer":{"prefix":"CreateComputer","body":"CreateComputer( playerid, Float:x, Float:y, Float:z, Float:a )"},"StarComp":{"prefix":"StarComp","body":"StarComp(playerid)"},"createclabel":{"prefix":"createclabel","body":"createclabel(i)"},"refleshclabel":{"prefix":"refleshclabel","body":"refleshclabel(i)"},"shutdown":{"prefix":"shutdown","body":"shutdown(playerid)"},"Computer_UpdateTime":{"prefix":"Computer_UpdateTime","body":"Computer_UpdateTime(i)"},"showSuperBall":{"prefix":"showSuperBall","body":"showSuperBall(playerid) "},"hideSuperBall":{"prefix":"hideSuperBall","body":"hideSuperBall(playerid) "},"showmusic":{"prefix":"showmusic","body":"showmusic(playerid) "},"hidemusic":{"prefix":"hidemusic","body":"hidemusic(playerid) "},"showonglet":{"prefix":"showonglet","body":"showonglet(playerid) "},"shownotif":{"prefix":"shownotif","body":"shownotif(playerid) "},"hidenotif":{"prefix":"hidenotif","body":"hidenotif(playerid) "},"showfbd":{"prefix":"showfbd","body":"showfbd(playerid) "},"showerd":{"prefix":"showerd","body":"showerd(playerid)"},"hideerd":{"prefix":"hideerd","body":"hideerd(playerid)"},"hidefbd":{"prefix":"hidefbd","body":"hidefbd(playerid) "},"hideonglet":{"prefix":"hideonglet","body":"hideonglet(playerid) "},"showlang":{"prefix":"showlang","body":"showlang(playerid) "},"hidelang":{"prefix":"hidelang","body":"hidelang(playerid) "},"showmenu":{"prefix":"showmenu","body":"showmenu(playerid) "},"Computer_showzmenu":{"prefix":"Computer_showzmenu","body":"Computer_showzmenu(playerid)"},"showpgzmenu":{"prefix":"showpgzmenu","body":"showpgzmenu(playerid) "},"hidepgzmenu":{"prefix":"hidepgzmenu","body":"hidepgzmenu(playerid) "},"hidezmenu":{"prefix":"hidezmenu","body":"hidezmenu(playerid) "},"hidemenu":{"prefix":"hidemenu","body":"hidemenu(playerid) "},"showdatafonddec":{"prefix":"showdatafonddec","body":"showdatafonddec(playerid) "},"hidedatafonddec":{"prefix":"hidedatafonddec","body":"hidedatafonddec(playerid) "},"showfonddec":{"prefix":"showfonddec","body":"showfonddec(playerid) "},"hidefonddec":{"prefix":"hidefonddec","body":"hidefonddec(playerid) "},"showbarre":{"prefix":"showbarre","body":"showbarre(playerid) "},"hidebarre":{"prefix":"hidebarre","body":"hidebarre(playerid) "},"showwinico":{"prefix":"showwinico","body":"showwinico(playerid) "},"hidewinico":{"prefix":"hidewinico","body":"hidewinico(playerid) "},"showmap":{"prefix":"showmap","body":"showmap(playerid) "},"showZombies":{"prefix":"showZombies","body":"showZombies(playerid) "},"hideZombies":{"prefix":"hideZombies","body":"hideZombies(playerid) "},"hidemap":{"prefix":"hidemap","body":"hidemap(playerid) "},"spmusic":{"prefix":"spmusic","body":"spmusic(playerid) "},"setPlay":{"prefix":"setPlay","body":"setPlay(playerid) "},"SetStop":{"prefix":"SetStop","body":"SetStop(playerid) "},"musicplace":{"prefix":"musicplace","body":"musicplace(playerid)"},"editmpos":{"prefix":"editmpos","body":"editmpos(playerid,pos)"},"showpbarre":{"prefix":"showpbarre","body":"showpbarre(playerid)"},"showpball":{"prefix":"showpball","body":"showpball(playerid)"},"hidepbarre":{"prefix":"hidepbarre","body":"hidepbarre(playerid)"},"destroybarre":{"prefix":"destroybarre","body":"destroybarre(playerid)"},"refleshballbar":{"prefix":"refleshballbar","body":"refleshballbar(playerid)"},"createpb":{"prefix":"createpb","body":"createpb(playerid) "},"movepbarre":{"prefix":"movepbarre","body":"movepbarre(playerid,Float:X,Float:Y) "},"ShowAllPlayer":{"prefix":"ShowAllPlayer","body":"ShowAllPlayer(playerid)"},"ShowMsgPlayer":{"prefix":"ShowMsgPlayer","body":"ShowMsgPlayer(playerid)"},"SM":{"prefix":"SM","body":"SM(playerid,const msg[]) "},"rconlist":{"prefix":"rconlist","body":"rconlist(playerid) "},"getid":{"prefix":"getid","body":"getid(const params[]) "},"barrelang":{"prefix":"barrelang","body":"barrelang(playerid, langue)"},"tarjm":{"prefix":"tarjm","body":"tarjm(playerid, langue)"},"onlineerror":{"prefix":"onlineerror","body":"onlineerror(playerid)"},"UpdateTextDrawKiller":{"prefix":"UpdateTextDrawKiller","body":"UpdateTextDrawKiller(playerid)"},"crusher_IsVehicleWanted":{"prefix":"crusher_IsVehicleWanted","body":"crusher_IsVehicleWanted(vehicleid)"},"ObtainScriptDebugID":{"prefix":"ObtainScriptDebugID","body":"ObtainScriptDebugID(const FunctionName[])"},"RemoveScriptDebugID":{"prefix":"RemoveScriptDebugID","body":"RemoveScriptDebugID(id)"},"GetTotalScriptDebugID":{"prefix":"GetTotalScriptDebugID","body":"GetTotalScriptDebugID()"},"GetTotalFreeScriptDebugID":{"prefix":"GetTotalFreeScriptDebugID","body":"GetTotalFreeScriptDebugID()"},"GetTotalObtainedScriptDebugID":{"prefix":"GetTotalObtainedScriptDebugID","body":"GetTotalObtainedScriptDebugID()"},"IsValidScriptDebugID":{"prefix":"IsValidScriptDebugID","body":"bool:IsValidScriptDebugID(id)"},"IsValidDebugID":{"prefix":"IsValidDebugID","body":"bool:IsValidDebugID(debug_id)"},"GetPlayerDebugStatus":{"prefix":"GetPlayerDebugStatus","body":"bool:GetPlayerDebugStatus(playerid, debug_id)"},"SetPlayerDebugStatus":{"prefix":"SetPlayerDebugStatus","body":"SetPlayerDebugStatus(playerid, debug_id, bool:status)"},"SendDebugMessage":{"prefix":"SendDebugMessage","body":"SendDebugMessage(debug_id, const message[])"},"cmd_debug_menu":{"prefix":"cmd_debug_menu","body":"cmd_debug_menu(playerid)"},"SendDCM":{"prefix":"SendDCM","body":"SendDCM(const message[])"},"Discord_ALog":{"prefix":"Discord_ALog","body":"Discord_ALog(const message[])"},"Discord_Log":{"prefix":"Discord_Log","body":"Discord_Log(const message[])"},"Discord_WIIS":{"prefix":"Discord_WIIS","body":"Discord_WIIS(const message[])"},"Discord_RPLOG":{"prefix":"Discord_RPLOG","body":"Discord_RPLOG(const message[])"},"IsPlayerDJ":{"prefix":"IsPlayerDJ","body":"IsPlayerDJ(playerid)"},"SetPlayerDJStatus":{"prefix":"SetPlayerDJStatus","body":"SetPlayerDJStatus(playerid, bool:status)"},"SetPlayerAsDJ":{"prefix":"SetPlayerAsDJ","body":"SetPlayerAsDJ(playerid, bool:status)"},"GetPlayerTTSstatus":{"prefix":"GetPlayerTTSstatus","body":"GetPlayerTTSstatus(playerid)"},"SetPlayerTTSstatus":{"prefix":"SetPlayerTTSstatus","body":"SetPlayerTTSstatus(playerid, bool:status)"},"GetPlayerMP3status":{"prefix":"GetPlayerMP3status","body":"GetPlayerMP3status(playerid)"},"SetPlayerMP3status":{"prefix":"SetPlayerMP3status","body":"SetPlayerMP3status(playerid, bool:status)"},"GetPlayListSongName":{"prefix":"GetPlayListSongName","body":"GetPlayListSongName(SongID)"},"GetPlayListSongCreator":{"prefix":"GetPlayListSongCreator","body":"GetPlayListSongCreator(SongID)"},"GetPlayListName":{"prefix":"GetPlayListName","body":"GetPlayListName(PlayListID)"},"GetPlayListCreatorName":{"prefix":"GetPlayListCreatorName","body":"GetPlayListCreatorName(PlayListID)"},"View_PlayList":{"prefix":"View_PlayList","body":"View_PlayList(playerid, paged = 0)"},"View_PlayList_Songs":{"prefix":"View_PlayList_Songs","body":"View_PlayList_Songs(playerid, PlayListID, paged = 0)"},"Open_DJ_Panel":{"prefix":"Open_DJ_Panel","body":"Open_DJ_Panel(playerid)"},"ProxDetector":{"prefix":"ProxDetector","body":"ProxDetector(Float: radius = 30.0, playerid, const text[], col1 = 0xFFFFFFFF, col2 = 0xCCCCCCFF, col3 = 0x999999FF, col4 = 0x666666FF, col5 = 0x333333FF)"},"GDS_RemovePlayerWeapon":{"prefix":"GDS_RemovePlayerWeapon","body":"GDS_RemovePlayerWeapon(playerid, weaponid)"},"dropgunsystem_admin_panel":{"prefix":"dropgunsystem_admin_panel","body":"dropgunsystem_admin_panel(playerid)"},"usedrugs_cmd":{"prefix":"usedrugs_cmd","body":"usedrugs_cmd(playerid, amount)"},"givedrugs_cmd":{"prefix":"givedrugs_cmd","body":"givedrugs_cmd(playerid, id, amount)"},"selldrugs_cmd":{"prefix":"selldrugs_cmd","body":"selldrugs_cmd(playerid, id, price)"},"drug_dealer_cmd":{"prefix":"drug_dealer_cmd","body":"drug_dealer_cmd(playerid)"},"drug_plant_cmd":{"prefix":"drug_plant_cmd","body":"drug_plant_cmd(playerid, const params[])"},"drug_acp":{"prefix":"drug_acp","body":"drug_acp(playerid)"},"iorp_drug_menu":{"prefix":"iorp_drug_menu","body":"iorp_drug_menu(playerid)"},"Credit_GetFreeID":{"prefix":"Credit_GetFreeID","body":"Credit_GetFreeID(page, const Script[], const Author[])"},"Credit_RemoveID":{"prefix":"Credit_RemoveID","body":"Credit_RemoveID(id)"},"Credit_TotalID":{"prefix":"Credit_TotalID","body":"Credit_TotalID()"},"Credit_GetTotalFreeID":{"prefix":"Credit_GetTotalFreeID","body":"Credit_GetTotalFreeID()"},"Credit_GetTotalUsedID":{"prefix":"Credit_GetTotalUsedID","body":"Credit_GetTotalUsedID()"},"Credit_IsValidID":{"prefix":"Credit_IsValidID","body":"bool:Credit_IsValidID(id)"},"Credits_Init":{"prefix":"Credits_Init","body":"Credits_Init(playerid, page = 0)"},"Database_Add_Bool":{"prefix":"Database_Add_Bool","body":"Database_Add_Bool(const column[])"},"Database_Add_Int":{"prefix":"Database_Add_Int","body":"Database_Add_Int(const column[])"},"Database_Add_Float":{"prefix":"Database_Add_Float","body":"Database_Add_Float(const column[])"},"Database_Add_String":{"prefix":"Database_Add_String","body":"Database_Add_String(const column[], size = 50)"},"Database_Get_Bool":{"prefix":"Database_Get_Bool","body":"bool:Database_Get_Bool(playerid, const column[])"},"Database_Get_Int":{"prefix":"Database_Get_Int","body":"Database_Get_Int(playerid, const column[])"},"Database_Get_Float":{"prefix":"Database_Get_Float","body":"Float:Database_Get_Float(playerid, const column[])"},"Database_Get_String":{"prefix":"Database_Get_String","body":"Database_Get_String(playerid, const column[])"},"Database_Update_Bool":{"prefix":"Database_Update_Bool","body":"Database_Update_Bool(playerid, const column[], bool:data)"},"Database_Update_Int":{"prefix":"Database_Update_Int","body":"Database_Update_Int(playerid, const column[], data)"},"Database_Update_Float":{"prefix":"Database_Update_Float","body":"Database_Update_Float(playerid, const column[], Float:data)"},"Database_Update_String":{"prefix":"Database_Update_String","body":"Database_Update_String(playerid, const column[], const data[])"},"Dialog_GetFreeID":{"prefix":"Dialog_GetFreeID","body":"Dialog_GetFreeID()"},"Dialog_RemoveID":{"prefix":"Dialog_RemoveID","body":"Dialog_RemoveID(id)"},"Dialog_TotalID":{"prefix":"Dialog_TotalID","body":"Dialog_TotalID()"},"Dialog_GetTotalFreeID":{"prefix":"Dialog_GetTotalFreeID","body":"Dialog_GetTotalFreeID()"},"Dialog_GetTotalUsedID":{"prefix":"Dialog_GetTotalUsedID","body":"Dialog_GetTotalUsedID()"},"Dialog_IsValidID":{"prefix":"Dialog_IsValidID","body":"bool:Dialog_IsValidID(id)"},"ShowPlayerDialogEx":{"prefix":"ShowPlayerDialogEx","body":"ShowPlayerDialogEx(playerid, dialogid, offsetid, style, const caption[], const info[], const button1[], const button2[], extraid = -1, const payload[] = \"null\")"},"Doc_GetFreeID":{"prefix":"Doc_GetFreeID","body":"Doc_GetFreeID()"},"Doc_RemoveID":{"prefix":"Doc_RemoveID","body":"Doc_RemoveID(id)"},"Doc_TotalID":{"prefix":"Doc_TotalID","body":"Doc_TotalID()"},"Doc_GetTotalFreeID":{"prefix":"Doc_GetTotalFreeID","body":"Doc_GetTotalFreeID()"},"Doc_GetTotalUsedID":{"prefix":"Doc_GetTotalUsedID","body":"Doc_GetTotalUsedID()"},"Doc_IsValidID":{"prefix":"Doc_IsValidID","body":"bool:Doc_IsValidID(id)"},"Hcp_AddDoc":{"prefix":"Hcp_AddDoc","body":"Hcp_AddDoc(page, docid, const DocTitle[], const DocData[])"},"Hcp_ViewDoc":{"prefix":"Hcp_ViewDoc","body":"Hcp_ViewDoc(playerid, docid)"},"Hcp_Init":{"prefix":"Hcp_Init","body":"Hcp_Init(playerid, page = 0)"},"reload_dynamicobj":{"prefix":"reload_dynamicobj","body":"reload_dynamicobj()"},"dynamicobject_admin_panel":{"prefix":"dynamicobject_admin_panel","body":"dynamicobject_admin_panel(playerid)"},"GetPlayerUCPStatus":{"prefix":"GetPlayerUCPStatus","body":"GetPlayerUCPStatus(playerid)"},"SetPlayerUCPStatus":{"prefix":"SetPlayerUCPStatus","body":"SetPlayerUCPStatus(playerid, bool:status)"},"User_Panel":{"prefix":"User_Panel","body":"User_Panel(playerid)"},"User_PanelMenu":{"prefix":"User_PanelMenu","body":"User_PanelMenu(playerid)"},"Entrance_Update":{"prefix":"Entrance_Update","body":"Entrance_Update(entranceID)"},"entrance_admin_panel":{"prefix":"entrance_admin_panel","body":"entrance_admin_panel(playerid)"},"sapdobject_cmd":{"prefix":"sapdobject_cmd","body":"sapdobject_cmd(playerid)"},"GetVehicleFaction":{"prefix":"GetVehicleFaction","body":"GetVehicleFaction(vehicleid)"},"ShowFactionLockerMenu":{"prefix":"ShowFactionLockerMenu","body":"ShowFactionLockerMenu(playerid, factionid)"},"Update_Player_Faction_Data":{"prefix":"Update_Player_Faction_Data","body":"Update_Player_Faction_Data(playerid)"},"Remove_Player_Faction":{"prefix":"Remove_Player_Faction","body":"Remove_Player_Faction(playerid, PId)"},"Faction_ShowZonesToPlayer":{"prefix":"Faction_ShowZonesToPlayer","body":"Faction_ShowZonesToPlayer(playerid)"},"Faction_HideZonesToPlayer":{"prefix":"Faction_HideZonesToPlayer","body":"Faction_HideZonesToPlayer(playerid)"},"GetPlayerFaction":{"prefix":"GetPlayerFaction","body":"GetPlayerFaction(playerid)"},"GetPlayerFactionRank":{"prefix":"GetPlayerFactionRank","body":"GetPlayerFactionRank(playerid)"},"SetPlayerFaction":{"prefix":"SetPlayerFaction","body":"SetPlayerFaction(playerid, factionid, rankid)"},"GetFactionColor":{"prefix":"GetFactionColor","body":"GetFactionColor(fId)"},"GetPlayerFactionStatus":{"prefix":"GetPlayerFactionStatus","body":"GetPlayerFactionStatus(playerid)"},"SetPlayerFactionStatus":{"prefix":"SetPlayerFactionStatus","body":"SetPlayerFactionStatus(playerid, bool:status)"},"GetPlayerFactionRequestID":{"prefix":"GetPlayerFactionRequestID","body":"GetPlayerFactionRequestID(playerid)"},"SetPlayerFactionRequestID":{"prefix":"SetPlayerFactionRequestID","body":"SetPlayerFactionRequestID(playerid, factionid)"},"GetPlayersReqForFactionCount":{"prefix":"GetPlayersReqForFactionCount","body":"GetPlayersReqForFactionCount(factionid)"},"GetFactionLeader":{"prefix":"GetFactionLeader","body":"GetFactionLeader(Id)"},"GetFactionLeaderId":{"prefix":"GetFactionLeaderId","body":"GetFactionLeaderId(fID)"},"GetFactionMemberCount":{"prefix":"GetFactionMemberCount","body":"GetFactionMemberCount(Id)"},"GetFactionName":{"prefix":"GetFactionName","body":"GetFactionName(Id)"},"GetFactionId":{"prefix":"GetFactionId","body":"GetFactionId(Id)"},"GetFactionWage":{"prefix":"GetFactionWage","body":"GetFactionWage(Id)"},"GetFactionRankName":{"prefix":"GetFactionRankName","body":"GetFactionRankName(fId, rId)"},"factions_cmd":{"prefix":"factions_cmd","body":"factions_cmd(playerid)"},"factionpu_cmd":{"prefix":"factionpu_cmd","body":"factionpu_cmd(playerid)"},"SetFactionWeaponbySlotID":{"prefix":"SetFactionWeaponbySlotID","body":"SetFactionWeaponbySlotID(playerid)"},"SetFactionRankNameByRankID":{"prefix":"SetFactionRankNameByRankID","body":"SetFactionRankNameByRankID(playerid)"},"SetFactionSkinbySlotID":{"prefix":"SetFactionSkinbySlotID","body":"SetFactionSkinbySlotID(playerid)"},"IsValidRelation":{"prefix":"IsValidRelation","body":"bool:IsValidRelation(relationid)"},"CMD_FamilyDialog":{"prefix":"CMD_FamilyDialog","body":"CMD_FamilyDialog(playerid)"},"GetMoveDirectionFromKeys":{"prefix":"GetMoveDirectionFromKeys","body":"GetMoveDirectionFromKeys(ud, lr)"},"MoveCamera":{"prefix":"MoveCamera","body":"MoveCamera(playerid)"},"SetFlyModePos":{"prefix":"SetFlyModePos","body":"SetFlyModePos(playerid, Float:x, Float:y, Float:z)"},"GetFlyModePos":{"prefix":"GetFlyModePos","body":"GetFlyModePos(playerid, &Float:x, &Float:y, &Float:z)"},"GetNextCameraPosition":{"prefix":"GetNextCameraPosition","body":"GetNextCameraPosition(move_mode, const Float:CP[3], const Float:FV[3], &Float:X, &Float:Y, &Float:Z)"},"CancelFlyMode":{"prefix":"CancelFlyMode","body":"CancelFlyMode(playerid)"},"StartFlyMode":{"prefix":"StartFlyMode","body":"StartFlyMode(playerid)"},"GetXYInFrontOfActor":{"prefix":"GetXYInFrontOfActor","body":"GetXYInFrontOfActor(actorid, &Float:x, &Float:y, Float:distance)"},"food_system_admin_panel":{"prefix":"food_system_admin_panel","body":"food_system_admin_panel(playerid)"},"save_food_act_cmd":{"prefix":"save_food_act_cmd","body":"save_food_act_cmd(playerid)"},"IsPlayerNearFood":{"prefix":"IsPlayerNearFood","body":"IsPlayerNearFood(playerid)"},"order_food_cmd":{"prefix":"order_food_cmd","body":"order_food_cmd(playerid)"},"FootballMessage":{"prefix":"FootballMessage","body":"FootballMessage(color, const string[])"},"IsObjectInTheArea":{"prefix":"IsObjectInTheArea","body":"IsObjectInTheArea(objectid, Float:minx, Float:miny, Float:maxx, Float:maxy)"},"LoopingAnim":{"prefix":"LoopingAnim","body":"LoopingAnim(playerid, const animlib[], const animname[], Float:vSpeed, looping, lockx, locky, lockz, lp)"},"StopLoopingAnim":{"prefix":"StopLoopingAnim","body":"StopLoopingAnim(playerid)"},"cmd_football":{"prefix":"cmd_football","body":"cmd_football(playerid)"},"GetPlayerFuelAuth":{"prefix":"GetPlayerFuelAuth","body":"GetPlayerFuelAuth(playerid)"},"SetPlayerFuelAuth":{"prefix":"SetPlayerFuelAuth","body":"SetPlayerFuelAuth(playerid, bool:status)"},"GetPlayerAutoFuelAuth":{"prefix":"GetPlayerAutoFuelAuth","body":"GetPlayerAutoFuelAuth(playerid)"},"SetPlayerAutoFuelAuth":{"prefix":"SetPlayerAutoFuelAuth","body":"SetPlayerAutoFuelAuth(playerid, bool:status)"},"refuel_cmd":{"prefix":"refuel_cmd","body":"refuel_cmd(playerid)"},"SetVehicleFuelEx":{"prefix":"SetVehicleFuelEx","body":"SetVehicleFuelEx(vehicleid, fuel)"},"GetVehicleFuelEx":{"prefix":"GetVehicleFuelEx","body":"Float:GetVehicleFuelEx(vehicleid)"},"Fuel_System_ACP":{"prefix":"Fuel_System_ACP","body":"Fuel_System_ACP(playerid)"},"gate_cmd":{"prefix":"gate_cmd","body":"gate_cmd(playerid)"},"auto_gate_admin_panel":{"prefix":"auto_gate_admin_panel","body":"auto_gate_admin_panel(playerid)"},"gps_cmd":{"prefix":"gps_cmd","body":"gps_cmd(playerid)"},"hit_OnPlayerDeath":{"prefix":"hit_OnPlayerDeath","body":"hit_OnPlayerDeath(playerid, killerid)"},"LoadHouseKeys":{"prefix":"LoadHouseKeys","body":"LoadHouseKeys(playerid)"},"GetZoneName":{"prefix":"GetZoneName","body":"GetZoneName(Float: x, Float: y, Float: z)"},"GetCityName":{"prefix":"GetCityName","body":"GetCityName(Float: x, Float: y, Float: z)"},"RemovePlayerWeapon":{"prefix":"RemovePlayerWeapon","body":"RemovePlayerWeapon(playerid, weapon)"},"GetXYInFrontOfPlayer":{"prefix":"GetXYInFrontOfPlayer","body":"GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)"},"GetXYInBackOfPlayer":{"prefix":"GetXYInBackOfPlayer","body":"GetXYInBackOfPlayer(playerid, &Float:x, &Float:y, Float:distance)"},"SendToHouse":{"prefix":"SendToHouse","body":"SendToHouse(playerid, id)"},"ShowHouseMenu":{"prefix":"ShowHouseMenu","body":"ShowHouseMenu(playerid)"},"ResetHouse":{"prefix":"ResetHouse","body":"ResetHouse(id)"},"SaveHouse":{"prefix":"SaveHouse","body":"SaveHouse(id)"},"UpdateHouseLabel":{"prefix":"UpdateHouseLabel","body":"UpdateHouseLabel(id)"},"OwnedHouses":{"prefix":"OwnedHouses","body":"OwnedHouses(playerid)"},"house_cmd":{"prefix":"house_cmd","body":"house_cmd(playerid)"},"SetPlayerInvicStatus":{"prefix":"SetPlayerInvicStatus","body":"SetPlayerInvicStatus(playerid, bool:status)"},"GetPlayerInvicStatus":{"prefix":"GetPlayerInvicStatus","body":"GetPlayerInvicStatus(playerid)"},"IsPlayerActivedInvisibleMode":{"prefix":"IsPlayerActivedInvisibleMode","body":"IsPlayerActivedInvisibleMode(playerid)"},"SetPlayerInvisibleMode":{"prefix":"SetPlayerInvisibleMode","body":"SetPlayerInvisibleMode(playerid, bool:status)"},"makeplayerinvisible_cmd":{"prefix":"makeplayerinvisible_cmd","body":"makeplayerinvisible_cmd(adminid, playerid)"},"dltest_cmd":{"prefix":"dltest_cmd","body":"dltest_cmd(playerid)"},"IsPlayerInFlyableVehicle":{"prefix":"IsPlayerInFlyableVehicle","body":"IsPlayerInFlyableVehicle(playerid)"},"ShowLifeGuide":{"prefix":"ShowLifeGuide","body":"ShowLifeGuide(playerid, intro_id = 0)"},"GetPlayerID":{"prefix":"GetPlayerID","body":"GetPlayerID(playerid)"},"SetPlayerID":{"prefix":"SetPlayerID","body":"SetPlayerID(playerid, data)"},"GetPlayerUsername":{"prefix":"GetPlayerUsername","body":"GetPlayerUsername(playerid)"},"SetPlayerUsername":{"prefix":"SetPlayerUsername","body":"SetPlayerUsername(playerid, const name[MAX_PLAYER_NAME])"},"GetPlayerLastLogin":{"prefix":"GetPlayerLastLogin","body":"GetPlayerLastLogin(playerid)"},"GetPlayerPassword":{"prefix":"GetPlayerPassword","body":"GetPlayerPassword(playerid)"},"SetPlayerPassword":{"prefix":"SetPlayerPassword","body":"SetPlayerPassword(playerid, const data[65])"},"GetPlayerSalt":{"prefix":"GetPlayerSalt","body":"GetPlayerSalt(playerid)"},"SetPlayerSalt":{"prefix":"SetPlayerSalt","body":"SetPlayerSalt(playerid, const data[11])"},"GetPlayerKills":{"prefix":"GetPlayerKills","body":"GetPlayerKills(playerid)"},"SetPlayerKills":{"prefix":"SetPlayerKills","body":"SetPlayerKills(playerid, data)"},"GetPlayerDeaths":{"prefix":"GetPlayerDeaths","body":"GetPlayerDeaths(playerid)"},"SetPlayerDeaths":{"prefix":"SetPlayerDeaths","body":"SetPlayerDeaths(playerid, data)"},"GetPlayerPlayedTime":{"prefix":"GetPlayerPlayedTime","body":"GetPlayerPlayedTime(playerid)"},"SetPlayerPlayedTime":{"prefix":"SetPlayerPlayedTime","body":"SetPlayerPlayedTime(playerid, data)"},"GetPlayerPauseTime":{"prefix":"GetPlayerPauseTime","body":"GetPlayerPauseTime(playerid)"},"SetPlayerPauseTime":{"prefix":"SetPlayerPauseTime","body":"SetPlayerPauseTime(playerid, data)"},"GetPlayerLastPosX":{"prefix":"GetPlayerLastPosX","body":"Float:GetPlayerLastPosX(playerid)"},"SetPlayerLastPosX":{"prefix":"SetPlayerLastPosX","body":"SetPlayerLastPosX(playerid, Float:data)"},"GetPlayerLastPosY":{"prefix":"GetPlayerLastPosY","body":"Float:GetPlayerLastPosY(playerid)"},"SetPlayerLastPosY":{"prefix":"SetPlayerLastPosY","body":"SetPlayerLastPosY(playerid, Float:data)"},"GetPlayerLastPosZ":{"prefix":"GetPlayerLastPosZ","body":"Float:GetPlayerLastPosZ(playerid)"},"SetPlayerLastPosZ":{"prefix":"SetPlayerLastPosZ","body":"SetPlayerLastPosZ(playerid, Float:data)"},"GetPlayerLastPosAngle":{"prefix":"GetPlayerLastPosAngle","body":"Float:GetPlayerLastPosAngle(playerid)"},"SetPlayerLastPosAngle":{"prefix":"SetPlayerLastPosAngle","body":"SetPlayerLastPosAngle(playerid, Float:data)"},"GetPlayerPasswordFails":{"prefix":"GetPlayerPasswordFails","body":"GetPlayerPasswordFails(playerid)"},"SetPlayerPasswordFails":{"prefix":"SetPlayerPasswordFails","body":"SetPlayerPasswordFails(playerid, data)"},"Cache":{"prefix":"Cache","body":"Cache:GetPlayerPlayer_Cache(playerid)"},"SetPlayerPlayer_Cache":{"prefix":"SetPlayerPlayer_Cache","body":"SetPlayerPlayer_Cache(playerid, Cache:data)"},"IsPlayerLoggedIn":{"prefix":"IsPlayerLoggedIn","body":"IsPlayerLoggedIn(playerid)"},"GetPlayerLoginStatus":{"prefix":"GetPlayerLoginStatus","body":"GetPlayerLoginStatus(playerid)"},"SetPlayerLoginStatus":{"prefix":"SetPlayerLoginStatus","body":"SetPlayerLoginStatus(playerid, bool:data)"},"GetPlayerSpawnStatus":{"prefix":"GetPlayerSpawnStatus","body":"GetPlayerSpawnStatus(playerid)"},"SetPlayerSpawnStatus":{"prefix":"SetPlayerSpawnStatus","body":"SetPlayerSpawnStatus(playerid, bool:data)"},"GetPlayerDeathStatus":{"prefix":"GetPlayerDeathStatus","body":"GetPlayerDeathStatus(playerid)"},"SetPlayerDeathStatus":{"prefix":"SetPlayerDeathStatus","body":"SetPlayerDeathStatus(playerid, bool:data)"},"GetPlayerUpdateTimerID":{"prefix":"GetPlayerUpdateTimerID","body":"GetPlayerUpdateTimerID(playerid)"},"SetPlayerUpdateTimerID":{"prefix":"SetPlayerUpdateTimerID","body":"SetPlayerUpdateTimerID(playerid, data)"},"GetPlayerScoreTimerID":{"prefix":"GetPlayerScoreTimerID","body":"GetPlayerScoreTimerID(playerid)"},"SetPlayerScoreTimerID":{"prefix":"SetPlayerScoreTimerID","body":"SetPlayerScoreTimerID(playerid, data)"},"GetPlayerFirstSpawnStatus":{"prefix":"GetPlayerFirstSpawnStatus","body":"bool:GetPlayerFirstSpawnStatus(playerid)"},"SetPlayerFirstSpawnStatus":{"prefix":"SetPlayerFirstSpawnStatus","body":"SetPlayerFirstSpawnStatus(playerid, bool:status)"},"GetPlayerCountry":{"prefix":"GetPlayerCountry","body":"GetPlayerCountry(playerid)"},"GetPlayerRegion":{"prefix":"GetPlayerRegion","body":"GetPlayerRegion(playerid)"},"GetPlayerCity":{"prefix":"GetPlayerCity","body":"GetPlayerCity(playerid)"},"GetPlayerISP":{"prefix":"GetPlayerISP","body":"GetPlayerISP(playerid)"},"GetPlayerTimezone":{"prefix":"GetPlayerTimezone","body":"GetPlayerTimezone(playerid)"},"GetPlayerZipcode":{"prefix":"GetPlayerZipcode","body":"GetPlayerZipcode(playerid)"},"changepassword_cmd":{"prefix":"changepassword_cmd","body":"changepassword_cmd(playerid, const newpass[])"},"logout_cmd":{"prefix":"logout_cmd","body":"logout_cmd(playerid)"},"autospawn_cmd":{"prefix":"autospawn_cmd","body":"autospawn_cmd(playerid)"},"MasterAdmin_cmd":{"prefix":"MasterAdmin_cmd","body":"MasterAdmin_cmd(playerid)"},"GetPlayerMutedStatus":{"prefix":"GetPlayerMutedStatus","body":"GetPlayerMutedStatus(playerid)"},"SetPlayerMutedStatus":{"prefix":"SetPlayerMutedStatus","body":"SetPlayerMutedStatus(playerid, bool:status)"},"mute_cmd":{"prefix":"mute_cmd","body":"mute_cmd(playerid, pID, bool:status)"},"change_skin":{"prefix":"change_skin","body":"change_skin(playerid)"},"cmd_lottery":{"prefix":"cmd_lottery","body":"cmd_lottery(playerid)                                         "},"Lottery_GetFreeSlot":{"prefix":"Lottery_GetFreeSlot","body":"Lottery_GetFreeSlot(playerid)                                                          "},"FindSlot":{"prefix":"FindSlot","body":"FindSlot(playerid, lotter_number)                                                     "},"CreatePlayerTextDraws":{"prefix":"CreatePlayerTextDraws","body":"CreatePlayerTextDraws(playerid)                                                "},"CreateGlobalTextDraws":{"prefix":"CreateGlobalTextDraws","body":"CreateGlobalTextDraws()"},"HideTDForPlayer":{"prefix":"HideTDForPlayer","body":"HideTDForPlayer(playerid)"},"Elevator_Initialize":{"prefix":"Elevator_Initialize","body":"Elevator_Initialize()"},"Elevator_Destroy":{"prefix":"Elevator_Destroy","body":"Elevator_Destroy()"},"Elevator_OpenDoors":{"prefix":"Elevator_OpenDoors","body":"Elevator_OpenDoors()"},"Elevator_CloseDoors":{"prefix":"Elevator_CloseDoors","body":"Elevator_CloseDoors()"},"Floor_OpenDoors":{"prefix":"Floor_OpenDoors","body":"Floor_OpenDoors(floorid)"},"Floor_CloseDoors":{"prefix":"Floor_CloseDoors","body":"Floor_CloseDoors(floorid)"},"Elevator_MoveToFloor":{"prefix":"Elevator_MoveToFloor","body":"Elevator_MoveToFloor(floorid)"},"RemoveFirstQueueFloor":{"prefix":"RemoveFirstQueueFloor","body":"RemoveFirstQueueFloor()"},"AddFloorToQueue":{"prefix":"AddFloorToQueue","body":"AddFloorToQueue(floorid)"},"ResetElevatorQueue":{"prefix":"ResetElevatorQueue","body":"ResetElevatorQueue()"},"IsFloorInQueue":{"prefix":"IsFloorInQueue","body":"IsFloorInQueue(floorid)"},"ReadNextFloorInQueue":{"prefix":"ReadNextFloorInQueue","body":"ReadNextFloorInQueue()"},"DidPlayerRequestElevator":{"prefix":"DidPlayerRequestElevator","body":"DidPlayerRequestElevator(playerid)"},"ShowElevatorDialog":{"prefix":"ShowElevatorDialog","body":"ShowElevatorDialog(playerid)"},"CallElevator":{"prefix":"CallElevator","body":"CallElevator(playerid, floorid)"},"GetElevatorZCoordForFloor":{"prefix":"GetElevatorZCoordForFloor","body":"Float:GetElevatorZCoordForFloor(floorid)"},"GetDoorsZCoordForFloor":{"prefix":"GetDoorsZCoordForFloor","body":"Float:GetDoorsZCoordForFloor(floorid)"},"mapicon_admin_panel":{"prefix":"mapicon_admin_panel","body":"mapicon_admin_panel(playerid)"},"mill_mount_lift_cmd":{"prefix":"mill_mount_lift_cmd","body":"mill_mount_lift_cmd(playerid)"},"cmd_minigames":{"prefix":"cmd_minigames","body":"cmd_minigames(playerid)"},"MLM_GetMessages":{"prefix":"MLM_GetMessages","body":"MLM_GetMessages(const message[], const array[][], lines = sizeof(array), line_size = sizeof(array[]))"},"MLM_ShiftStartPos":{"prefix":"MLM_ShiftStartPos","body":"MLM_ShiftStartPos(const message[], pos, bool:is_packed, size = sizeof(message))"},"MLM_ShiftEndPos":{"prefix":"MLM_ShiftEndPos","body":"MLM_ShiftEndPos(const message[], pos, bool:is_packed)"},"MLM_MakeString":{"prefix":"MLM_MakeString","body":"MLM_MakeString(dest[], const size = sizeof(dest), const src[], const bool:is_packed, &last_color, const length, const line, &spos, &epos, const prefix[], const prefix_length, const postfix[], const postfix_length)"},"nametagson_cmd":{"prefix":"nametagson_cmd","body":"nametagson_cmd(playerid)"},"nametagsoff_cmd":{"prefix":"nametagsoff_cmd","body":"nametagsoff_cmd(playerid)"},"nametags_system_panel":{"prefix":"nametags_system_panel","body":"nametags_system_panel(playerid)"},"Start_Train_Engine":{"prefix":"Start_Train_Engine","body":"Start_Train_Engine(vehicleid)"},"IsPlayerPaused":{"prefix":"IsPlayerPaused","body":"bool:IsPlayerPaused(playerid) "},"GetPlayerPausedTime":{"prefix":"GetPlayerPausedTime","body":"GetPlayerPausedTime(playerid) "},"NumberUsed":{"prefix":"NumberUsed","body":"NumberUsed(playerid)"},"GetPlayerPhoneNumber":{"prefix":"GetPlayerPhoneNumber","body":"GetPlayerPhoneNumber(playerid)"},"GalaxyS3Phone":{"prefix":"GalaxyS3Phone","body":"GalaxyS3Phone(playerid,current)"},"GalaxyS3PhoneStarting":{"prefix":"GalaxyS3PhoneStarting","body":"GalaxyS3PhoneStarting(playerid,current)"},"GetMonth":{"prefix":"GetMonth","body":"GetMonth(Month)"},"GetYearFormat00":{"prefix":"GetYearFormat00","body":"GetYearFormat00(Year)"},"ActualizarWEATHER":{"prefix":"ActualizarWEATHER","body":"ActualizarWEATHER()"},"ReturnPlayerZone":{"prefix":"ReturnPlayerZone","body":"ReturnPlayerZone(playerid)"},"phonesys_IsPlayerInZone":{"prefix":"phonesys_IsPlayerInZone","body":"phonesys_IsPlayerInZone(playerid, zoneid) "},"GetPlayerZone":{"prefix":"GetPlayerZone","body":"GetPlayerZone(playerid)"},"sel_phone_cmd":{"prefix":"sel_phone_cmd","body":"sel_phone_cmd(playerid)"},"mynumber_phone_cmd":{"prefix":"mynumber_phone_cmd","body":"mynumber_phone_cmd(playerid)"},"phone_cmd":{"prefix":"phone_cmd","body":"phone_cmd(playerid)"},"answer_phone_cmd":{"prefix":"answer_phone_cmd","body":"answer_phone_cmd(playerid)"},"hangup_phone_cmd":{"prefix":"hangup_phone_cmd","body":"hangup_phone_cmd(playerid)"},"GetPatchStatus_Hud":{"prefix":"GetPatchStatus_Hud","body":"GetPatchStatus_Hud(playerid)"},"SetPatchStatus_Hud":{"prefix":"SetPatchStatus_Hud","body":"SetPatchStatus_Hud(playerid, bool:status)"},"GetPatchStatus_LSP":{"prefix":"GetPatchStatus_LSP","body":"GetPatchStatus_LSP(playerid)"},"SetPatchStatus_LSP":{"prefix":"SetPatchStatus_LSP","body":"SetPatchStatus_LSP(playerid, bool:status)"},"player_patch_cmd":{"prefix":"player_patch_cmd","body":"player_patch_cmd(playerid)"},"GetPlayerPMstatus":{"prefix":"GetPlayerPMstatus","body":"GetPlayerPMstatus(playerid)"},"SetPlayerPMstatus":{"prefix":"SetPlayerPMstatus","body":"SetPlayerPMstatus(playerid, bool:status)"},"GetPlayerLastPMID":{"prefix":"GetPlayerLastPMID","body":"GetPlayerLastPMID(playerid)"},"SetPlayerLastPMID":{"prefix":"SetPlayerLastPMID","body":"SetPlayerLastPMID(playerid, recieverid)"},"nopm_cmd":{"prefix":"nopm_cmd","body":"nopm_cmd(playerid)"},"pm_cmd":{"prefix":"pm_cmd","body":"pm_cmd(playerid, receiverid, const message[])"},"reply_cmd":{"prefix":"reply_cmd","body":"reply_cmd(playerid, const message[])"},"IsValidAccount":{"prefix":"IsValidAccount","body":"bool:IsValidAccount(const Account[])"},"IsAccountDisabled":{"prefix":"IsAccountDisabled","body":"bool:IsAccountDisabled(const Account[])"},"GetAccountAdminLevel":{"prefix":"GetAccountAdminLevel","body":"GetAccountAdminLevel(const Account[])"},"GetAccountVIPLevel":{"prefix":"GetAccountVIPLevel","body":"GetAccountVIPLevel(const Account[])"},"GetAccountMasterAdminStatus":{"prefix":"GetAccountMasterAdminStatus","body":"bool:GetAccountMasterAdminStatus(const Account[])"},"cmd_profile_action":{"prefix":"cmd_profile_action","body":"cmd_profile_action(playerid, const Account[])"},"race_OnPlayerUpdateEx":{"prefix":"race_OnPlayerUpdateEx","body":"race_OnPlayerUpdateEx(playerid)"},"getFirstEmptyCPSlot":{"prefix":"getFirstEmptyCPSlot","body":"getFirstEmptyCPSlot(race)"},"updateContestantList":{"prefix":"updateContestantList","body":"updateContestantList(race)"},"createRace":{"prefix":"createRace","body":"createRace(playerid, slot)"},"spawnInRace":{"prefix":"spawnInRace","body":"spawnInRace(playerid, race, spot = -1)"},"calculateNextRacePart":{"prefix":"calculateNextRacePart","body":"calculateNextRacePart(slot, curCPSlot, MapNode:lastNode, bool: firstcalculation = false)"},"irs_race_system_show":{"prefix":"irs_race_system_show","body":"irs_race_system_show(playerid, const cmdtext[])"},"iorp_race_menu":{"prefix":"iorp_race_menu","body":"iorp_race_menu(playerid)"},"hintmessages_cmd":{"prefix":"hintmessages_cmd","body":"hintmessages_cmd(playerid)"},"register_hacking_system_panel":{"prefix":"register_hacking_system_panel","body":"register_hacking_system_panel(playerid)"},"GetPlayerRPMode":{"prefix":"GetPlayerRPMode","body":"GetPlayerRPMode(playerid)"},"safe_hacking_system_panel":{"prefix":"safe_hacking_system_panel","body":"safe_hacking_system_panel(playerid)"},"CreateArt3":{"prefix":"CreateArt3","body":"CreateArt3(const ArtObject[][], type, Float:SA_PosX, Float:SA_PosY, Float:SA_PosZ, Float:SA_RotX, Float:SA_RotY, Float:SA_RotZ, Float:DrawDistance = 300.0)"},"CreateDynamicArt3":{"prefix":"CreateDynamicArt3","body":"CreateDynamicArt3(const ArtObject[][], type, Float:SA_PosX, Float:SA_PosY, Float:SA_PosZ, Float:SA_RotX, Float:SA_RotY, Float:SA_RotZ, worldid = -1, interiorid = -1, playerid = -1, Float:StreamDistance = 200.0, Float:DrawDistance = 300.0 )"},"CreateArtInternal3":{"prefix":"CreateArtInternal3","body":"CreateArtInternal3(const ArtObject[][], type, dynamic, Float:SA_PosX, Float:SA_PosY, Float:SA_PosZ, Float:SA_RotX, Float:SA_RotY, Float:SA_RotZ, worldid = -1, interiorid = -1, playerid = -1, Float:StreamDistance = 200.0, Float:DrawDistance = 300.0 )"},"DestroyArt3Internal":{"prefix":"DestroyArt3Internal","body":"DestroyArt3Internal(ArtID)"},"DestroyArt3":{"prefix":"DestroyArt3","body":"DestroyArt3(ArtID)"},"DestroyDynamicArt3":{"prefix":"DestroyDynamicArt3","body":"DestroyDynamicArt3(ArtID)"},"GetScoreTimerStatus":{"prefix":"GetScoreTimerStatus","body":"GetScoreTimerStatus(playerid)"},"ScoreTimerDisable":{"prefix":"ScoreTimerDisable","body":"ScoreTimerDisable(playerid)"},"ScoreTimerEnable":{"prefix":"ScoreTimerEnable","body":"ScoreTimerEnable(playerid)"},"SS_Update_Shop_Data":{"prefix":"SS_Update_Shop_Data","body":"SS_Update_Shop_Data(id)"},"SS_Drop_Shop_Data":{"prefix":"SS_Drop_Shop_Data","body":"SS_Drop_Shop_Data(id)"},"shop_system_acp":{"prefix":"shop_system_acp","body":"shop_system_acp(playerid)"},"SS_Open_Update_Menu":{"prefix":"SS_Open_Update_Menu","body":"SS_Open_Update_Menu(playerid, id)"},"SS_OpenShop":{"prefix":"SS_OpenShop","body":"SS_OpenShop(playerid, id)"},"LoadPlayerClothes":{"prefix":"LoadPlayerClothes","body":"LoadPlayerClothes(playerid)"},"GetFreeSlot":{"prefix":"GetFreeSlot","body":"GetFreeSlot(playerid)"},"OnBuyClothes":{"prefix":"OnBuyClothes","body":"OnBuyClothes(playerid, index, cmodel, bone, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)"},"ClothesEditDialog":{"prefix":"ClothesEditDialog","body":"ClothesEditDialog(playerid, index)"},"ShowClothesDialog":{"prefix":"ShowClothesDialog","body":"ShowClothesDialog(playerid, fromslot)"},"SavePlayerClothes":{"prefix":"SavePlayerClothes","body":"SavePlayerClothes(playerid)"},"UpdatePlayerToy":{"prefix":"UpdatePlayerToy","body":"UpdatePlayerToy(playerid, slot)"},"EditClothing":{"prefix":"EditClothing","body":"EditClothing(playerid, index)"},"ReplaceClothing":{"prefix":"ReplaceClothing","body":"ReplaceClothing(playerid, index)"},"PlaceClothing":{"prefix":"PlaceClothing","body":"PlaceClothing(playerid, index)"},"DisplayClothing":{"prefix":"DisplayClothing","body":"DisplayClothing(playerid)"},"ShowDialog":{"prefix":"ShowDialog","body":"ShowDialog(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[], status)"},"GetModelName":{"prefix":"GetModelName","body":"GetModelName(cmodel)"},"RemoveFromSlot":{"prefix":"RemoveFromSlot","body":"RemoveFromSlot(playerid, slot)"},"ResetClothes":{"prefix":"ResetClothes","body":"ResetClothes(playerid)"},"GetName":{"prefix":"GetName","body":"GetName(playerid)"},"SyntaxMSG":{"prefix":"SyntaxMSG","body":"SyntaxMSG(playerid, const message[])"},"GetBoneName":{"prefix":"GetBoneName","body":"GetBoneName(boneid)"},"ETShop_GetPhoneStatus":{"prefix":"ETShop_GetPhoneStatus","body":"bool:ETShop_GetPhoneStatus(playerid)"},"ETShop_SetPhoneStatus":{"prefix":"ETShop_SetPhoneStatus","body":"ETShop_SetPhoneStatus(playerid, bool:data)"},"ETShop_GetTabletStatus":{"prefix":"ETShop_GetTabletStatus","body":"bool:ETShop_GetTabletStatus(playerid)"},"ETShop_SetTabletStatus":{"prefix":"ETShop_SetTabletStatus","body":"ETShop_SetTabletStatus(playerid, bool:data)"},"etshop_cmd":{"prefix":"etshop_cmd","body":"etshop_cmd(playerid)"},"blow_pyrotechnic_cmd":{"prefix":"blow_pyrotechnic_cmd","body":"blow_pyrotechnic_cmd(playerid)"},"OpenRepairMenu":{"prefix":"OpenRepairMenu","body":"OpenRepairMenu(playerid)"},"OpenModMenu":{"prefix":"OpenModMenu","body":"OpenModMenu(playerid)"},"iorp_dealership_shop_menu":{"prefix":"iorp_dealership_shop_menu","body":"iorp_dealership_shop_menu(playerid)"},"weapons_shop_menu":{"prefix":"weapons_shop_menu","body":"weapons_shop_menu(playerid) "},"start_snake_cmd":{"prefix":"start_snake_cmd","body":"start_snake_cmd(playerid)"},"start_spectate":{"prefix":"start_spectate","body":"start_spectate(playerid, targetid)"},"stop_spectate":{"prefix":"stop_spectate","body":"stop_spectate(playerid)"},"SprayTag_Create":{"prefix":"SprayTag_Create","body":"SprayTag_Create(playerid, iIndex)"},"SprayTag_Spawn":{"prefix":"SprayTag_Spawn","body":"SprayTag_Spawn(playerid, iIndex)"},"SprayTag_Save":{"prefix":"SprayTag_Save","body":"SprayTag_Save(playerid, iIndex)"},"SprayTag_Clear":{"prefix":"SprayTag_Clear","body":"SprayTag_Clear(playerid, iIndex)"},"HexToInt":{"prefix":"HexToInt","body":"HexToInt(const string[])"},"cmd_tags":{"prefix":"cmd_tags","body":"cmd_tags(playerid)"},"GetPlayerStaticVehicleID":{"prefix":"GetPlayerStaticVehicleID","body":"GetPlayerStaticVehicleID(playerid)"},"GetStaticVehicleID":{"prefix":"GetStaticVehicleID","body":"GetStaticVehicleID(vehicleid)"},"GetStaticVehicleFactionID":{"prefix":"GetStaticVehicleFactionID","body":"GetStaticVehicleFactionID(Id)"},"staticvehicle_admin_panel":{"prefix":"staticvehicle_admin_panel","body":"staticvehicle_admin_panel(playerid)"},"drop_cmd":{"prefix":"drop_cmd","body":"drop_cmd(playerid)"},"ShowTabletForPlayer":{"prefix":"ShowTabletForPlayer","body":"ShowTabletForPlayer(playerid)"},"HideTabletForPlayer":{"prefix":"HideTabletForPlayer","body":"HideTabletForPlayer(playerid)"},"ShowUserLogTablet":{"prefix":"ShowUserLogTablet","body":"ShowUserLogTablet(playerid)"},"HideUserLogTablet":{"prefix":"HideUserLogTablet","body":"HideUserLogTablet(playerid)"},"ShowStartMenuTablet":{"prefix":"ShowStartMenuTablet","body":"ShowStartMenuTablet(playerid)"},"HideStartMenuTablet":{"prefix":"HideStartMenuTablet","body":"HideStartMenuTablet(playerid)"},"ShowPagForItems":{"prefix":"ShowPagForItems","body":"ShowPagForItems(playerid)"},"HidePagForItems":{"prefix":"HidePagForItems","body":"HidePagForItems(playerid)"},"ShowEscritorioForPlayer":{"prefix":"ShowEscritorioForPlayer","body":"ShowEscritorioForPlayer(playerid)"},"HideEscritorioForPlayer":{"prefix":"HideEscritorioForPlayer","body":"HideEscritorioForPlayer(playerid)"},"ShowPhotosForPlayer":{"prefix":"ShowPhotosForPlayer","body":"ShowPhotosForPlayer(playerid)"},"HidePhotosForPlayer":{"prefix":"HidePhotosForPlayer","body":"HidePhotosForPlayer(playerid)"},"ShowClockForPlayer":{"prefix":"ShowClockForPlayer","body":"ShowClockForPlayer(playerid)"},"HideClockForPlayer":{"prefix":"HideClockForPlayer","body":"HideClockForPlayer(playerid)"},"ShowTabletMusicPlayer":{"prefix":"ShowTabletMusicPlayer","body":"ShowTabletMusicPlayer(playerid)"},"HideTabletMusicPlayer":{"prefix":"HideTabletMusicPlayer","body":"HideTabletMusicPlayer(playerid)"},"CameraMode":{"prefix":"CameraMode","body":"CameraMode(playerid,type)"},"ShowTabletMap":{"prefix":"ShowTabletMap","body":"ShowTabletMap(playerid)"},"HideTabletMap":{"prefix":"HideTabletMap","body":"HideTabletMap(playerid)"},"ShowGames":{"prefix":"ShowGames","body":"ShowGames(playerid)"},"HideGames":{"prefix":"HideGames","body":"HideGames(playerid)"},"ShowSlotMachine":{"prefix":"ShowSlotMachine","body":"ShowSlotMachine(playerid)"},"HideSlotMachine":{"prefix":"HideSlotMachine","body":"HideSlotMachine(playerid)"},"ShowTabletWeather":{"prefix":"ShowTabletWeather","body":"ShowTabletWeather(playerid)"},"HideTabletWeather":{"prefix":"HideTabletWeather","body":"HideTabletWeather(playerid)"},"ShowPage":{"prefix":"ShowPage","body":"ShowPage(playerid,page)"},"IsNumeric":{"prefix":"IsNumeric","body":"IsNumeric(const string[])"},"tablet_cmd":{"prefix":"tablet_cmd","body":"tablet_cmd(playerid)"},"taser_cmd":{"prefix":"taser_cmd","body":"taser_cmd(playerid)"},"GetPlayerTPAuth":{"prefix":"GetPlayerTPAuth","body":"GetPlayerTPAuth(playerid)"},"SetPlayerTPAuth":{"prefix":"SetPlayerTPAuth","body":"SetPlayerTPAuth(playerid, bool:status)"},"accept_ttt_cmd":{"prefix":"accept_ttt_cmd","body":"accept_ttt_cmd(playerid)"},"starttictac":{"prefix":"starttictac","body":"starttictac(pplayer1,pplayer2)"},"tickbox":{"prefix":"tickbox","body":"tickbox(playerid,boxid)"},"CreateTicTD":{"prefix":"CreateTicTD","body":"CreateTicTD(playerid)"},"cmd_tictacktoe":{"prefix":"cmd_tictacktoe","body":"cmd_tictacktoe(playerid)"},"CreateHPTL":{"prefix":"CreateHPTL","body":"CreateHPTL()"},"HideHPTL":{"prefix":"HideHPTL","body":"HideHPTL(playerid)"},"ShowHPTL":{"prefix":"ShowHPTL","body":"ShowHPTL(playerid)"},"DestroyHPTL":{"prefix":"DestroyHPTL","body":"DestroyHPTL()"},"uTranslate":{"prefix":"uTranslate","body":"uTranslate(const string[], const lang[])"},"eTranslate":{"prefix":"eTranslate","body":"eTranslate(const string[], const lang[])"},"GetPlayerNativeLang":{"prefix":"GetPlayerNativeLang","body":"GetPlayerNativeLang(playerid)"},"SetPlayerNativeLang":{"prefix":"SetPlayerNativeLang","body":"SetPlayerNativeLang(playerid, lang)"},"EnableIncomingTranslation":{"prefix":"EnableIncomingTranslation","body":"EnableIncomingTranslation(playerid, const lang[])"},"DisableIncomingTranslation":{"prefix":"DisableIncomingTranslation","body":"DisableIncomingTranslation(playerid)"},"GetPlayerInTranslationStatus":{"prefix":"GetPlayerInTranslationStatus","body":"bool:GetPlayerInTranslationStatus(playerid)"},"GetPlayerInTranslationLang":{"prefix":"GetPlayerInTranslationLang","body":"GetPlayerInTranslationLang(playerid)"},"EnableOutgoingTranslation":{"prefix":"EnableOutgoingTranslation","body":"EnableOutgoingTranslation(playerid, const lang[])"},"DisableOutgoingTranslation":{"prefix":"DisableOutgoingTranslation","body":"DisableOutgoingTranslation(playerid)"},"GetPlayerOutTranslationStatus":{"prefix":"GetPlayerOutTranslationStatus","body":"bool:GetPlayerOutTranslationStatus(playerid)"},"GetPlayerTranslationOMStatus":{"prefix":"GetPlayerTranslationOMStatus","body":"bool:GetPlayerTranslationOMStatus(playerid)"},"SetPlayerTranslationOMStatus":{"prefix":"SetPlayerTranslationOMStatus","body":"SetPlayerTranslationOMStatus(playerid, bool:status)"},"GetPlayerOutTranslationLang":{"prefix":"GetPlayerOutTranslationLang","body":"GetPlayerOutTranslationLang(playerid)"},"Lang_Data":{"prefix":"Lang_Data","body":"Lang_Data()"},"ult_panel":{"prefix":"ult_panel","body":"ult_panel(playerid)"},"CreateVSAS":{"prefix":"CreateVSAS","body":"CreateVSAS(playerid)"},"HideVSAS":{"prefix":"HideVSAS","body":"HideVSAS(playerid)"},"ShowVSAS":{"prefix":"ShowVSAS","body":"ShowVSAS(playerid)"},"DestroyVSAS":{"prefix":"DestroyVSAS","body":"DestroyVSAS(playerid)"},"vm_cmd":{"prefix":"vm_cmd","body":"vm_cmd(playerid)"},"vunlock_cmd":{"prefix":"vunlock_cmd","body":"vunlock_cmd(playerid, vehicleid)"},"switch_engine":{"prefix":"switch_engine","body":"switch_engine(playerid)"},"switch_alarm":{"prefix":"switch_alarm","body":"switch_alarm(playerid)"},"switch_doors":{"prefix":"switch_doors","body":"switch_doors(playerid)"},"switch_bonnet":{"prefix":"switch_bonnet","body":"switch_bonnet(playerid)"},"switch_boot":{"prefix":"switch_boot","body":"switch_boot(playerid)"},"switch_windows":{"prefix":"switch_windows","body":"switch_windows(playerid)"},"switch_lights":{"prefix":"switch_lights","body":"switch_lights(playerid)"},"SaveVehicleMod":{"prefix":"SaveVehicleMod","body":"SaveVehicleMod(xid)"},"LoadVehicleMod":{"prefix":"LoadVehicleMod","body":"LoadVehicleMod(xid)"},"LoadxVehicleKeys":{"prefix":"LoadxVehicleKeys","body":"LoadxVehicleKeys(playerid)"},"GetVehiclexID":{"prefix":"GetVehiclexID","body":"GetVehiclexID(vehicleid)"},"GetVehiclexIDFromPlate":{"prefix":"GetVehiclexIDFromPlate","body":"GetVehiclexIDFromPlate(const plate[])"},"CreatePlate":{"prefix":"CreatePlate","body":"CreatePlate()"},"IsVehicleFlipped":{"prefix":"IsVehicleFlipped","body":"IsVehicleFlipped(vehicleid)"},"GetPlayerxVehicleCount":{"prefix":"GetPlayerxVehicleCount","body":"GetPlayerxVehicleCount(playerid)"},"GetPlayerInGarageVehicleCount":{"prefix":"GetPlayerInGarageVehicleCount","body":"GetPlayerInGarageVehicleCount(playerid)"},"GetVehicleModelIDFromName":{"prefix":"GetVehicleModelIDFromName","body":"GetVehicleModelIDFromName(const vname[])"},"GetPlayerIDFromName":{"prefix":"GetPlayerIDFromName","body":"GetPlayerIDFromName(const name[])"},"xStrcmp":{"prefix":"xStrcmp","body":"xStrcmp(const str1[], const str2[])"},"split":{"prefix":"split","body":"split(const src[], dest[][], const delimiter)"},"Isim":{"prefix":"Isim","body":"Isim(playerid)"},"park_cmd":{"prefix":"park_cmd","body":"park_cmd(playerid)"},"vmenu_cmd":{"prefix":"vmenu_cmd","body":"vmenu_cmd(playerid)"},"dealership_admin_panel":{"prefix":"dealership_admin_panel","body":"dealership_admin_panel(playerid)"},"SetPlayerWalkingStyle":{"prefix":"SetPlayerWalkingStyle","body":"SetPlayerWalkingStyle(playerid, style)"},"GetPlayerWalkingStyle":{"prefix":"GetPlayerWalkingStyle","body":"GetPlayerWalkingStyle(playerid)"},"player_styles_cmd":{"prefix":"player_styles_cmd","body":"player_styles_cmd(playerid)"},"IsPlayerInJail":{"prefix":"IsPlayerInJail","body":"IsPlayerInJail(playerid)"},"SetPlayerJailStatus":{"prefix":"SetPlayerJailStatus","body":"SetPlayerJailStatus(playerid, bool:status)"},"UpdatePlayerJailData":{"prefix":"UpdatePlayerJailData","body":"UpdatePlayerJailData(playerid)"},"GivePlayerWantedLevel":{"prefix":"GivePlayerWantedLevel","body":"GivePlayerWantedLevel(playerid, const reason[])"},"ResetPlayerWantedLevel":{"prefix":"ResetPlayerWantedLevel","body":"ResetPlayerWantedLevel(playerid)"},"GetPlayerTotalWantedLevel":{"prefix":"GetPlayerTotalWantedLevel","body":"GetPlayerTotalWantedLevel(playerid)"},"GetPlayerWantedLevelStar":{"prefix":"GetPlayerWantedLevelStar","body":"GetPlayerWantedLevelStar(playerid)"},"GetTotalWantedPlayers":{"prefix":"GetTotalWantedPlayers","body":"GetTotalWantedPlayers()"},"AdminJail":{"prefix":"AdminJail","body":"AdminJail(playerid, stars, const Reason[])"},"SendPlayerInJail":{"prefix":"SendPlayerInJail","body":"SendPlayerInJail(playerid)"},"SendPlayerToLSPD":{"prefix":"SendPlayerToLSPD","body":"SendPlayerToLSPD(playerid)"},"wantedlist_cmd":{"prefix":"wantedlist_cmd","body":"wantedlist_cmd(playerid)"},"View_Wanted_Database":{"prefix":"View_Wanted_Database","body":"View_Wanted_Database(playerid, targetid, total_crime = 0, paged = 0)"},"JailPlayer":{"prefix":"JailPlayer","body":"JailPlayer(playerid)"},"UnJailPlayer":{"prefix":"UnJailPlayer","body":"UnJailPlayer(playerid)"},"GetPlayerACPStatus":{"prefix":"GetPlayerACPStatus","body":"GetPlayerACPStatus(playerid)"},"SetPlayerACPStatus":{"prefix":"SetPlayerACPStatus","body":"SetPlayerACPStatus(playerid, bool:status)"},"admin_command_menu":{"prefix":"admin_command_menu","body":"admin_command_menu(playerid)"},"admin_command_panel":{"prefix":"admin_command_panel","body":"admin_command_panel(playerid)"},"acp_player_manage":{"prefix":"acp_player_manage","body":"acp_player_manage(playerid, extraid)"},"clean_screen":{"prefix":"clean_screen","body":"clean_screen(playerid)"},"fix_screen":{"prefix":"fix_screen","body":"fix_screen(playerid)"},"IntToHex":{"prefix":"IntToHex","body":"IntToHex(n)"},"IsIpConnected":{"prefix":"IsIpConnected","body":"IsIpConnected(playerid)"},"IsIpOfNoneAdminConnected":{"prefix":"IsIpOfNoneAdminConnected","body":"IsIpOfNoneAdminConnected(playerid)"},"GetPlayerNameEx":{"prefix":"GetPlayerNameEx","body":"GetPlayerNameEx(playerid)"},"GetPlayerIpEx":{"prefix":"GetPlayerIpEx","body":"GetPlayerIpEx(playerid)"},"convertNumber":{"prefix":"convertNumber","body":"convertNumber(value)"},"GetVehicleSpeedEx":{"prefix":"GetVehicleSpeedEx","body":"GetVehicleSpeedEx(playerid)"},"IsArrayContainNumber":{"prefix":"IsArrayContainNumber","body":"bool:IsArrayContainNumber(const array[], number, size = sizeof array)"},"RandomNumberFromArray":{"prefix":"RandomNumberFromArray","body":"RandomNumberFromArray(const array[], size = sizeof array)"},"GetWeaponNameEx":{"prefix":"GetWeaponNameEx","body":"GetWeaponNameEx(weaponid)"},"GetNextWordFromString":{"prefix":"GetNextWordFromString","body":"GetNextWordFromString(const string[], const word[], pos = 0)"},"GetOnlinePlayerCount":{"prefix":"GetOnlinePlayerCount","body":"GetOnlinePlayerCount()"},"IsPlayerInArea":{"prefix":"IsPlayerInArea","body":"bool:IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)"},"IsXYInArea":{"prefix":"IsXYInArea","body":"bool:IsXYInArea(Float:x, Float:y, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)"},"frandom":{"prefix":"frandom","body":"Float:frandom(Float:min, Float:max, dp = 2)"},"GetRandomPosAtLocation":{"prefix":"GetRandomPosAtLocation","body":"GetRandomPosAtLocation(Float:distance, Float:X, Float:Y, Float:Z, &Float:x, &Float:y, &Float:z)"},"GetRandomPosInArea":{"prefix":"GetRandomPosInArea","body":"GetRandomPosInArea(Float:MinX, Float:MinY, Float:MaxX, Float:MaxY, &Float:x, &Float:y)"},"GetAngleBetweenPoints":{"prefix":"GetAngleBetweenPoints","body":"Float:GetAngleBetweenPoints(Float:x, Float:y, Float:X, Float:Y)"},"RebootServer":{"prefix":"RebootServer","body":"RebootServer()"},"GetPlayerGender":{"prefix":"GetPlayerGender","body":"GetPlayerGender(playerid)"},"IsPlayerHaveAadhaarCard":{"prefix":"IsPlayerHaveAadhaarCard","body":"IsPlayerHaveAadhaarCard(playerid)"},"GetPlayerDateOfBirth":{"prefix":"GetPlayerDateOfBirth","body":"GetPlayerDateOfBirth(playerid)"},"GetPlayerAadhaarNumber":{"prefix":"GetPlayerAadhaarNumber","body":"GetPlayerAadhaarNumber(playerid)"},"GetPlayerFathersName":{"prefix":"GetPlayerFathersName","body":"GetPlayerFathersName(playerid)"},"GetPlayerMothersName":{"prefix":"GetPlayerMothersName","body":"GetPlayerMothersName(playerid)"},"GetPlayerResidenceAddress":{"prefix":"GetPlayerResidenceAddress","body":"GetPlayerResidenceAddress(playerid)"},"ShowAadhaarCard":{"prefix":"ShowAadhaarCard","body":"ShowAadhaarCard(playerid, targetid)"},"ShowFactionIdCard":{"prefix":"ShowFactionIdCard","body":"ShowFactionIdCard(playerid, targetid)"},"IsValidFactionID":{"prefix":"IsValidFactionID","body":"IsValidFactionID(factionid)"},"GetPlayerHouseID":{"prefix":"GetPlayerHouseID","body":"GetPlayerHouseID(playerid)"},"IsHouseIdValid":{"prefix":"IsHouseIdValid","body":"IsHouseIdValid(houseid)"},"GetHouseOwnerName":{"prefix":"GetHouseOwnerName","body":"GetHouseOwnerName(houseid)"},"IsPlayerMale":{"prefix":"IsPlayerMale","body":"IsPlayerMale(playerid)"},"GetPlayerNearestVehicle":{"prefix":"GetPlayerNearestVehicle","body":"GetPlayerNearestVehicle(playerid)"},"OnVehicleEngineStart":{"prefix":"OnVehicleEngineStart","body":"OnVehicleEngineStart(vehicleid)"},"OnVehicleEngineStop":{"prefix":"OnVehicleEngineStop","body":"OnVehicleEngineStop(vehicleid)"},"GetNativeText":{"prefix":"GetNativeText","body":"GetNativeText(playerid,\nconst LANGUAGE_ENGLISH_Message[],\nconst LANGUAGE_RUSSIAN_Message[] = \"\",\nconst LANGUAGE_CZECH_Message[] = \"\",\nconst LANGUAGE_FRENCH_Message[] = \"\",\nconst LANGUAGE_SERBIAN_Message[] = \"\",\nconst LANGUAGE_ITALIAN_Message[] = \"\",\nconst LANGUAGE_HINDI_Message[] = \"\",\nconst LANGUAGE_PORTUGUESE_Message[] = \"\",\nconst LANGUAGE_TURKISH_Message[] = \"\",\nconst LANGUAGE_SLOVAK_Message[] = \"\",\nconst LANGUAGE_FILIPINO_Message[] = \"\",\nconst LANGUAGE_BOSNIAN_Message[] = \"\",\nconst LANGUAGE_UKRAINIAN_Message[] = \"\",\nconst LANGUAGE_SPANISH_Message[] = \"\"\n)"},"Alexa":{"prefix":"Alexa","body":"Alexa(playerid, const query[], const response[], size = sizeof response)","description":"IORP Native"},"Math":{"prefix":"Math","body":"Math(const query[], const response[], size = sizeof response)","description":"IORP Native"},"IsStringContainWords":{"prefix":"IsStringContainWords","body":"IsStringContainWords(const string[], const words[])","description":"IORP Native"},"Google":{"prefix":"Google","body":"Google(const query[], const response[], size = sizeof response)","description":"IORP Native"},"SortString":{"prefix":"SortString","body":"SortString(const input[], const response[], size = sizeof response)","description":"IORP Native"},"GetWord":{"prefix":"GetWord","body":"GetWord(const string[], position = 0, const response[], size = sizeof response)","description":"IORP Native"},"GetSubString":{"prefix":"GetSubString","body":"GetSubString(const string[], const word[], const response[], size = sizeof response)","description":"IORP Native"},"Translate":{"prefix":"Translate","body":"Translate(const input[], const lang_code[], const Output[], size)","description":"IORP Native"},"hook":{"prefix":"hook","body":"#include <YSI_Coding\\y_hooks>\nhook","description":"IORP Hook"},"cmd":{"prefix":"cmd","body":"cmd:function(playerid, const params[]) {\n\treturn 1;\n}","description":"IORP CMD"},"CreateDynamicMine":{"prefix":"CreateDynamicMine","body":"CreateDynamicMine(type, Float:detection_range, Float:explode_radius, Float:health, respawntime, Float:x, Float:y, Float:z, worldid, interiorid, playerid, Float:streamdistance, mine_object = MINE_OBJECT_STANDARD, teamid = ANY_TEAM, detect_type = MINE_DETECT_TYPE_ALL, byplayerid = INVALID_PLAYER_ID, Float:damage = -1.0, Float:vehicle_damage = -1.0)"},"CreateDynamicMineEx":{"prefix":"CreateDynamicMineEx","body":"CreateDynamicMineEx(objectid, type, Float:detection_range, Float:explode_radius, Float:health, respawntime, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid, interiorid, playerid, Float:streamdistance, teamid = ANY_TEAM, detect_type = MINE_DETECT_TYPE_ALL, byplayerid = INVALID_PLAYER_ID, Float:damage = -1.0, Float:vehicle_damage = -1.0)"},"DestroyDynamicMine":{"prefix":"DestroyDynamicMine","body":"DestroyDynamicMine(mobid)"},"GetMineExplodeVisibility":{"prefix":"GetMineExplodeVisibility","body":"Float:GetMineExplodeVisibility()"},"SetMineExplodeVisibility":{"prefix":"SetMineExplodeVisibility","body":"SetMineExplodeVisibility(Float:explode_stream)"},"ForceRespawnDynamicMine":{"prefix":"ForceRespawnDynamicMine","body":"ForceRespawnDynamicMine(mobid)"},"CountDynamicMines":{"prefix":"CountDynamicMines","body":"CountDynamicMines()"},"GetMineObjectID":{"prefix":"GetMineObjectID","body":"GetMineObjectID(mobid)"},"GetMineAreaID":{"prefix":"GetMineAreaID","body":"GetMineAreaID(mobid)"},"GetDynamicMinePos":{"prefix":"GetDynamicMinePos","body":"GetDynamicMinePos(mobid, & Float:x, & Float:y, & Float:z)"},"SetDynamicMinePos":{"prefix":"SetDynamicMinePos","body":"SetDynamicMinePos(mobid, Float:x, Float:y, Float:z)"},"GetDynamicMineRot":{"prefix":"GetDynamicMineRot","body":"GetDynamicMineRot(mobid, & Float:rx, & Float:ry, & Float:rz)"},"SetDynamicMineRot":{"prefix":"SetDynamicMineRot","body":"SetDynamicMineRot(mobid, Float:rx, Float:ry, Float:rz)"},"GetDynamicMineDetectionRange":{"prefix":"GetDynamicMineDetectionRange","body":"GetDynamicMineDetectionRange(mobid, & Float:detection_range)"},"SetDynamicMineDetectionRange":{"prefix":"SetDynamicMineDetectionRange","body":"SetDynamicMineDetectionRange(mobid, Float:detection_range)"},"GetDynamicMineExplodeRadius":{"prefix":"GetDynamicMineExplodeRadius","body":"GetDynamicMineExplodeRadius(mobid, & Float:explode_radius)"},"SetDynamicMineExplodeRadius":{"prefix":"SetDynamicMineExplodeRadius","body":"SetDynamicMineExplodeRadius(mobid, Float:explode_radius)"},"GetDynamicMineHealth":{"prefix":"GetDynamicMineHealth","body":"GetDynamicMineHealth(mobid, & Float:health)"},"SetDynamicMineHealth":{"prefix":"SetDynamicMineHealth","body":"SetDynamicMineHealth(mobid, Float:health)"},"GetDynamicMineMaxHealth":{"prefix":"GetDynamicMineMaxHealth","body":"GetDynamicMineMaxHealth(mobid, & Float:health)"},"SetDynamicMineMaxHealth":{"prefix":"SetDynamicMineMaxHealth","body":"SetDynamicMineMaxHealth(mobid, Float:health)"},"GetDynamicMineVW":{"prefix":"GetDynamicMineVW","body":"GetDynamicMineVW(mobid)"},"SetDynamicMineVW":{"prefix":"SetDynamicMineVW","body":"SetDynamicMineVW(mobid, worldid)"},"GetDynamicMineINT":{"prefix":"GetDynamicMineINT","body":"GetDynamicMineINT(mobid)"},"SetDynamicMineINT":{"prefix":"SetDynamicMineINT","body":"SetDynamicMineINT(mobid, interiorid)"},"GetDynamicMineSD":{"prefix":"GetDynamicMineSD","body":"GetDynamicMineSD(mobid, & Float:streamdistance)"},"SetDynamicMineSD":{"prefix":"SetDynamicMineSD","body":"SetDynamicMineSD(mobid, Float:streamdistance)"},"GetDynamicMineTeam":{"prefix":"GetDynamicMineTeam","body":"GetDynamicMineTeam(mobid)"},"SetDynamicMineTeam":{"prefix":"SetDynamicMineTeam","body":"SetDynamicMineTeam(mobid, teamid)"},"GetDynamicMineType":{"prefix":"GetDynamicMineType","body":"GetDynamicMineType(mobid)"},"SetDynamicMineType":{"prefix":"SetDynamicMineType","body":"SetDynamicMineType(mobid, type)"},"GetDynamicMineRespawntime":{"prefix":"GetDynamicMineRespawntime","body":"GetDynamicMineRespawntime(mobid)"},"SetDynamicMineRespawntime":{"prefix":"SetDynamicMineRespawntime","body":"SetDynamicMineRespawntime(mobid, respawntime)"},"GetDynamicMineDamage":{"prefix":"GetDynamicMineDamage","body":"Float:GetDynamicMineDamage(mobid)"},"SetDynamicMineDamage":{"prefix":"SetDynamicMineDamage","body":"SetDynamicMineDamage(mobid, Float:damage)"},"GetDynamicMineVehicleDamage":{"prefix":"GetDynamicMineVehicleDamage","body":"Float:GetDynamicMineVehicleDamage(mobid)"},"SetDynamicMineVehicleDamage":{"prefix":"SetDynamicMineVehicleDamage","body":"SetDynamicMineVehicleDamage(mobid, Float:damage)"},"Mine_Update":{"prefix":"Mine_Update","body":"Mine_Update(variable)"},"OnMineDestroy":{"prefix":"OnMineDestroy","body":"OnMineDestroy(mobid, Float:x, Float:y, Float:z, type, killerid, Float:radius, damagerid)"},"MissileLaunch":{"prefix":"MissileLaunch","body":"MissileLaunch(type, Float:detection_range, Float:explode_radius, Float:speed, Float:x, Float:y, Float:z, worldid, interiorid, playerid, Float:streamdistance, missile_object, Float:tx, Float:ty, Float:tz, byplayerid = INVALID_PLAYER_ID, teamid = ANY_TEAM, bool:remote = false, remote_count = MAX_MISSILE_REMOTE_TARGET, remote_height = 1.0, Float:arc_roll = 0.0, Float:damage = -1.0, Float:vehicle_damage = -1.0)"},"MissileLaunchAimPlayer":{"prefix":"MissileLaunchAimPlayer","body":"MissileLaunchAimPlayer(targetid, type, Float:detection_range, Float:explode_radius, Float:speed, Float:x, Float:y, Float:z, worldid, interiorid, playerid, Float:streamdistance, missile_object, Float:tx, Float:ty, Float:tz, byplayerid = INVALID_PLAYER_ID, teamid = ANY_TEAM, Float:damage = -1.0, Float:vehicle_damage = -1.0)"},"bool":{"prefix":"bool","body":"bool:MissileStopAimPlayer(mobid)"},"MissileDestroy":{"prefix":"MissileDestroy","body":"MissileDestroy(mobid, type, playerid)"},"MissileRemoteTarget":{"prefix":"MissileRemoteTarget","body":"MissileRemoteTarget(mobid, Float:tx, Float:ty, Float:tz, Float:speed = 0.0)"},"GetMissileExplodeVisibility":{"prefix":"GetMissileExplodeVisibility","body":"Float:GetMissileExplodeVisibility()"},"SetMissileExplodeVisibility":{"prefix":"SetMissileExplodeVisibility","body":"SetMissileExplodeVisibility(Float:explode_stream)"},"DisableAllPlayerMissileAim":{"prefix":"DisableAllPlayerMissileAim","body":"DisableAllPlayerMissileAim(playerid)"},"OnMissileDestroy":{"prefix":"OnMissileDestroy","body":"OnMissileDestroy(mobid, Float:x, Float:y, Float:z, type, killerid, byplayerid)"},"OnMissileDetectPlayer":{"prefix":"OnMissileDetectPlayer","body":"OnMissileDetectPlayer(playerid, killerid)"},"OnMissileRequestLaunch":{"prefix":"OnMissileRequestLaunch","body":"OnMissileRequestLaunch(Float:x, Float:y, Float:z, playerid, targetid)"},"BODY_PART_TORSO":{"prefix":"BODY_PART_TORSO","description":"The torso body part macro with the id 3.","body":"BODY_PART_TORSO"},"BODY_PART_GROIN":{"prefix":"BODY_PART_GROIN","description":"The groin body part macro with the id 4.","body":"BODY_PART_GROIN"},"BODY_PART_LEFT_ARM":{"prefix":"BODY_PART_LEFT_ARM","description":"The left arm body part macro with the id 5.","body":"BODY_PART_LEFT_ARM"},"BODY_PART_RIGHT_ARM":{"prefix":"BODY_PART_RIGHT_ARM","description":"The right arm body part macro with the id 6.","body":"BODY_PART_RIGHT_ARM"},"BODY_PART_LEFT_LEG":{"prefix":"BODY_PART_LEFT_LEG","description":"The left leg body part macro with the id 7.","body":"BODY_PART_LEFT_LEG"},"BODY_PART_RIGHT_LEG":{"prefix":"BODY_PART_RIGHT_LEG","description":"The left leg body part macro with the id 8.","body":"BODY_PART_RIGHT_LEG"},"BODY_PART_HEAD":{"prefix":"BODY_PART_HEAD","description":"The head body part macro with the id 9.","body":"BODY_PART_HEAD"},"MAX_PLAYER_NAME":{"prefix":"MAX_PLAYER_NAME","description":"A value which defines the maximum length of a player's name, 24 characters by default.","body":"MAX_PLAYER_NAME"},"MAX_PLAYERS":{"prefix":"MAX_PLAYERS","description":"A value which defines the number of players that can join the server. It is separate from the 'maxplayers' server variable.","body":"MAX_PLAYERS"},"MAX_VEHICLES":{"prefix":"MAX_VEHICLES","description":"A value which defines the maximum number of vehicles and equals 2000.","body":"MAX_VEHICLES"},"MAX_ACTORS":{"prefix":"MAX_ACTORS","description":"A value which defines the maximum number of actors and equals 1000.","body":"MAX_ACTORS"},"INVALID_PLAYER_ID":{"prefix":"INVALID_PLAYER_ID","description":"A value which defines an invalid player's id and equals 0xFFFF.","body":"INVALID_PLAYER_ID"},"INVALID_VEHICLE_ID":{"prefix":"INVALID_VEHICLE_ID","description":"A value which defines an invalid vehicle's id and equals 0xFFFF.","body":"INVALID_VEHICLE_ID"},"INVALID_ACTOR_ID":{"prefix":"INVALID_ACTOR_ID","description":"A value which defines an invalid actor's id and equals 0xFFFF.","body":"INVALID_ACTOR_ID"},"NO_TEAM":{"prefix":"NO_TEAM","description":"A value used to tag players as not beloning to any team and equals 255.","body":"NO_TEAM"},"MAX_OBJECTS":{"prefix":"MAX_OBJECTS","description":"A value which defines the maximum number of objects and equals 1000.","body":"MAX_OBJECTS"},"INVALID_OBJECT_ID":{"prefix":"INVALID_OBJECT_ID","description":"A value which defines an invalid object's id and equals 0xFFFF.","body":"INVALID_OBJECT_ID"},"MAX_GANG_ZONES":{"prefix":"MAX_GANG_ZONES","description":"A value which defines the maximum number of gang zones and equals 1024.","body":"MAX_GANG_ZONES"},"MAX_TEXT_DRAWS":{"prefix":"MAX_TEXT_DRAWS","body":"MAX_TEXT_DRAWS"},"MAX_PLAYER_TEXT_DRAWS":{"prefix":"MAX_PLAYER_TEXT_DRAWS","description":"A value which defines the maximum number of textdraws and equals 2048.","body":"MAX_PLAYER_TEXT_DRAWS"},"MAX_MENUS":{"prefix":"MAX_MENUS","description":"A value which defines the maximum number of menus and equals 128.","body":"MAX_MENUS"},"MAX_3DTEXT_GLOBAL":{"prefix":"MAX_3DTEXT_GLOBAL","description":"A value which defines the maximum number of global 3D text labels and equals 1024.","body":"MAX_3DTEXT_GLOBAL"},"MAX_3DTEXT_PLAYER":{"prefix":"MAX_3DTEXT_PLAYER","description":"A value which defines the maximum number of player 3D text labels and equals 1024.","body":"MAX_3DTEXT_PLAYER"},"MAX_PICKUPS":{"prefix":"MAX_PICKUPS","description":"A value which defines the maximum number of pickups and equals 4096.","body":"MAX_PICKUPS"},"INVALID_MENU":{"prefix":"INVALID_MENU","description":"A value which defines an invalid menu's id and equals 0xFF.","body":"INVALID_MENU"},"INVALID_TEXT_DRAW":{"prefix":"INVALID_TEXT_DRAW","description":"A value which defines an invalid textdraw's id and equals 0xFFFF.","body":"INVALID_TEXT_DRAW"},"INVALID_GANG_ZONE":{"prefix":"INVALID_GANG_ZONE","description":"A value which defines an invalid gang zone's id and equals -1.","body":"INVALID_GANG_ZONE"},"INVALID_3DTEXT_ID":{"prefix":"INVALID_3DTEXT_ID","description":"A value which defines an invalid 3D text label's id and equals 0xFFFF.","body":"INVALID_3DTEXT_ID"},"PLAYER_STATE_ONFOOT":{"prefix":"PLAYER_STATE_ONFOOT","description":"A value which defines the player' state when being on foot, it has the id 1.","body":"PLAYER_STATE_ONFOOT"},"PLAYER_STATE_NONE":{"prefix":"PLAYER_STATE_NONE","description":"A value which defines the player' state when being initialized, it has the id 0.","body":"PLAYER_STATE_NONE"},"PLAYER_STATE_DRIVER":{"prefix":"PLAYER_STATE_DRIVER","description":"A value which defines the player' state when driving a vehicle, it has the id 2.","body":"PLAYER_STATE_DRIVER"},"PLAYER_STATE_PASSENGER":{"prefix":"PLAYER_STATE_PASSENGER","description":"A value which defines the player' state when being a passenger of a vehicle, it has the id 3.","body":"PLAYER_STATE_PASSENGER"},"PLAYER_STATE_EXIT_VEHICLE":{"prefix":"PLAYER_STATE_EXIT_VEHICLE","description":"A value which defines the player' state when exiting a vehicle, it has the id 4.","body":"PLAYER_STATE_EXIT_VEHICLE"},"PLAYER_STATE_ENTER_VEHICLE_DRIVER":{"prefix":"PLAYER_STATE_ENTER_VEHICLE_DRIVER","description":"A value which defines the player' state when entering a vehicle as a driver, it has the id 5.","body":"PLAYER_STATE_ENTER_VEHICLE_DRIVER"},"PLAYER_STATE_ENTER_VEHICLE_PASSENGER":{"prefix":"PLAYER_STATE_ENTER_VEHICLE_PASSENGER","description":"A value which defines the player' state when entering a vehicle as a passenger, it has the id 6.","body":"PLAYER_STATE_ENTER_VEHICLE_PASSENGER"},"PLAYER_STATE_WASTED":{"prefix":"PLAYER_STATE_WASTED","description":"A value which defines the player' state when dead or on class selection, it has the id 7.","body":"PLAYER_STATE_WASTED"},"PLAYER_STATE_SPAWNED":{"prefix":"PLAYER_STATE_SPAWNED","description":"A value which defines the player' state when spawned, it has the id 8.","body":"PLAYER_STATE_SPAWNED"},"PLAYER_STATE_SPECTATING":{"prefix":"PLAYER_STATE_SPECTATING","description":"A value which defines the player' state when spectating, it has the id 9.","body":"PLAYER_STATE_SPECTATING"},"PLAYER_MARKERS_MODE_OFF":{"prefix":"PLAYER_MARKERS_MODE_OFF","description":"A value which defines the state of the player's marker as being off, it has the id 0.","body":"PLAYER_MARKERS_MODE_OFF"},"PLAYER_MARKERS_MODE_GLOBAL":{"prefix":"PLAYER_MARKERS_MODE_GLOBAL","description":"A value which defines the state of the player's marker as being globaly visible, it has the id 1.","body":"PLAYER_MARKERS_MODE_GLOBAL"},"PLAYER_MARKERS_MODE_STREAMED":{"prefix":"PLAYER_MARKERS_MODE_STREAMED","description":"A value which defines the state of the player's marker as being visible for streamed players, it has the id 2.","body":"PLAYER_MARKERS_MODE_STREAMED"},"WEAPON_BRASSKNUCKLE":{"prefix":"WEAPON_BRASSKNUCKLE","description":"ID: 1\nName: Brass Knuckles\nSlot: 0\nModel: 331","body":"WEAPON_BRASSKNUCKLE"},"WEAPON_GOLFCLUB":{"prefix":"WEAPON_GOLFCLUB","description":"ID: 2\nName: Golf Club\nSlot: 1\nModel: 333","body":"WEAPON_GOLFCLUB"},"WEAPON_NITESTICK":{"prefix":"WEAPON_NITESTICK","description":"ID: 3\nName: Nightstick\nSlot: 1\nModel: 334","body":"WEAPON_NITESTICK"},"WEAPON_KNIFE":{"prefix":"WEAPON_KNIFE","description":"ID: 4\nName: Knife\nSlot: 1\nModel: 335","body":"WEAPON_KNIFE"},"WEAPON_BAT":{"prefix":"WEAPON_BAT","description":"ID: 5\nName: Baseball Bat\nSlot: 1\nModel: 336","body":"WEAPON_BAT"},"WEAPON_SHOVEL":{"prefix":"WEAPON_SHOVEL","description":"ID: 6\nName: Shovel\nSlot: 1\nModel: 337","body":"WEAPON_SHOVEL"},"WEAPON_POOLSTICK":{"prefix":"WEAPON_POOLSTICK","description":"ID: 7\nName: Pool Cue\nSlot: 1\nModel: 338","body":"WEAPON_POOLSTICK"},"WEAPON_KATANA":{"prefix":"WEAPON_KATANA","description":"ID: 8\nName: Kqtqnq\nSlot: 1\nModel: 339","body":"WEAPON_KATANA"},"WEAPON_CHAINSAW":{"prefix":"WEAPON_CHAINSAW","description":"ID: 9\nName: Chainsaw\nSlot: 1\nModel: 341","body":"WEAPON_CHAINSAW"},"WEAPON_DILDO":{"prefix":"WEAPON_DILDO","description":"ID: 10\nName: Purple Dildo\nSlot: 10\nModel: 321","body":"WEAPON_DILDO"},"WEAPON_DILDO2":{"prefix":"WEAPON_DILDO2","description":"ID: 11\nName: Dildo\nSlot: 10\nModel: 322","body":"WEAPON_DILDO2"},"WEAPON_VIBRATOR":{"prefix":"WEAPON_VIBRATOR","description":"ID: 12\nName: Vibrator\nSlot: 10\nModel: 323","body":"WEAPON_VIBRATOR"},"WEAPON_VIBRATOR2":{"prefix":"WEAPON_VIBRATOR2","description":"ID: 13\nName: Silver Vibrator\nSlot: 10\nModel: 324","body":"WEAPON_VIBRATOR2"},"WEAPON_FLOWER":{"prefix":"WEAPON_FLOWER","description":"ID: 14\nName: Flowers\nSlot: 10\nModel: 325","body":"WEAPON_FLOWER"},"WEAPON_CANE":{"prefix":"WEAPON_CANE","description":"ID: 15\nName: Cane\nSlot: 10\nModel: 326","body":"WEAPON_CANE"},"WEAPON_GRENADE":{"prefix":"WEAPON_GRENADE","description":"ID: 16\nName: Grenade\nSlot: 8\nModel: 342","body":"WEAPON_GRENADE"},"WEAPON_TEARGAS":{"prefix":"WEAPON_TEARGAS","description":"ID: 17\nName: Tear Gas\nSlot: 8\nModel: 343","body":"WEAPON_TEARGAS"},"WEAPON_MOLTOV":{"prefix":"WEAPON_MOLTOV","description":"ID: 18\nName: Molotov Cocktail\nSlot: 8\nModel: 344","body":"WEAPON_MOLTOV"},"WEAPON_COLT45":{"prefix":"WEAPON_COLT45","description":"ID: 22\nName: 9mm\nSlot: 2\nModel: 346","body":"WEAPON_COLT45"},"WEAPON_SILENCED":{"prefix":"WEAPON_SILENCED","description":"ID: 23\nName: Silenced 9mm\nSlot: 2\nModel: 347","body":"WEAPON_SILENCED"},"WEAPON_DEAGLE":{"prefix":"WEAPON_DEAGLE","description":"ID: 24\nName: Desert Eagle\nSlot: 2\nModel: 348","body":"WEAPON_DEAGLE"},"WEAPON_SHOTGUN":{"prefix":"WEAPON_SHOTGUN","description":"ID: 25\nName: Shotgun\nSlot: 3\nModel: 349","body":"WEAPON_SHOTGUN"},"WEAPON_SAWEDOFF":{"prefix":"WEAPON_SAWEDOFF","description":"ID: 26\nName: Swanoff Shotgun\nSlot: 3\nModel: 350","body":"WEAPON_SAWEDOFF"},"WEAPON_SHOTGSPA":{"prefix":"WEAPON_SHOTGSPA","description":"ID: 27\nName: Combat Shotgun\nSlot: 3\nModel: 351","body":"WEAPON_SHOTGSPA"},"WEAPON_UZI":{"prefix":"WEAPON_UZI","description":"ID: 28\nName: Micro SMG/Uzi\nSlot: 4\nModel: 352","body":"WEAPON_UZI"},"WEAPON_MP5":{"prefix":"WEAPON_MP5","description":"ID: 29\nName: MP5\nSlot: 4\nModel: 353","body":"WEAPON_MP5"},"WEAPON_AK47":{"prefix":"WEAPON_AK47","description":"ID: 30\nName: AK-47\nSlot: 5\nModel: 355","body":"WEAPON_AK47"},"WEAPON_M4":{"prefix":"WEAPON_M4","description":"ID: 31\nName: M4\nSlot: 5\nModel: 356","body":"WEAPON_M4"},"WEAPON_TEC9":{"prefix":"WEAPON_TEC9","description":"ID: 32\nName: Tec-9\nSlot: 4\nModel: 372","body":"WEAPON_TEC9"},"WEAPON_RIFLE":{"prefix":"WEAPON_RIFLE","description":"ID: 33\nName: Country Rifle\nSlot: 6\nModel: 357","body":"WEAPON_RIFLE"},"WEAPON_SNIPER":{"prefix":"WEAPON_SNIPER","description":"ID: 34\nName: Sniper Rifle\nSlot: 6\nModel: 358","body":"WEAPON_SNIPER"},"WEAPON_ROCKETLAUNCHER":{"prefix":"WEAPON_ROCKETLAUNCHER","description":"ID: 35\nName: RPG\nSlot: 7\nModel: 359","body":"WEAPON_ROCKETLAUNCHER"},"WEAPON_HEATSEEKER":{"prefix":"WEAPON_HEATSEEKER","description":"ID: 36\nName: HS Rocket\nSlot: 7\nModel: 360","body":"WEAPON_HEATSEEKER"},"WEAPON_FLAMETHROWER":{"prefix":"WEAPON_FLAMETHROWER","description":"ID: 37\nName: Flamethrower\nSlot: 7\nModel: 361","body":"WEAPON_FLAMETHROWER"},"WEAPON_MINIGUN":{"prefix":"WEAPON_MINIGUN","description":"ID: 38\nName: Minigun\nSlot: 7\nModel: 362","body":"WEAPON_MINIGUN"},"WEAPON_SATCHEL":{"prefix":"WEAPON_SATCHEL","description":"ID: 39\nName: Satchel Charge\nSlot: 8\nModel: 363","body":"WEAPON_SATCHEL"},"WEAPON_BOMB":{"prefix":"WEAPON_BOMB","description":"ID: 40\nName: Detonator\nSlot: 12\nModel: 364","body":"WEAPON_BOMB"},"WEAPON_SPRAYCAN":{"prefix":"WEAPON_SPRAYCAN","description":"ID: 41\nName: Spraycan\nSlot: 9\nModel: 365","body":"WEAPON_SPRAYCAN"},"WEAPON_FIREEXTINGUISHER":{"prefix":"WEAPON_FIREEXTINGUISHER","description":"ID: 42\nName: Fire Extinguisher\nSlot: 9\nModel: 366","body":"WEAPON_FIREEXTINGUISHER"},"WEAPON_CAMERA":{"prefix":"WEAPON_CAMERA","description":"ID: 43\nName: Camera\nSlot: 9\nModel: 367","body":"WEAPON_CAMERA"},"WEAPON_PARACHUTE":{"prefix":"WEAPON_PARACHUTE","description":"ID: 46\nName: Parachute\nSlot: 11\nModel: 371","body":"WEAPON_PARACHUTE"},"WEAPON_VEHICLE":{"prefix":"WEAPON_VEHICLE","description":"ID: 49\nName: Vehicle\nSlot: N/A\nModel: N/A\nNote: Only used as a death icon.","body":"WEAPON_VEHICLE"},"WEAPON_DROWN":{"prefix":"WEAPON_DROWN","description":"ID: 53\nName: Drowned\nSlot: N/A\nModel: N/A\nNote: Only used as a death icon.","body":"WEAPON_DROWN"},"WEAPON_COLLISION":{"prefix":"WEAPON_COLLISION","description":"ID: 54\nName: Splat\nSlot: N/A\nModel: N/A\nNote: Only used as a death icon.","body":"WEAPON_COLLISION"},"KEY_ACTION":{"prefix":" KEY_ACTION","description":"Value:  1\nCode (On Foot): ~k~~PED_ANSWER_PHONE~\nCode (In Vehicle):  ~k~~VEHICLE_FIREWEAPON_ALT~\nKey (On Foot):  TAB\nKey (In Vehicle):  ALT GR / LCTRL / NUM0","body":" KEY_ACTION"},"KEY_CROUCH":{"prefix":" KEY_CROUCH","description":"Value:  2\nCode (On Foot): ~k~~PED_DUCK~\nCode (In Vehicle):  ~k~~VEHICLE_HORN~\nKey (On Foot):  C\nKey (In Vehicle):  H / CAPSLOCK","body":" KEY_CROUCH"},"KEY_FIRE":{"prefix":" KEY_FIRE","description":"Value:  4\nCode (On Foot): ~k~~PED_FIREWEAPON~\nCode (In Vehicle):  ~k~~VEHICLE_FIREWEAPON~\nKey (On Foot):  LCTRL / LMB (Left Mouse Button)\nKey (In Vehicle):  LALT","body":" KEY_FIRE"},"KEY_SPRINT":{"prefix":" KEY_SPRINT","description":"Value:  8\nCode (On Foot): ~k~~PED_SPRINT~\nCode (In Vehicle):  ~k~~VEHICLE_ACCELERATE~\nKey (On Foot):  SPACE\nKey (In Vehicle):  W","body":" KEY_SPRINT"},"KEY_SECONDARY_ATTACK":{"prefix":" KEY_SECONDARY_ATTACK","description":"Value:  16\nCode (On Foot): ~k~~VEHICLE_ENTER_EXIT~\nCode (In Vehicle):  ~k~~VEHICLE_ENTER_EXIT~\nKey (On Foot):  ENTER\nKey (In Vehicle):  ENTER","body":" KEY_SECONDARY_ATTACK"},"KEY_JUMP":{"prefix":" KEY_JUMP","description":"Value:  32\nCode (On Foot): ~k~~PED_JUMPING~\nCode (In Vehicle):  ~k~~VEHICLE_BRAKE~\nKey (On Foot):  LSHIFT\nKey (In Vehicle):  S","body":" KEY_JUMP"},"KEY_LOOK_RIGHT":{"prefix":" KEY_LOOK_RIGHT","description":"Value:  64\nCode (On Foot): -\nCode (In Vehicle):  ~k~~VEHICLE_LOOKRIGHT~\nKey (On Foot):  -\nKey (In Vehicle):  E","body":" KEY_LOOK_RIGHT"},"KEY_HANDBRAKE/KEY_AIM(1)":{"prefix":" KEY_HANDBRAKE/KEY_AIM(1)","description":"Value:  128\nCode (On Foot): ~k~~PED_LOCK_TARGET~\nCode (In Vehicle):  ~k~~VEHICLE_HANDBRAKE~\nKey (On Foot):  RMB (Right Mouse Button)\nKey (In Vehicle):  SPACE","body":" KEY_HANDBRAKE/KEY_AIM(1)"},"KEY_LOOK_LEFT":{"prefix":" KEY_LOOK_LEFT","description":"Value:  256\nCode (On Foot): -\nCode (In Vehicle):  ~k~~VEHICLE_LOOKLEFT~\nKey (On Foot):  -\nKey (In Vehicle):  Q","body":" KEY_LOOK_LEFT"},"KEY_LOOK_BEHIND":{"prefix":" KEY_LOOK_BEHIND","description":"Value:  320(5)\nCode (On Foot): ~k~~PED_LOOKBEHIND~\nCode (In Vehicle):  ~k~~VEHICLE_LOOKBEHIND~\nKey (On Foot):  NUM1 / MMB (Middle Mouse Button - Click the mouse wheel)\nKey (In Vehicle):  2","body":" KEY_LOOK_BEHIND"},"KEY_SUBMISSION":{"prefix":" KEY_SUBMISSION","description":"Value:  512\nCode (On Foot): -\nCode (In Vehicle):  ~k~~TOGGLE_SUBMISSIONS~\nKey (On Foot):  NUM1 / MMB (Middle Mouse Button - Click the mouse wheel)\nKey (In Vehicle):  2 / NUMPAD +","body":" KEY_SUBMISSION"},"KEY_WALK":{"prefix":" KEY_WALK","description":"Value:  1024\nCode (On Foot): ~k~~SNEAK_ABOUT~\nCode (In Vehicle):  -\nKey (On Foot):  LALT\nKey (In Vehicle):  -","body":" KEY_WALK"},"KEY_ANALOG_UP":{"prefix":" KEY_ANALOG_UP","description":"Value:  2048\nCode (On Foot): -\nCode (In Vehicle):  ~k~~VEHICLE_TURRETUP~\nKey (On Foot):  NUM8(6)\nKey (In Vehicle):  NUM8","body":" KEY_ANALOG_UP"},"KEY_ANALOG_DOWN":{"prefix":" KEY_ANALOG_DOWN","description":"Value:  4096\nCode (On Foot): -\nCode (In Vehicle):  ~k~~VEHICLE_TURRETDOWN~\nKey (On Foot):  NUM2(6)\nKey (In Vehicle):  NUM2","body":" KEY_ANALOG_DOWN"},"KEY_ANALOG_LEFT":{"prefix":" KEY_ANALOG_LEFT","description":"Value:  8192\nCode (On Foot): ~k~~VEHICLE_LOOKLEFT~\nCode (In Vehicle):  ~k~~VEHICLE_TURRETLEFT~\nKey (On Foot):  NUM4\nKey (In Vehicle):  NUM4","body":" KEY_ANALOG_LEFT"},"KEY_ANALOG_RIGHT":{"prefix":" KEY_ANALOG_RIGHT","description":"Value:  16384\nCode (On Foot): ~k~~VEHICLE_LOOKRIGHT~\nCode (In Vehicle):  ~k~~VEHICLE_TURRETRIGHT~\nKey (On Foot):  NUM6\nKey (In Vehicle):  NUM6","body":" KEY_ANALOG_RIGHT"},"KEY_YES":{"prefix":" KEY_YES","description":"Value:  65536\nCode (On Foot): ~k~~CONVERSATION_YES~\nCode (In Vehicle):  ~k~~CONVERSATION_YES~\nKey (On Foot):  Y\nKey (In Vehicle):  Y","body":" KEY_YES"},"KEY_NO":{"prefix":" KEY_NO","description":"Value:  131072\nCode (On Foot): ~k~~CONVERSATION_NO~\nCode (In Vehicle):  ~k~~CONVERSATION_NO~\nKey (On Foot):  N\nKey (In Vehicle):  N","body":" KEY_NO"},"KEY_CTRL_BACK":{"prefix":" KEY_CTRL_BACK","description":"Value:  262144(4)\nCode (On Foot): ~k~~GROUP_CONTROL_BWD~\nCode (In Vehicle):  ~k~~GROUP_CONTROL_BWD~\nKey (On Foot):  H\nKey (In Vehicle):  H","body":" KEY_CTRL_BACK"},"KEY_UP":{"prefix":" KEY_UP","description":"Value:  -128\nCode (On Foot): ~k~~GO_FORWARD~\nCode (In Vehicle):  ~k~~VEHICLE_STEERUP~\nKey (On Foot):  UP\nKey (In Vehicle):  UP","body":" KEY_UP"},"KEY_DOWN":{"prefix":" KEY_DOWN","description":"Value:  128\nCode (On Foot): ~k~~GO_BACK~\nCode (In Vehicle):  ~k~~VEHICLE_STEERDOWN~\nKey (On Foot):  DOWN\nKey (In Vehicle):  DOWN","body":" KEY_DOWN"},"KEY_LEFT":{"prefix":" KEY_LEFT","description":"Value:  -128\nCode (On Foot): ~k~~GO_LEFT~\nCode (In Vehicle):  ~k~~VEHICLE_STEERLEFT~\nKey (On Foot):  LEFT\nKey (In Vehicle):  LEFT","body":" KEY_LEFT"},"KEY_RIGHT":{"prefix":" KEY_RIGHT","description":"Value:  128\nCode (On Foot): ~k~~GO_RIGHT~\nCode (In Vehicle):  ~k~~VEHICLE_STEERRIGHT~\nKey (On Foot):  RIGHT\nKey (In Vehicle):  RIGHT","body":" KEY_RIGHT"},"CLICK_SOURCE_SCOREBOARD":{"prefix":"CLICK_SOURCE_SCOREBOARD","description":"A value which defines the source of the player's click to be the score board (ID 0).","body":"CLICK_SOURCE_SCOREBOARD"},"EDIT_RESPONSE_CANCEL":{"prefix":"EDIT_RESPONSE_CANCEL","description":"A value which defines the object edition cancellation response type (ID 0).","body":"EDIT_RESPONSE_CANCEL"},"EDIT_RESPONSE_FINAL":{"prefix":"EDIT_RESPONSE_FINAL","description":"A value which defines the object edition save response type (ID 1).","body":"EDIT_RESPONSE_FINAL"},"EDIT_RESPONSE_UPDATE":{"prefix":"EDIT_RESPONSE_UPDATE","description":"A value which defines the object edition update response type (ID 2).","body":"EDIT_RESPONSE_UPDATE"},"SELECT_OBJECT_GLOBAL_OBJECT":{"prefix":"SELECT_OBJECT_GLOBAL_OBJECT","description":"A value which defines the object selection type to be of a global object.","body":"SELECT_OBJECT_GLOBAL_OBJECT"},"SELECT_OBJECT_PLAYER_OBJECT":{"prefix":"SELECT_OBJECT_PLAYER_OBJECT","description":"A value which defines the object selection type to be of a player object.","body":"SELECT_OBJECT_PLAYER_OBJECT"},"BULLET_HIT_TYPE_NONE":{"prefix":"BULLET_HIT_TYPE_NONE","description":"A value which defines the type of the target that was hit by the shot to be nothing (Used with OnPlayerWeaponShot), (ID 0).","body":"BULLET_HIT_TYPE_NONE"},"BULLET_HIT_TYPE_PLAYER":{"prefix":"BULLET_HIT_TYPE_PLAYER","description":"A value which defines the type of the target that was hit by the shot to be another player (Used with OnPlayerWeaponShot), (ID 1).","body":"BULLET_HIT_TYPE_PLAYER"},"BULLET_HIT_TYPE_VEHICLE":{"prefix":"BULLET_HIT_TYPE_VEHICLE","description":"A value which defines the type of the target that was hit by the shot to be a vehicle (Used with OnPlayerWeaponShot), (ID 2).","body":"BULLET_HIT_TYPE_VEHICLE"},"BULLET_HIT_TYPE_OBJECT":{"prefix":"BULLET_HIT_TYPE_OBJECT","description":"A value which defines the type of the target that was hit by the shot to be an object (Used with OnPlayerWeaponShot), (ID 3).","body":"BULLET_HIT_TYPE_OBJECT"},"BULLET_HIT_TYPE_PLAYER_OBJECT":{"prefix":"BULLET_HIT_TYPE_PLAYER_OBJECT","description":"A value which defines the type of the target that was hit by the shot to be a player object (Used with OnPlayerWeaponShot), (ID 4).","body":"BULLET_HIT_TYPE_PLAYER_OBJECT"},"DIALOG_STYLE_MSGBOX":{"prefix":"DIALOG_STYLE_MSGBOX","description":"Dialog Style.","body":"DIALOG_STYLE_MSGBOX"},"DIALOG_STYLE_INPUT":{"prefix":"DIALOG_STYLE_INPUT","description":"Dialog Style.","body":"DIALOG_STYLE_INPUT"},"DIALOG_STYLE_LIST":{"prefix":"DIALOG_STYLE_LIST","description":"Dialog Style.","body":"DIALOG_STYLE_LIST"},"DIALOG_STYLE_PASSWORD":{"prefix":"DIALOG_STYLE_PASSWORD","description":"Dialog Style.","body":"DIALOG_STYLE_PASSWORD"},"DIALOG_STYLE_TABLIST":{"prefix":"DIALOG_STYLE_TABLIST","description":"Dialog Style.","body":"DIALOG_STYLE_TABLIST"},"DIALOG_STYLE_TABLIST_HEADERS":{"prefix":"DIALOG_STYLE_TABLIST_HEADERS","description":"Dialog Style.","body":"DIALOG_STYLE_TABLIST_HEADERS"},"Streamer_GetTickRate":{"prefix":"Streamer_GetTickRate","body":"Streamer_GetTickRate()"},"Streamer_SetTickRate":{"prefix":"Streamer_SetTickRate","body":"Streamer_SetTickRate(rate)"},"Streamer_GetPlayerTickRate":{"prefix":"Streamer_GetPlayerTickRate","body":"Streamer_GetPlayerTickRate(playerid)"},"Streamer_SetPlayerTickRate":{"prefix":"Streamer_SetPlayerTickRate","body":"Streamer_SetPlayerTickRate(playerid, rate)"},"Streamer_ToggleChunkStream":{"prefix":"Streamer_ToggleChunkStream","body":"Streamer_ToggleChunkStream(toggle)"},"Streamer_IsToggleChunkStream":{"prefix":"Streamer_IsToggleChunkStream","body":"Streamer_IsToggleChunkStream()"},"Streamer_GetChunkTickRate":{"prefix":"Streamer_GetChunkTickRate","body":"Streamer_GetChunkTickRate(type, playerid = -1)"},"Streamer_SetChunkTickRate":{"prefix":"Streamer_SetChunkTickRate","body":"Streamer_SetChunkTickRate(type, rate, playerid = -1)"},"Streamer_GetChunkSize":{"prefix":"Streamer_GetChunkSize","body":"Streamer_GetChunkSize(type)"},"Streamer_SetChunkSize":{"prefix":"Streamer_SetChunkSize","body":"Streamer_SetChunkSize(type, size)"},"Streamer_GetMaxItems":{"prefix":"Streamer_GetMaxItems","body":"Streamer_GetMaxItems(type)"},"Streamer_SetMaxItems":{"prefix":"Streamer_SetMaxItems","body":"Streamer_SetMaxItems(type, items)"},"Streamer_GetVisibleItems":{"prefix":"Streamer_GetVisibleItems","body":"Streamer_GetVisibleItems(type, playerid = -1)"},"Streamer_SetVisibleItems":{"prefix":"Streamer_SetVisibleItems","body":"Streamer_SetVisibleItems(type, items, playerid = -1)"},"Streamer_GetRadiusMultiplier":{"prefix":"Streamer_GetRadiusMultiplier","body":"Streamer_GetRadiusMultiplier(type, &Float:multiplier, playerid = -1)"},"Streamer_SetRadiusMultiplier":{"prefix":"Streamer_SetRadiusMultiplier","body":"Streamer_SetRadiusMultiplier(type, Float:multiplier, playerid = -1)"},"Streamer_GetTypePriority":{"prefix":"Streamer_GetTypePriority","body":"Streamer_GetTypePriority(types[], maxtypes = sizeof types)"},"Streamer_SetTypePriority":{"prefix":"Streamer_SetTypePriority","body":"Streamer_SetTypePriority(const types[], maxtypes = sizeof types)"},"Streamer_GetCellDistance":{"prefix":"Streamer_GetCellDistance","body":"Streamer_GetCellDistance(&Float:distance)"},"Streamer_SetCellDistance":{"prefix":"Streamer_SetCellDistance","body":"Streamer_SetCellDistance(Float:distance)"},"Streamer_GetCellSize":{"prefix":"Streamer_GetCellSize","body":"Streamer_GetCellSize(&Float:size)"},"Streamer_SetCellSize":{"prefix":"Streamer_SetCellSize","body":"Streamer_SetCellSize(Float:size)"},"Streamer_ToggleItemStatic":{"prefix":"Streamer_ToggleItemStatic","body":"Streamer_ToggleItemStatic(type, STREAMER_ALL_TAGS:id, toggle)"},"Streamer_IsToggleItemStatic":{"prefix":"Streamer_IsToggleItemStatic","body":"Streamer_IsToggleItemStatic(type, STREAMER_ALL_TAGS:id)"},"Streamer_ToggleItemInvAreas":{"prefix":"Streamer_ToggleItemInvAreas","body":"Streamer_ToggleItemInvAreas(type, STREAMER_ALL_TAGS:id, toggle)"},"Streamer_IsToggleItemInvAreas":{"prefix":"Streamer_IsToggleItemInvAreas","body":"Streamer_IsToggleItemInvAreas(type, STREAMER_ALL_TAGS:id)"},"Streamer_ToggleItemCallbacks":{"prefix":"Streamer_ToggleItemCallbacks","body":"Streamer_ToggleItemCallbacks(type, STREAMER_ALL_TAGS:id, toggle)"},"Streamer_IsToggleItemCallbacks":{"prefix":"Streamer_IsToggleItemCallbacks","body":"Streamer_IsToggleItemCallbacks(type, STREAMER_ALL_TAGS:id)"},"Streamer_ToggleErrorCallback":{"prefix":"Streamer_ToggleErrorCallback","body":"Streamer_ToggleErrorCallback(toggle)"},"Streamer_IsToggleErrorCallback":{"prefix":"Streamer_IsToggleErrorCallback","body":"Streamer_IsToggleErrorCallback()"},"Streamer_AmxUnloadDestroyItems":{"prefix":"Streamer_AmxUnloadDestroyItems","body":"Streamer_AmxUnloadDestroyItems(toggle)"},"Streamer_ProcessActiveItems":{"prefix":"Streamer_ProcessActiveItems","body":"Streamer_ProcessActiveItems()"},"Streamer_ToggleIdleUpdate":{"prefix":"Streamer_ToggleIdleUpdate","body":"Streamer_ToggleIdleUpdate(playerid, toggle)"},"Streamer_IsToggleIdleUpdate":{"prefix":"Streamer_IsToggleIdleUpdate","body":"Streamer_IsToggleIdleUpdate(playerid)"},"Streamer_ToggleCameraUpdate":{"prefix":"Streamer_ToggleCameraUpdate","body":"Streamer_ToggleCameraUpdate(playerid, toggle)"},"Streamer_IsToggleCameraUpdate":{"prefix":"Streamer_IsToggleCameraUpdate","body":"Streamer_IsToggleCameraUpdate(playerid)"},"Streamer_ToggleItemUpdate":{"prefix":"Streamer_ToggleItemUpdate","body":"Streamer_ToggleItemUpdate(playerid, type, toggle)"},"Streamer_IsToggleItemUpdate":{"prefix":"Streamer_IsToggleItemUpdate","body":"Streamer_IsToggleItemUpdate(playerid, type)"},"Streamer_GetLastUpdateTime":{"prefix":"Streamer_GetLastUpdateTime","body":"Streamer_GetLastUpdateTime(&Float:time)"},"Streamer_Update":{"prefix":"Streamer_Update","body":"Streamer_Update(playerid, type = -1)"},"Streamer_UpdateEx":{"prefix":"Streamer_UpdateEx","body":"Streamer_UpdateEx(playerid, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, type = -1, compensatedtime = -1, freezeplayer = 1)"},"Streamer_GetFloatData":{"prefix":"Streamer_GetFloatData","body":"Streamer_GetFloatData(type, STREAMER_ALL_TAGS:id, data, &Float:result)"},"Streamer_SetFloatData":{"prefix":"Streamer_SetFloatData","body":"Streamer_SetFloatData(type, STREAMER_ALL_TAGS:id, data, Float:value)"},"Streamer_GetIntData":{"prefix":"Streamer_GetIntData","body":"Streamer_GetIntData(type, STREAMER_ALL_TAGS:id, data)"},"Streamer_SetIntData":{"prefix":"Streamer_SetIntData","body":"Streamer_SetIntData(type, STREAMER_ALL_TAGS:id, data, value)"},"Streamer_GetArrayData":{"prefix":"Streamer_GetArrayData","body":"Streamer_GetArrayData(type, STREAMER_ALL_TAGS:id, data, dest[], maxdest = sizeof dest)"},"Streamer_SetArrayData":{"prefix":"Streamer_SetArrayData","body":"Streamer_SetArrayData(type, STREAMER_ALL_TAGS:id, data, const src[], maxsrc = sizeof src)"},"Streamer_IsInArrayData":{"prefix":"Streamer_IsInArrayData","body":"Streamer_IsInArrayData(type, STREAMER_ALL_TAGS:id, data, value)"},"Streamer_AppendArrayData":{"prefix":"Streamer_AppendArrayData","body":"Streamer_AppendArrayData(type, STREAMER_ALL_TAGS:id, data, value)"},"Streamer_RemoveArrayData":{"prefix":"Streamer_RemoveArrayData","body":"Streamer_RemoveArrayData(type, STREAMER_ALL_TAGS:id, data, value)"},"Streamer_GetArrayDataLength":{"prefix":"Streamer_GetArrayDataLength","body":"Streamer_GetArrayDataLength(type, STREAMER_ALL_TAGS:id, data)"},"Streamer_GetUpperBound":{"prefix":"Streamer_GetUpperBound","body":"Streamer_GetUpperBound(type)"},"Streamer_GetDistanceToItem":{"prefix":"Streamer_GetDistanceToItem","body":"Streamer_GetDistanceToItem(Float:x, Float:y, Float:z, type, STREAMER_ALL_TAGS:id, &Float:distance, dimensions = 3)"},"Streamer_ToggleItem":{"prefix":"Streamer_ToggleItem","body":"Streamer_ToggleItem(playerid, type, STREAMER_ALL_TAGS:id, toggle)"},"Streamer_IsToggleItem":{"prefix":"Streamer_IsToggleItem","body":"Streamer_IsToggleItem(playerid, type, STREAMER_ALL_TAGS:id)"},"Streamer_ToggleAllItems":{"prefix":"Streamer_ToggleAllItems","body":"Streamer_ToggleAllItems(playerid, type, toggle, const exceptions[] = { -1 }, maxexceptions = sizeof exceptions)"},"Streamer_GetItemInternalID":{"prefix":"Streamer_GetItemInternalID","body":"Streamer_GetItemInternalID(playerid, type, STREAMER_ALL_TAGS:streamerid)"},"Streamer_GetItemStreamerID":{"prefix":"Streamer_GetItemStreamerID","body":"Streamer_GetItemStreamerID(playerid, type, internalid)"},"Streamer_IsItemVisible":{"prefix":"Streamer_IsItemVisible","body":"Streamer_IsItemVisible(playerid, type, STREAMER_ALL_TAGS:id)"},"Streamer_DestroyAllVisibleItems":{"prefix":"Streamer_DestroyAllVisibleItems","body":"Streamer_DestroyAllVisibleItems(playerid, type, serverwide = 1)"},"Streamer_CountVisibleItems":{"prefix":"Streamer_CountVisibleItems","body":"Streamer_CountVisibleItems(playerid, type, serverwide = 1)"},"Streamer_DestroyAllItems":{"prefix":"Streamer_DestroyAllItems","body":"Streamer_DestroyAllItems(type, serverwide = 1)"},"Streamer_CountItems":{"prefix":"Streamer_CountItems","body":"Streamer_CountItems(type, serverwide = 1)"},"Streamer_GetNearbyItems":{"prefix":"Streamer_GetNearbyItems","body":"Streamer_GetNearbyItems(Float:x, Float:y, Float:z, type, STREAMER_ALL_TAGS:items[], maxitems = sizeof items, Float:range = 300.0, worldid = -1)"},"Streamer_GetAllVisibleItems":{"prefix":"Streamer_GetAllVisibleItems","body":"Streamer_GetAllVisibleItems(playerid, type, STREAMER_ALL_TAGS:items[], maxitems = sizeof items)"},"Streamer_GetItemPos":{"prefix":"Streamer_GetItemPos","body":"Streamer_GetItemPos(type, STREAMER_ALL_TAGS:id, &Float:x, &Float:y, &Float:z)"},"Streamer_SetItemPos":{"prefix":"Streamer_SetItemPos","body":"Streamer_SetItemPos(type, STREAMER_ALL_TAGS:id, Float:x, Float:y, Float:z)"},"Streamer_GetItemOffset":{"prefix":"Streamer_GetItemOffset","body":"Streamer_GetItemOffset(type, STREAMER_ALL_TAGS:id, &Float:x, &Float:y, &Float:z)"},"Streamer_SetItemOffset":{"prefix":"Streamer_SetItemOffset","body":"Streamer_SetItemOffset(type, STREAMER_ALL_TAGS:id, Float:x, Float:y, Float:z)"},"STREAMER_TAG_OBJECT:CreateDynamicObject":{"prefix":"STREAMER_TAG_OBJECT:CreateDynamicObject","body":"STREAMER_TAG_OBJECT:CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_OBJECT_SD, Float:drawdistance = STREAMER_OBJECT_DD, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)"},"DestroyDynamicObject":{"prefix":"DestroyDynamicObject","body":"DestroyDynamicObject(STREAMER_TAG_OBJECT:objectid)"},"IsValidDynamicObject":{"prefix":"IsValidDynamicObject","body":"IsValidDynamicObject(STREAMER_TAG_OBJECT:objectid)"},"GetDynamicObjectPos":{"prefix":"GetDynamicObjectPos","body":"GetDynamicObjectPos(STREAMER_TAG_OBJECT:objectid, &Float:x, &Float:y, &Float:z)"},"SetDynamicObjectPos":{"prefix":"SetDynamicObjectPos","body":"SetDynamicObjectPos(STREAMER_TAG_OBJECT:objectid, Float:x, Float:y, Float:z)"},"GetDynamicObjectRot":{"prefix":"GetDynamicObjectRot","body":"GetDynamicObjectRot(STREAMER_TAG_OBJECT:objectid, &Float:rx, &Float:ry, &Float:rz)"},"SetDynamicObjectRot":{"prefix":"SetDynamicObjectRot","body":"SetDynamicObjectRot(STREAMER_TAG_OBJECT:objectid, Float:rx, Float:ry, Float:rz)"},"GetDynamicObjectNoCameraCol":{"prefix":"GetDynamicObjectNoCameraCol","body":"GetDynamicObjectNoCameraCol(STREAMER_TAG_OBJECT:objectid)"},"SetDynamicObjectNoCameraCol":{"prefix":"SetDynamicObjectNoCameraCol","body":"SetDynamicObjectNoCameraCol(STREAMER_TAG_OBJECT:objectid)"},"MoveDynamicObject":{"prefix":"MoveDynamicObject","body":"MoveDynamicObject(STREAMER_TAG_OBJECT:objectid, Float:x, Float:y, Float:z, Float:speed, Float:rx = -1000.0, Float:ry = -1000.0, Float:rz = -1000.0)"},"StopDynamicObject":{"prefix":"StopDynamicObject","body":"StopDynamicObject(STREAMER_TAG_OBJECT:objectid)"},"IsDynamicObjectMoving":{"prefix":"IsDynamicObjectMoving","body":"IsDynamicObjectMoving(STREAMER_TAG_OBJECT:objectid)"},"AttachCameraToDynamicObject":{"prefix":"AttachCameraToDynamicObject","body":"AttachCameraToDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid)"},"AttachDynamicObjectToObject":{"prefix":"AttachDynamicObjectToObject","body":"AttachDynamicObjectToObject(STREAMER_TAG_OBJECT:objectid, attachtoid, Float:offsetx, Float:offsety, Float:offsetz, Float:rx, Float:ry, Float:rz, syncrotation = 1)"},"AttachDynamicObjectToPlayer":{"prefix":"AttachDynamicObjectToPlayer","body":"AttachDynamicObjectToPlayer(STREAMER_TAG_OBJECT:objectid, playerid, Float:offsetx, Float:offsety, Float:offsetz, Float:rx, Float:ry, Float:rz)"},"AttachDynamicObjectToVehicle":{"prefix":"AttachDynamicObjectToVehicle","body":"AttachDynamicObjectToVehicle(STREAMER_TAG_OBJECT:objectid, vehicleid, Float:offsetx, Float:offsety, Float:offsetz, Float:rx, Float:ry, Float:rz)"},"EditDynamicObject":{"prefix":"EditDynamicObject","body":"EditDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid)"},"IsDynamicObjectMaterialUsed":{"prefix":"IsDynamicObjectMaterialUsed","body":"IsDynamicObjectMaterialUsed(STREAMER_TAG_OBJECT:objectid, materialindex)"},"GetDynamicObjectMaterial":{"prefix":"GetDynamicObjectMaterial","body":"GetDynamicObjectMaterial(STREAMER_TAG_OBJECT:objectid, materialindex, &modelid, txdname[], texturename[], &materialcolor, maxtxdname = sizeof txdname, maxtexturename = sizeof texturename)"},"SetDynamicObjectMaterial":{"prefix":"SetDynamicObjectMaterial","body":"SetDynamicObjectMaterial(STREAMER_TAG_OBJECT:objectid, materialindex, modelid, const txdname[], const texturename[], materialcolor = 0)"},"IsDynamicObjectMaterialTextUsed":{"prefix":"IsDynamicObjectMaterialTextUsed","body":"IsDynamicObjectMaterialTextUsed(STREAMER_TAG_OBJECT:objectid, materialindex)"},"GetDynamicObjectMaterialText":{"prefix":"GetDynamicObjectMaterialText","body":"GetDynamicObjectMaterialText(STREAMER_TAG_OBJECT:objectid, materialindex, text[], &materialsize, fontface[], &fontsize, &bold, &fontcolor, &backcolor, &textalignment, maxtext = sizeof text, maxfontface = sizeof fontface)"},"SetDynamicObjectMaterialText":{"prefix":"SetDynamicObjectMaterialText","body":"SetDynamicObjectMaterialText(STREAMER_TAG_OBJECT:objectid, materialindex, const text[], materialsize = OBJECT_MATERIAL_SIZE_256x128, const fontface[] = \"Arial\", fontsize = 24, bold = 1, fontcolor = 0xFFFFFFFF, backcolor = 0, textalignment = 0)"},"STREAMER_TAG_OBJECT:GetPlayerCameraTargetDynObject":{"prefix":"STREAMER_TAG_OBJECT:GetPlayerCameraTargetDynObject","body":"STREAMER_TAG_OBJECT:GetPlayerCameraTargetDynObject(playerid)"},"STREAMER_TAG_PICKUP:CreateDynamicPickup":{"prefix":"STREAMER_TAG_PICKUP:CreateDynamicPickup","body":"STREAMER_TAG_PICKUP:CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_PICKUP_SD, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)"},"DestroyDynamicPickup":{"prefix":"DestroyDynamicPickup","body":"DestroyDynamicPickup(STREAMER_TAG_PICKUP:pickupid)"},"IsValidDynamicPickup":{"prefix":"IsValidDynamicPickup","body":"IsValidDynamicPickup(STREAMER_TAG_PICKUP:pickupid)"},"STREAMER_TAG_CP:CreateDynamicCP":{"prefix":"STREAMER_TAG_CP:CreateDynamicCP","body":"STREAMER_TAG_CP:CreateDynamicCP(Float:x, Float:y, Float:z, Float:size, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_CP_SD, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)"},"DestroyDynamicCP":{"prefix":"DestroyDynamicCP","body":"DestroyDynamicCP(STREAMER_TAG_CP:checkpointid)"},"IsValidDynamicCP":{"prefix":"IsValidDynamicCP","body":"IsValidDynamicCP(STREAMER_TAG_CP:checkpointid)"},"IsPlayerInDynamicCP":{"prefix":"IsPlayerInDynamicCP","body":"IsPlayerInDynamicCP(playerid, STREAMER_TAG_CP:checkpointid)"},"GetPlayerVisibleDynamicCP":{"prefix":"GetPlayerVisibleDynamicCP","body":"GetPlayerVisibleDynamicCP(playerid)"},"STREAMER_TAG_RACE_CP:CreateDynamicRaceCP":{"prefix":"STREAMER_TAG_RACE_CP:CreateDynamicRaceCP","body":"STREAMER_TAG_RACE_CP:CreateDynamicRaceCP(type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_RACE_CP_SD, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)"},"DestroyDynamicRaceCP":{"prefix":"DestroyDynamicRaceCP","body":"DestroyDynamicRaceCP(STREAMER_TAG_RACE_CP:checkpointid)"},"IsValidDynamicRaceCP":{"prefix":"IsValidDynamicRaceCP","body":"IsValidDynamicRaceCP(STREAMER_TAG_RACE_CP:checkpointid)"},"IsPlayerInDynamicRaceCP":{"prefix":"IsPlayerInDynamicRaceCP","body":"IsPlayerInDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP:checkpointid)"},"GetPlayerVisibleDynamicRaceCP":{"prefix":"GetPlayerVisibleDynamicRaceCP","body":"GetPlayerVisibleDynamicRaceCP(playerid)"},"STREAMER_TAG_MAP_ICON:CreateDynamicMapIcon":{"prefix":"STREAMER_TAG_MAP_ICON:CreateDynamicMapIcon","body":"STREAMER_TAG_MAP_ICON:CreateDynamicMapIcon(Float:x, Float:y, Float:z, type, color, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_MAP_ICON_SD, style = MAPICON_LOCAL, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)"},"DestroyDynamicMapIcon":{"prefix":"DestroyDynamicMapIcon","body":"DestroyDynamicMapIcon(STREAMER_TAG_MAP_ICON:iconid)"},"IsValidDynamicMapIcon":{"prefix":"IsValidDynamicMapIcon","body":"IsValidDynamicMapIcon(STREAMER_TAG_MAP_ICON:iconid)"},"STREAMER_TAG_3D_TEXT_LABEL:CreateDynamic3DTextLabel":{"prefix":"STREAMER_TAG_3D_TEXT_LABEL:CreateDynamic3DTextLabel","body":"STREAMER_TAG_3D_TEXT_LABEL:CreateDynamic3DTextLabel(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)"},"DestroyDynamic3DTextLabel":{"prefix":"DestroyDynamic3DTextLabel","body":"DestroyDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:id)"},"IsValidDynamic3DTextLabel":{"prefix":"IsValidDynamic3DTextLabel","body":"IsValidDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:id)"},"GetDynamic3DTextLabelText":{"prefix":"GetDynamic3DTextLabelText","body":"GetDynamic3DTextLabelText(STREAMER_TAG_3D_TEXT_LABEL:id, text[], maxtext = sizeof text)"},"UpdateDynamic3DTextLabelText":{"prefix":"UpdateDynamic3DTextLabelText","body":"UpdateDynamic3DTextLabelText(STREAMER_TAG_3D_TEXT_LABEL:id, color, const text[])"},"STREAMER_TAG_AREA:CreateDynamicCircle":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCircle","body":"STREAMER_TAG_AREA:CreateDynamicCircle(Float:x, Float:y, Float:size, worldid = -1, interiorid = -1, playerid = -1, priority = 0)"},"STREAMER_TAG_AREA:CreateDynamicCylinder":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCylinder","body":"STREAMER_TAG_AREA:CreateDynamicCylinder(Float:x, Float:y, Float:minz, Float:maxz, Float:size, worldid = -1, interiorid = -1, playerid = -1, priority = 0)"},"STREAMER_TAG_AREA:CreateDynamicSphere":{"prefix":"STREAMER_TAG_AREA:CreateDynamicSphere","body":"STREAMER_TAG_AREA:CreateDynamicSphere(Float:x, Float:y, Float:z, Float:size, worldid = -1, interiorid = -1, playerid = -1, priority = 0)"},"STREAMER_TAG_AREA:CreateDynamicRectangle":{"prefix":"STREAMER_TAG_AREA:CreateDynamicRectangle","body":"STREAMER_TAG_AREA:CreateDynamicRectangle(Float:minx, Float:miny, Float:maxx, Float:maxy, worldid = -1, interiorid = -1, playerid = -1, priority = 0)"},"STREAMER_TAG_AREA:CreateDynamicCuboid":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCuboid","body":"STREAMER_TAG_AREA:CreateDynamicCuboid(Float:minx, Float:miny, Float:minz, Float:maxx, Float:maxy, Float:maxz, worldid = -1, interiorid = -1, playerid = -1, priority = 0)"},"STREAMER_TAG_AREA:CreateDynamicCube":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCube","body":"STREAMER_TAG_AREA:CreateDynamicCube(Float:minx, Float:miny, Float:minz, Float:maxx, Float:maxy, Float:maxz, worldid = -1, interiorid = -1, playerid = -1, priority = 0)"},"STREAMER_TAG_AREA:CreateDynamicPolygon":{"prefix":"STREAMER_TAG_AREA:CreateDynamicPolygon","body":"STREAMER_TAG_AREA:CreateDynamicPolygon(const Float:points[], Float:minz = -FLOAT_INFINITY, Float:maxz = FLOAT_INFINITY, maxpoints = sizeof points, worldid = -1, interiorid = -1, playerid = -1, priority = 0)"},"DestroyDynamicArea":{"prefix":"DestroyDynamicArea","body":"DestroyDynamicArea(STREAMER_TAG_AREA:areaid)"},"IsValidDynamicArea":{"prefix":"IsValidDynamicArea","body":"IsValidDynamicArea(STREAMER_TAG_AREA:areaid)"},"GetDynamicAreaType":{"prefix":"GetDynamicAreaType","body":"GetDynamicAreaType(STREAMER_TAG_AREA:areaid)"},"GetDynamicPolygonPoints":{"prefix":"GetDynamicPolygonPoints","body":"GetDynamicPolygonPoints(STREAMER_TAG_AREA:areaid, Float:points[], maxpoints = sizeof points)"},"GetDynamicPolygonNumberPoints":{"prefix":"GetDynamicPolygonNumberPoints","body":"GetDynamicPolygonNumberPoints(STREAMER_TAG_AREA:areaid)"},"IsPlayerInDynamicArea":{"prefix":"IsPlayerInDynamicArea","body":"IsPlayerInDynamicArea(playerid, STREAMER_TAG_AREA:areaid, recheck = 0)"},"IsPlayerInAnyDynamicArea":{"prefix":"IsPlayerInAnyDynamicArea","body":"IsPlayerInAnyDynamicArea(playerid, recheck = 0)"},"IsAnyPlayerInDynamicArea":{"prefix":"IsAnyPlayerInDynamicArea","body":"IsAnyPlayerInDynamicArea(STREAMER_TAG_AREA:areaid, recheck = 0)"},"IsAnyPlayerInAnyDynamicArea":{"prefix":"IsAnyPlayerInAnyDynamicArea","body":"IsAnyPlayerInAnyDynamicArea(recheck = 0)"},"GetPlayerDynamicAreas":{"prefix":"GetPlayerDynamicAreas","body":"GetPlayerDynamicAreas(playerid, STREAMER_TAG_AREA:areas[], maxareas = sizeof areas)"},"GetPlayerNumberDynamicAreas":{"prefix":"GetPlayerNumberDynamicAreas","body":"GetPlayerNumberDynamicAreas(playerid)"},"IsPointInDynamicArea":{"prefix":"IsPointInDynamicArea","body":"IsPointInDynamicArea(STREAMER_TAG_AREA:areaid, Float:x, Float:y, Float:z)"},"IsPointInAnyDynamicArea":{"prefix":"IsPointInAnyDynamicArea","body":"IsPointInAnyDynamicArea(Float:x, Float:y, Float:z)"},"IsLineInDynamicArea":{"prefix":"IsLineInDynamicArea","body":"IsLineInDynamicArea(STREAMER_TAG_AREA:areaid, Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)"},"IsLineInAnyDynamicArea":{"prefix":"IsLineInAnyDynamicArea","body":"IsLineInAnyDynamicArea(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)"},"GetDynamicAreasForPoint":{"prefix":"GetDynamicAreasForPoint","body":"GetDynamicAreasForPoint(Float:x, Float:y, Float:z, STREAMER_TAG_AREA:areas[], maxareas = sizeof areas)"},"GetNumberDynamicAreasForPoint":{"prefix":"GetNumberDynamicAreasForPoint","body":"GetNumberDynamicAreasForPoint(Float:x, Float:y, Float:z)"},"GetDynamicAreasForLine":{"prefix":"GetDynamicAreasForLine","body":"GetDynamicAreasForLine(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, STREAMER_TAG_AREA:areas[], maxareas = sizeof areas)"},"GetNumberDynamicAreasForLine":{"prefix":"GetNumberDynamicAreasForLine","body":"GetNumberDynamicAreasForLine(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)"},"AttachDynamicAreaToObject":{"prefix":"AttachDynamicAreaToObject","body":"AttachDynamicAreaToObject(STREAMER_TAG_AREA:areaid, STREAMER_TAG_OBJECT_ALT:objectid, type = STREAMER_OBJECT_TYPE_DYNAMIC, playerid = INVALID_PLAYER_ID, Float:offsetx = 0.0, Float:offsety = 0.0, Float:offsetz = 0.0)"},"AttachDynamicAreaToPlayer":{"prefix":"AttachDynamicAreaToPlayer","body":"AttachDynamicAreaToPlayer(STREAMER_TAG_AREA:areaid, playerid, Float:offsetx = 0.0, Float:offsety = 0.0, Float:offsetz = 0.0)"},"AttachDynamicAreaToVehicle":{"prefix":"AttachDynamicAreaToVehicle","body":"AttachDynamicAreaToVehicle(STREAMER_TAG_AREA:areaid, vehicleid, Float:offsetx = 0.0, Float:offsety = 0.0, Float:offsetz = 0.0)"},"ToggleDynAreaSpectateMode":{"prefix":"ToggleDynAreaSpectateMode","body":"ToggleDynAreaSpectateMode(STREAMER_TAG_AREA:areaid, toggle)"},"IsToggleDynAreaSpectateMode":{"prefix":"IsToggleDynAreaSpectateMode","body":"IsToggleDynAreaSpectateMode(STREAMER_TAG_AREA:areaid)"},"STREAMER_TAG_ACTOR:CreateDynamicActor":{"prefix":"STREAMER_TAG_ACTOR:CreateDynamicActor","body":"STREAMER_TAG_ACTOR:CreateDynamicActor(modelid, Float:x, Float:y, Float:z, Float:r, invulnerable = true, Float:health = 100.0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_ACTOR_SD, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)"},"DestroyDynamicActor":{"prefix":"DestroyDynamicActor","body":"DestroyDynamicActor(STREAMER_TAG_ACTOR:actorid)"},"IsValidDynamicActor":{"prefix":"IsValidDynamicActor","body":"IsValidDynamicActor(STREAMER_TAG_ACTOR:actorid)"},"IsDynamicActorStreamedIn":{"prefix":"IsDynamicActorStreamedIn","body":"IsDynamicActorStreamedIn(STREAMER_TAG_ACTOR:actorid, forplayerid)"},"GetDynamicActorVirtualWorld":{"prefix":"GetDynamicActorVirtualWorld","body":"GetDynamicActorVirtualWorld(STREAMER_TAG_ACTOR:actorid)"},"SetDynamicActorVirtualWorld":{"prefix":"SetDynamicActorVirtualWorld","body":"SetDynamicActorVirtualWorld(STREAMER_TAG_ACTOR:actorid, vworld)"},"GetDynamicActorAnimation":{"prefix":"GetDynamicActorAnimation","body":"GetDynamicActorAnimation(STREAMER_TAG_ACTOR:actorid, animlib[], animname[], &Float:fdelta, &loop, &lockx, &locky, &freeze, &time, maxanimlib = sizeof animlib, maxanimname = sizeof animname)"},"ApplyDynamicActorAnimation":{"prefix":"ApplyDynamicActorAnimation","body":"ApplyDynamicActorAnimation(STREAMER_TAG_ACTOR:actorid, const animlib[], const animname[], Float:fdelta, loop, lockx, locky, freeze, time)"},"ClearDynamicActorAnimations":{"prefix":"ClearDynamicActorAnimations","body":"ClearDynamicActorAnimations(STREAMER_TAG_ACTOR:actorid)"},"GetDynamicActorFacingAngle":{"prefix":"GetDynamicActorFacingAngle","body":"GetDynamicActorFacingAngle(STREAMER_TAG_ACTOR:actorid, &Float:ang)"},"SetDynamicActorFacingAngle":{"prefix":"SetDynamicActorFacingAngle","body":"SetDynamicActorFacingAngle(STREAMER_TAG_ACTOR:actorid, Float:ang)"},"GetDynamicActorPos":{"prefix":"GetDynamicActorPos","body":"GetDynamicActorPos(STREAMER_TAG_ACTOR:actorid, &Float:x, &Float:y, &Float:z)"},"SetDynamicActorPos":{"prefix":"SetDynamicActorPos","body":"SetDynamicActorPos(STREAMER_TAG_ACTOR:actorid, Float:x, Float:y, Float:z)"},"GetDynamicActorHealth":{"prefix":"GetDynamicActorHealth","body":"GetDynamicActorHealth(STREAMER_TAG_ACTOR:actorid, &Float:health)"},"SetDynamicActorHealth":{"prefix":"SetDynamicActorHealth","body":"SetDynamicActorHealth(STREAMER_TAG_ACTOR:actorid, Float:health)"},"SetDynamicActorInvulnerable":{"prefix":"SetDynamicActorInvulnerable","body":"SetDynamicActorInvulnerable(STREAMER_TAG_ACTOR:actorid, invulnerable = true)"},"IsDynamicActorInvulnerable":{"prefix":"IsDynamicActorInvulnerable","body":"IsDynamicActorInvulnerable(STREAMER_TAG_ACTOR:actorid)"},"STREAMER_TAG_ACTOR:GetPlayerTargetDynamicActor":{"prefix":"STREAMER_TAG_ACTOR:GetPlayerTargetDynamicActor","body":"STREAMER_TAG_ACTOR:GetPlayerTargetDynamicActor(playerid)"},"STREAMER_TAG_ACTOR:GetPlayerCameraTargetDynActor":{"prefix":"STREAMER_TAG_ACTOR:GetPlayerCameraTargetDynActor","body":"STREAMER_TAG_ACTOR:GetPlayerCameraTargetDynActor(playerid)"},"STREAMER_TAG_OBJECT:CreateDynamicObjectEx":{"prefix":"STREAMER_TAG_OBJECT:CreateDynamicObjectEx","body":"STREAMER_TAG_OBJECT:CreateDynamicObjectEx(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:streamdistance = STREAMER_OBJECT_SD, Float:drawdistance = STREAMER_OBJECT_DD, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)"},"STREAMER_TAG_PICKUP:CreateDynamicPickupEx":{"prefix":"STREAMER_TAG_PICKUP:CreateDynamicPickupEx","body":"STREAMER_TAG_PICKUP:CreateDynamicPickupEx(modelid, type, Float:x, Float:y, Float:z, Float:streamdistance = STREAMER_PICKUP_SD, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)"},"STREAMER_TAG_CP:CreateDynamicCPEx":{"prefix":"STREAMER_TAG_CP:CreateDynamicCPEx","body":"STREAMER_TAG_CP:CreateDynamicCPEx(Float:x, Float:y, Float:z, Float:size, Float:streamdistance = STREAMER_CP_SD, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)"},"STREAMER_TAG_RACE_CP:CreateDynamicRaceCPEx":{"prefix":"STREAMER_TAG_RACE_CP:CreateDynamicRaceCPEx","body":"STREAMER_TAG_RACE_CP:CreateDynamicRaceCPEx(type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size, Float:streamdistance = STREAMER_RACE_CP_SD, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)"},"STREAMER_TAG_MAP_ICON:CreateDynamicMapIconEx":{"prefix":"STREAMER_TAG_MAP_ICON:CreateDynamicMapIconEx","body":"STREAMER_TAG_MAP_ICON:CreateDynamicMapIconEx(Float:x, Float:y, Float:z, type, color, style = MAPICON_LOCAL, Float:streamdistance = STREAMER_MAP_ICON_SD, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)"},"STREAMER_TAG_3D_TEXT_LABEL:CreateDynamic3DTextLabelEx":{"prefix":"STREAMER_TAG_3D_TEXT_LABEL:CreateDynamic3DTextLabelEx","body":"STREAMER_TAG_3D_TEXT_LABEL:CreateDynamic3DTextLabelEx(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)"},"STREAMER_TAG_AREA:CreateDynamicCircleEx":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCircleEx","body":"STREAMER_TAG_AREA:CreateDynamicCircleEx(Float:x, Float:y, Float:size, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)"},"STREAMER_TAG_AREA:CreateDynamicCylinderEx":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCylinderEx","body":"STREAMER_TAG_AREA:CreateDynamicCylinderEx(Float:x, Float:y, Float:minz, Float:maxz, Float:size, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)"},"STREAMER_TAG_AREA:CreateDynamicSphereEx":{"prefix":"STREAMER_TAG_AREA:CreateDynamicSphereEx","body":"STREAMER_TAG_AREA:CreateDynamicSphereEx(Float:x, Float:y, Float:z, Float:size, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)"},"STREAMER_TAG_AREA:CreateDynamicRectangleEx":{"prefix":"STREAMER_TAG_AREA:CreateDynamicRectangleEx","body":"STREAMER_TAG_AREA:CreateDynamicRectangleEx(Float:minx, Float:miny, Float:maxx, Float:maxy, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)"},"STREAMER_TAG_AREA:CreateDynamicCuboidEx":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCuboidEx","body":"STREAMER_TAG_AREA:CreateDynamicCuboidEx(Float:minx, Float:miny, Float:minz, Float:maxx, Float:maxy, Float:maxz, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)"},"STREAMER_TAG_AREA:CreateDynamicCubeEx":{"prefix":"STREAMER_TAG_AREA:CreateDynamicCubeEx","body":"STREAMER_TAG_AREA:CreateDynamicCubeEx(Float:minx, Float:miny, Float:minz, Float:maxx, Float:maxy, Float:maxz, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)"},"STREAMER_TAG_AREA:CreateDynamicPolygonEx":{"prefix":"STREAMER_TAG_AREA:CreateDynamicPolygonEx","body":"STREAMER_TAG_AREA:CreateDynamicPolygonEx(const Float:points[], Float:minz = -FLOAT_INFINITY, Float:maxz = FLOAT_INFINITY, maxpoints = sizeof points, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players)"},"STREAMER_TAG_ACTOR:CreateDynamicActorEx":{"prefix":"STREAMER_TAG_ACTOR:CreateDynamicActorEx","body":"STREAMER_TAG_ACTOR:CreateDynamicActorEx(modelid, Float:x, Float:y, Float:z, Float:r, invulnerable = 1, Float:health = 100.0, Float:streamdistance = STREAMER_ACTOR_SD, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)"},"Streamer_CallbackHook":{"prefix":"Streamer_CallbackHook","body":"Streamer_CallbackHook(callback, {Float,_}:...)"},"Streamer_TickRate":{"prefix":"Streamer_TickRate","body":"Streamer_TickRate(rate)"},"Streamer_MaxItems":{"prefix":"Streamer_MaxItems","body":"Streamer_MaxItems(type, items)"},"Streamer_VisibleItems":{"prefix":"Streamer_VisibleItems","body":"Streamer_VisibleItems(type, items, playerid = -1)"},"Streamer_CellDistance":{"prefix":"Streamer_CellDistance","body":"Streamer_CellDistance(Float:distance)"},"Streamer_CellSize":{"prefix":"Streamer_CellSize","body":"Streamer_CellSize(Float:size)"},"DestroyAllDynamicObjects":{"prefix":"DestroyAllDynamicObjects","body":"DestroyAllDynamicObjects()"},"CountDynamicObjects":{"prefix":"CountDynamicObjects","body":"CountDynamicObjects()"},"DestroyAllDynamicPickups":{"prefix":"DestroyAllDynamicPickups","body":"DestroyAllDynamicPickups()"},"CountDynamicPickups":{"prefix":"CountDynamicPickups","body":"CountDynamicPickups()"},"DestroyAllDynamicCPs":{"prefix":"DestroyAllDynamicCPs","body":"DestroyAllDynamicCPs()"},"CountDynamicCPs":{"prefix":"CountDynamicCPs","body":"CountDynamicCPs()"},"DestroyAllDynamicRaceCPs":{"prefix":"DestroyAllDynamicRaceCPs","body":"DestroyAllDynamicRaceCPs()"},"CountDynamicRaceCPs":{"prefix":"CountDynamicRaceCPs","body":"CountDynamicRaceCPs()"},"DestroyAllDynamicMapIcons":{"prefix":"DestroyAllDynamicMapIcons","body":"DestroyAllDynamicMapIcons()"},"CountDynamicMapIcons":{"prefix":"CountDynamicMapIcons","body":"CountDynamicMapIcons()"},"DestroyAllDynamic3DTextLabels":{"prefix":"DestroyAllDynamic3DTextLabels","body":"DestroyAllDynamic3DTextLabels()"},"CountDynamic3DTextLabels":{"prefix":"CountDynamic3DTextLabels","body":"CountDynamic3DTextLabels()"},"DestroyAllDynamicAreas":{"prefix":"DestroyAllDynamicAreas","body":"DestroyAllDynamicAreas()"},"CountDynamicAreas":{"prefix":"CountDynamicAreas","body":"CountDynamicAreas()"},"TogglePlayerDynamicCP":{"prefix":"TogglePlayerDynamicCP","body":"TogglePlayerDynamicCP(playerid, STREAMER_TAG_CP:checkpointid, toggle)"},"TogglePlayerAllDynamicCPs":{"prefix":"TogglePlayerAllDynamicCPs","body":"TogglePlayerAllDynamicCPs(playerid, toggle, const exceptions[] = { -1 }, maxexceptions = sizeof exceptions)"},"TogglePlayerDynamicRaceCP":{"prefix":"TogglePlayerDynamicRaceCP","body":"TogglePlayerDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP:checkpointid, toggle)"},"TogglePlayerAllDynamicRaceCPs":{"prefix":"TogglePlayerAllDynamicRaceCPs","body":"TogglePlayerAllDynamicRaceCPs(playerid, toggle, const exceptions[] = { -1 }, maxexceptions = sizeof exceptions)"},"TogglePlayerDynamicArea":{"prefix":"TogglePlayerDynamicArea","body":"TogglePlayerDynamicArea(playerid, STREAMER_TAG_AREA:areaid, toggle)"},"TogglePlayerAllDynamicAreas":{"prefix":"TogglePlayerAllDynamicAreas","body":"TogglePlayerAllDynamicAreas(playerid, toggle, const exceptions[] = { -1 }, maxexceptions = sizeof exceptions)"},"OnDynamicObjectMoved":{"prefix":"OnDynamicObjectMoved","body":"OnDynamicObjectMoved(STREAMER_TAG_OBJECT:objectid)"},"OnPlayerEditDynamicObject":{"prefix":"OnPlayerEditDynamicObject","body":"OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)"},"OnPlayerSelectDynamicObject":{"prefix":"OnPlayerSelectDynamicObject","body":"OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, modelid, Float:x, Float:y, Float:z)"},"OnPlayerShootDynamicObject":{"prefix":"OnPlayerShootDynamicObject","body":"OnPlayerShootDynamicObject(playerid, weaponid, STREAMER_TAG_OBJECT:objectid, Float:x, Float:y, Float:z)"},"OnPlayerPickUpDynamicPickup":{"prefix":"OnPlayerPickUpDynamicPickup","body":"OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP:pickupid)"},"OnPlayerEnterDynamicCP":{"prefix":"OnPlayerEnterDynamicCP","body":"OnPlayerEnterDynamicCP(playerid, STREAMER_TAG_CP:checkpointid)"},"OnPlayerLeaveDynamicCP":{"prefix":"OnPlayerLeaveDynamicCP","body":"OnPlayerLeaveDynamicCP(playerid, STREAMER_TAG_CP:checkpointid)"},"OnPlayerEnterDynamicRaceCP":{"prefix":"OnPlayerEnterDynamicRaceCP","body":"OnPlayerEnterDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP:checkpointid)"},"OnPlayerLeaveDynamicRaceCP":{"prefix":"OnPlayerLeaveDynamicRaceCP","body":"OnPlayerLeaveDynamicRaceCP(playerid, STREAMER_TAG_RACE_CP:checkpointid)"},"OnPlayerEnterDynamicArea":{"prefix":"OnPlayerEnterDynamicArea","body":"OnPlayerEnterDynamicArea(playerid, STREAMER_TAG_AREA:areaid)"},"OnPlayerLeaveDynamicArea":{"prefix":"OnPlayerLeaveDynamicArea","body":"OnPlayerLeaveDynamicArea(playerid, STREAMER_TAG_AREA:areaid)"},"OnPlayerGiveDamageDynamicActor":{"prefix":"OnPlayerGiveDamageDynamicActor","body":"OnPlayerGiveDamageDynamicActor(playerid, STREAMER_TAG_ACTOR:actorid, Float:amount, weaponid, bodypart)"},"OnDynamicActorStreamIn":{"prefix":"OnDynamicActorStreamIn","body":"OnDynamicActorStreamIn(STREAMER_TAG_ACTOR:actorid, forplayerid)"},"OnDynamicActorStreamOut":{"prefix":"OnDynamicActorStreamOut","body":"OnDynamicActorStreamOut(STREAMER_TAG_ACTOR:actorid, forplayerid)"},"Streamer_OnItemStreamIn":{"prefix":"Streamer_OnItemStreamIn","body":"Streamer_OnItemStreamIn(type, STREAMER_ALL_TAGS:id)"},"Streamer_OnItemStreamOut":{"prefix":"Streamer_OnItemStreamOut","body":"Streamer_OnItemStreamOut(type, STREAMER_ALL_TAGS:id)"},"Streamer_OnPluginError":{"prefix":"Streamer_OnPluginError","body":"Streamer_OnPluginError(const error[])"},"FCNPC_OnCreate":{"prefix":"FCNPC_OnCreate","body":"FCNPC_OnCreate(${1:npcid})$0"},"FCNPC_OnDestroy":{"prefix":"FCNPC_OnDestroy","body":"FCNPC_OnDestroy(${1:npcid})$0"},"FCNPC_OnSpawn":{"prefix":"FCNPC_OnSpawn","body":"FCNPC_OnSpawn(${1:npcid})$0"},"FCNPC_OnRespawn":{"prefix":"FCNPC_OnRespawn","body":"FCNPC_OnRespawn(${1:npcid})$0"},"FCNPC_OnDeath":{"prefix":"FCNPC_OnDeath","body":"FCNPC_OnDeath(${1:npcid}, ${2:killerid}, ${3:weaponid})$0"},"FCNPC_OnVehicleEntryComplete":{"prefix":"FCNPC_OnVehicleEntryComplete","body":"FCNPC_OnVehicleEntryComplete(${1:npcid}, ${2:vehicleid}, ${3:seat})$0"},"FCNPC_OnVehicleExitComplete":{"prefix":"FCNPC_OnVehicleExitComplete","body":"FCNPC_OnVehicleExitComplete(${1:npcid})$0"},"FCNPC_OnReachDestination":{"prefix":"FCNPC_OnReachDestination","body":"FCNPC_OnReachDestination(${1:npcid})$0"},"FCNPC_OnFinishPlayback":{"prefix":"FCNPC_OnFinishPlayback","body":"FCNPC_OnFinishPlayback(${1:npcid})$0"},"FCNPC_OnTakeDamage":{"prefix":"FCNPC_OnTakeDamage","body":"FCNPC_OnTakeDamage(${1:npcid}, ${2:damagerid}, ${3:weaponid}, ${4:bodypart}, ${5:Float:health_loss})$0"},"FCNPC_OnGiveDamage":{"prefix":"FCNPC_OnGiveDamage","body":"FCNPC_OnGiveDamage(${1:npcid}, ${2:issuerid}, ${3:weaponid}, ${4:bodypart}, ${5:Float:health_loss})$0"},"FCNPC_OnVehicleTakeDamage":{"prefix":"FCNPC_OnVehicleTakeDamage","body":"FCNPC_OnVehicleTakeDamage(${1:npcid}, ${2:damagerid}, ${3:vehicleid}, ${4:weaponid}, ${5:Float:x}, ${6:Float:y}, ${7:Float:z})$0"},"FCNPC_OnFinishNodePoint":{"prefix":"FCNPC_OnFinishNodePoint","body":"FCNPC_OnFinishNodePoint(${1:npcid}, ${2:point})$0"},"FCNPC_OnChangeNode":{"prefix":"FCNPC_OnChangeNode","body":"FCNPC_OnChangeNode(${1:npcid}, ${2:nodeid})$0"},"FCNPC_OnFinishNode":{"prefix":"FCNPC_OnFinishNode","body":"FCNPC_OnFinishNode(${1:npcid})$0"},"FCNPC_OnStreamIn":{"prefix":"FCNPC_OnStreamIn","body":"FCNPC_OnStreamIn(${1:npcid}, ${2:forplayerid})$0"},"FCNPC_OnStreamOut":{"prefix":"FCNPC_OnStreamOut","body":"FCNPC_OnStreamOut(${1:npcid}, ${2:forplayerid})$0"},"FCNPC_OnUpdate":{"prefix":"FCNPC_OnUpdate","body":"FCNPC_OnUpdate(${1:npcid})$0"},"FCNPC_OnFinishMovePath":{"prefix":"FCNPC_OnFinishMovePath","body":"FCNPC_OnFinishMovePath(${1:npcid}, ${2:pathid})$0"},"FCNPC_OnFinishMovePathPoint":{"prefix":"FCNPC_OnFinishMovePathPoint","body":"FCNPC_OnFinishMovePathPoint(${1:npcid}, ${2:pathid}, ${3:pointid})$0"},"FCNPC_SetUpdateRate":{"prefix":"FCNPC_SetUpdateRate","body":"FCNPC_SetUpdateRate(${1:rate})$0"},"FCNPC_InitMapAndreas":{"prefix":"FCNPC_InitMapAndreas","body":"FCNPC_InitMapAndreas(${1:address})$0"},"FCNPC_Create":{"prefix":"FCNPC_Create","body":"FCNPC_Create(${1:name[]})$0"},"FCNPC_Destroy":{"prefix":"FCNPC_Destroy","body":"FCNPC_Destroy(${1:npcid})$0"},"FCNPC_Spawn":{"prefix":"FCNPC_Spawn","body":"FCNPC_Spawn(${1:npcid}, ${2:skinid}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"FCNPC_Respawn":{"prefix":"FCNPC_Respawn","body":"FCNPC_Respawn(${1:npcid})$0"},"FCNPC_IsSpawned":{"prefix":"FCNPC_IsSpawned","body":"FCNPC_IsSpawned(${1:npcid})$0"},"FCNPC_Kill":{"prefix":"FCNPC_Kill","body":"FCNPC_Kill(${1:npcid})$0"},"FCNPC_IsDead":{"prefix":"FCNPC_IsDead","body":"FCNPC_IsDead(${1:npcid})$0"},"FCNPC_IsValid":{"prefix":"FCNPC_IsValid","body":"FCNPC_IsValid(${1:npcid})$0"},"FCNPC_IsStreamedIn":{"prefix":"FCNPC_IsStreamedIn","body":"FCNPC_IsStreamedIn(${1:npcid}, ${2:forplayerid})$0"},"FCNPC_IsStreamedForAnyone":{"prefix":"FCNPC_IsStreamedForAnyone","body":"FCNPC_IsStreamedForAnyone(${1:npcid})$0"},"FCNPC_SetPosition":{"prefix":"FCNPC_SetPosition","body":"FCNPC_SetPosition(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_GivePosition":{"prefix":"FCNPC_GivePosition","body":"FCNPC_GivePosition(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_GetPosition":{"prefix":"FCNPC_GetPosition","body":"FCNPC_GetPosition(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_SetAngle":{"prefix":"FCNPC_SetAngle","body":"FCNPC_SetAngle(${1:npcid}, ${2:Float:angle})$0"},"FCNPC_GiveAngle":{"prefix":"FCNPC_GiveAngle","body":"FCNPC_GiveAngle(${1:npcid}, ${2:Float:angle})$0"},"FCNPC_SetAngleToPos":{"prefix":"FCNPC_SetAngleToPos","body":"FCNPC_SetAngleToPos(${1:npcid}, ${2:Float:x}, ${3:Float:y})$0"},"FCNPC_SetAngleToPlayer":{"prefix":"FCNPC_SetAngleToPlayer","body":"FCNPC_SetAngleToPlayer(${1:npcid}, ${2:playerid})$0"},"FCNPC_GetAngle":{"prefix":"FCNPC_GetAngle","body":"FCNPC_GetAngle(${1:npcid})$0"},"FCNPC_SetQuaternion":{"prefix":"FCNPC_SetQuaternion","body":"FCNPC_SetQuaternion(${1:npcid}, ${2:Float:w}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"FCNPC_GiveQuaternion":{"prefix":"FCNPC_GiveQuaternion","body":"FCNPC_GiveQuaternion(${1:npcid}, ${2:Float:w}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"FCNPC_GetQuaternion":{"prefix":"FCNPC_GetQuaternion","body":"FCNPC_GetQuaternion(${1:npcid}, ${2:Float:w}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"FCNPC_SetVelocity":{"prefix":"FCNPC_SetVelocity","body":"FCNPC_SetVelocity(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:bool:update_pos = false})$0"},"FCNPC_GiveVelocity":{"prefix":"FCNPC_GiveVelocity","body":"FCNPC_GiveVelocity(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:bool:update_pos = false})$0"},"FCNPC_GetVelocity":{"prefix":"FCNPC_GetVelocity","body":"FCNPC_GetVelocity(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_SetInterior":{"prefix":"FCNPC_SetInterior","body":"FCNPC_SetInterior(${1:npcid}, ${2:interiorid})$0"},"FCNPC_GetInterior":{"prefix":"FCNPC_GetInterior","body":"FCNPC_GetInterior(${1:npcid})$0"},"FCNPC_SetVirtualWorld":{"prefix":"FCNPC_SetVirtualWorld","body":"FCNPC_SetVirtualWorld(${1:npcid}, ${2:worldid})$0"},"FCNPC_GetVirtualWorld":{"prefix":"FCNPC_GetVirtualWorld","body":"FCNPC_GetVirtualWorld(${1:npcid})$0"},"FCNPC_SetHealth":{"prefix":"FCNPC_SetHealth","body":"FCNPC_SetHealth(${1:npcid}, ${2:Float:health})$0"},"FCNPC_GiveHealth":{"prefix":"FCNPC_GiveHealth","body":"FCNPC_GiveHealth(${1:npcid}, ${2:Float:health})$0"},"FCNPC_GetHealth":{"prefix":"FCNPC_GetHealth","body":"FCNPC_GetHealth(${1:npcid})$0"},"FCNPC_SetArmour":{"prefix":"FCNPC_SetArmour","body":"FCNPC_SetArmour(${1:npcid}, ${2:Float:armour})$0"},"FCNPC_GiveArmour":{"prefix":"FCNPC_GiveArmour","body":"FCNPC_GiveArmour(${1:npcid}, ${2:Float:armour})$0"},"FCNPC_GetArmour":{"prefix":"FCNPC_GetArmour","body":"FCNPC_GetArmour(${1:npcid})$0"},"FCNPC_SetInvulnerable":{"prefix":"FCNPC_SetInvulnerable","body":"FCNPC_SetInvulnerable(${1:npcid}, ${2:bool:invulnerable = true})$0"},"FCNPC_IsInvulnerable":{"prefix":"FCNPC_IsInvulnerable","body":"FCNPC_IsInvulnerable(${1:npcid})$0"},"FCNPC_SetSkin":{"prefix":"FCNPC_SetSkin","body":"FCNPC_SetSkin(${1:npcid}, ${2:skinid})$0"},"FCNPC_GetSkin":{"prefix":"FCNPC_GetSkin","body":"FCNPC_GetSkin(${1:npcid})$0"},"FCNPC_SetWeapon":{"prefix":"FCNPC_SetWeapon","body":"FCNPC_SetWeapon(${1:npcid}, ${2:weaponid})$0"},"FCNPC_GetWeapon":{"prefix":"FCNPC_GetWeapon","body":"FCNPC_GetWeapon(${1:npcid})$0"},"FCNPC_SetAmmo":{"prefix":"FCNPC_SetAmmo","body":"FCNPC_SetAmmo(${1:npcid}, ${2:ammo})$0"},"FCNPC_GiveAmmo":{"prefix":"FCNPC_GiveAmmo","body":"FCNPC_GiveAmmo(${1:npcid}, ${2:ammo})$0"},"FCNPC_GetAmmo":{"prefix":"FCNPC_GetAmmo","body":"FCNPC_GetAmmo(${1:npcid})$0"},"FCNPC_SetWeaponSkillLevel":{"prefix":"FCNPC_SetWeaponSkillLevel","body":"FCNPC_SetWeaponSkillLevel(${1:npcid}, ${2:skill}, ${3:level})$0"},"FCNPC_GiveWeaponSkillLevel":{"prefix":"FCNPC_GiveWeaponSkillLevel","body":"FCNPC_GiveWeaponSkillLevel(${1:npcid}, ${2:skill}, ${3:level})$0"},"FCNPC_GetWeaponSkillLevel":{"prefix":"FCNPC_GetWeaponSkillLevel","body":"FCNPC_GetWeaponSkillLevel(${1:npcid}, ${2:skill})$0"},"FCNPC_SetWeaponState":{"prefix":"FCNPC_SetWeaponState","body":"FCNPC_SetWeaponState(${1:npcid}, ${2:weaponstate})$0"},"FCNPC_GetWeaponState":{"prefix":"FCNPC_GetWeaponState","body":"FCNPC_GetWeaponState(${1:npcid})$0"},"FCNPC_SetWeaponReloadTime":{"prefix":"FCNPC_SetWeaponReloadTime","body":"FCNPC_SetWeaponReloadTime(${1:npcid}, ${2:weaponid}, ${3:time})$0"},"FCNPC_GetWeaponReloadTime":{"prefix":"FCNPC_GetWeaponReloadTime","body":"FCNPC_GetWeaponReloadTime(${1:npcid}, ${2:weaponid})$0"},"FCNPC_SetWeaponShootTime":{"prefix":"FCNPC_SetWeaponShootTime","body":"FCNPC_SetWeaponShootTime(${1:npcid}, ${2:weaponid}, ${3:time})$0"},"FCNPC_GetWeaponShootTime":{"prefix":"FCNPC_GetWeaponShootTime","body":"FCNPC_GetWeaponShootTime(${1:npcid}, ${2:weaponid})$0"},"FCNPC_SetWeaponClipSize":{"prefix":"FCNPC_SetWeaponClipSize","body":"FCNPC_SetWeaponClipSize(${1:npcid}, ${2:weaponid}, ${3:size})$0"},"FCNPC_GetWeaponClipSize":{"prefix":"FCNPC_GetWeaponClipSize","body":"FCNPC_GetWeaponClipSize(${1:npcid}, ${2:weaponid})$0"},"FCNPC_SetWeaponAccuracy":{"prefix":"FCNPC_SetWeaponAccuracy","body":"FCNPC_SetWeaponAccuracy(${1:npcid}, ${2:weaponid}, ${3:Float:accuracy})$0"},"FCNPC_GetWeaponAccuracy":{"prefix":"FCNPC_GetWeaponAccuracy","body":"FCNPC_GetWeaponAccuracy(${1:npcid}, ${2:weaponid})$0"},"FCNPC_SetWeaponInfo":{"prefix":"FCNPC_SetWeaponInfo","body":"FCNPC_SetWeaponInfo(${1:npcid}, ${2:weaponid}, ${3:reload_time = -1}, ${4:shoot_time = -1}, ${5:clip_size = -1}, ${6:Float:accuracy = 1.0})$0"},"FCNPC_GetWeaponInfo":{"prefix":"FCNPC_GetWeaponInfo","body":"FCNPC_GetWeaponInfo(${1:npcid}, ${2:weaponid}, ${3:reload_time = -1}, ${4:shoot_time = -1}, ${5:clip_size = -1}, ${6:Float:accuracy = 1.0})$0"},"FCNPC_SetWeaponDefaultInfo":{"prefix":"FCNPC_SetWeaponDefaultInfo","body":"FCNPC_SetWeaponDefaultInfo(${1:weaponid}, ${2:reload_time = -1}, ${3:shoot_time = -1}, ${4:clip_size = -1}, ${5:Float:accuracy = 1.0})$0"},"FCNPC_GetWeaponDefaultInfo":{"prefix":"FCNPC_GetWeaponDefaultInfo","body":"FCNPC_GetWeaponDefaultInfo(${1:weaponid}, ${2:reload_time = -1}, ${3:shoot_time = -1}, ${4:clip_size = -1}, ${5:Float:accuracy = 1.0})$0"},"FCNPC_SetKeys":{"prefix":"FCNPC_SetKeys","body":"FCNPC_SetKeys(${1:npcid}, ${2:ud_analog}, ${3:lr_analog}, ${4:keys})$0"},"FCNPC_GetKeys":{"prefix":"FCNPC_GetKeys","body":"FCNPC_GetKeys(${1:npcid}, ${2:ud_analog}, ${3:lr_analog}, ${4:keys})$0"},"FCNPC_SetSpecialAction":{"prefix":"FCNPC_SetSpecialAction","body":"FCNPC_SetSpecialAction(${1:npcid}, ${2:actionid})$0"},"FCNPC_GetSpecialAction":{"prefix":"FCNPC_GetSpecialAction","body":"FCNPC_GetSpecialAction(${1:npcid})$0"},"FCNPC_SetAnimation":{"prefix":"FCNPC_SetAnimation","body":"FCNPC_SetAnimation(${1:npcid}, ${2:animationid}, ${3:Float:fDelta = 4.1}, ${4:loop = 0}, ${5:lockx = 1}, ${6:locky = 1}, ${7:freeze = 0}, ${8:time = 1})$0"},"FCNPC_SetAnimationByName":{"prefix":"FCNPC_SetAnimationByName","body":"FCNPC_SetAnimationByName(${1:npcid}, ${2:name[]}, ${3:Float:fDelta = 4.1}, ${4:loop = 0}, ${5:lockx = 1}, ${6:locky = 1}, ${7:freeze = 0}, ${8:time = 1})$0"},"FCNPC_ResetAnimation":{"prefix":"FCNPC_ResetAnimation","body":"FCNPC_ResetAnimation(${1:npcid})$0"},"FCNPC_GetAnimation":{"prefix":"FCNPC_GetAnimation","body":"FCNPC_GetAnimation(${1:npcid}, ${2:animationid = 0}, ${3:Float:fDelta = 4.1}, ${4:loop = 0}, ${5:lockx = 1}, ${6:locky = 1}, ${7:freeze = 0}, ${8:time = 1})$0"},"FCNPC_ApplyAnimation":{"prefix":"FCNPC_ApplyAnimation","body":"FCNPC_ApplyAnimation(${1:npcid}, ${2:animlib[]}, ${3:animname[]}, ${4:Float:fDelta = 4.1}, ${5:loop = 0}, ${6:lockx = 1}, ${7:locky = 1}, ${8:freeze = 0}, ${9:time = 1})$0"},"FCNPC_ClearAnimations":{"prefix":"FCNPC_ClearAnimations","body":"FCNPC_ClearAnimations(${1:npcid})$0"},"FCNPC_SetFightingStyle":{"prefix":"FCNPC_SetFightingStyle","body":"FCNPC_SetFightingStyle(${1:npcid}, ${2:style})$0"},"FCNPC_GetFightingStyle":{"prefix":"FCNPC_GetFightingStyle","body":"FCNPC_GetFightingStyle(${1:npcid})$0"},"FCNPC_ToggleReloading":{"prefix":"FCNPC_ToggleReloading","body":"FCNPC_ToggleReloading(${1:npcid}, ${2:bool:toggle})$0"},"FCNPC_ToggleInfiniteAmmo":{"prefix":"FCNPC_ToggleInfiniteAmmo","body":"FCNPC_ToggleInfiniteAmmo(${1:npcid}, ${2:bool:toggle})$0"},"FCNPC_GoTo":{"prefix":"FCNPC_GoTo","body":"FCNPC_GoTo(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:type = MOVE_TYPE_AUTO}, ${6:Float:speed = MOVE_SPEED_AUTO}, ${7:bool:UseMapAndreas = false}, ${8:Float:radius = 0.0}, ${9:bool:setangle = true})$0"},"FCNPC_GoToPlayer":{"prefix":"FCNPC_GoToPlayer","body":"FCNPC_GoToPlayer(${1:npcid}, ${2:playerid}, ${3:type = MOVE_TYPE_AUTO}, ${4:Float:speed = MOVE_SPEED_AUTO}, ${5:bool:UseMapAndreas = false}, ${6:Float:radius = 0.0}, ${7:bool:setangle = true})$0"},"FCNPC_Stop":{"prefix":"FCNPC_Stop","body":"FCNPC_Stop(${1:npcid})$0"},"FCNPC_IsMoving":{"prefix":"FCNPC_IsMoving","body":"FCNPC_IsMoving(${1:npcid})$0"},"FCNPC_IsMovingAtPlayer":{"prefix":"FCNPC_IsMovingAtPlayer","body":"FCNPC_IsMovingAtPlayer(${1:npcid}, ${2:playerid})$0"},"FCNPC_AimAt":{"prefix":"FCNPC_AimAt","body":"FCNPC_AimAt(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:bool:shoot = false}, ${6:shoot_delay = -1}, ${7:bool:setangle = true})$0"},"FCNPC_AimAtPlayer":{"prefix":"FCNPC_AimAtPlayer","body":"FCNPC_AimAtPlayer(${1:npcid}, ${2:playerid}, ${3:bool:shoot = false}, ${4:shoot_delay = -1}, ${5:bool:setangle = true})$0"},"FCNPC_StopAim":{"prefix":"FCNPC_StopAim","body":"FCNPC_StopAim(${1:npcid})$0"},"FCNPC_MeleeAttack":{"prefix":"FCNPC_MeleeAttack","body":"FCNPC_MeleeAttack(${1:npcid}, ${2:delay = -1}, ${3:bool:fightstyle = false})$0"},"FCNPC_StopAttack":{"prefix":"FCNPC_StopAttack","body":"FCNPC_StopAttack(${1:npcid})$0"},"FCNPC_IsAttacking":{"prefix":"FCNPC_IsAttacking","body":"FCNPC_IsAttacking(${1:npcid})$0"},"FCNPC_IsAiming":{"prefix":"FCNPC_IsAiming","body":"FCNPC_IsAiming(${1:npcid})$0"},"FCNPC_IsAimingAtPlayer":{"prefix":"FCNPC_IsAimingAtPlayer","body":"FCNPC_IsAimingAtPlayer(${1:npcid}, ${2:playerid})$0"},"FCNPC_IsShooting":{"prefix":"FCNPC_IsShooting","body":"FCNPC_IsShooting(${1:npcid})$0"},"FCNPC_IsReloading":{"prefix":"FCNPC_IsReloading","body":"FCNPC_IsReloading(${1:npcid})$0"},"FCNPC_EnterVehicle":{"prefix":"FCNPC_EnterVehicle","body":"FCNPC_EnterVehicle(${1:npcid}, ${2:vehicleid}, ${3:seatid}, ${4:type = MOVE_TYPE_WALK})$0"},"FCNPC_ExitVehicle":{"prefix":"FCNPC_ExitVehicle","body":"FCNPC_ExitVehicle(${1:npcid})$0"},"FCNPC_PutInVehicle":{"prefix":"FCNPC_PutInVehicle","body":"FCNPC_PutInVehicle(${1:npcid}, ${2:vehicleid}, ${3:seatid})$0"},"FCNPC_RemoveFromVehicle":{"prefix":"FCNPC_RemoveFromVehicle","body":"FCNPC_RemoveFromVehicle(${1:npcid})$0"},"FCNPC_GetVehicleID":{"prefix":"FCNPC_GetVehicleID","body":"FCNPC_GetVehicleID(${1:npcid})$0"},"FCNPC_GetVehicleSeat":{"prefix":"FCNPC_GetVehicleSeat","body":"FCNPC_GetVehicleSeat(${1:npcid})$0"},"FCNPC_SetVehicleSiren":{"prefix":"FCNPC_SetVehicleSiren","body":"FCNPC_SetVehicleSiren(${1:npcid}, ${2:bool:status})$0"},"FCNPC_IsVehicleSiren":{"prefix":"FCNPC_IsVehicleSiren","body":"FCNPC_IsVehicleSiren(${1:npcid})$0"},"FCNPC_SetVehicleHealth":{"prefix":"FCNPC_SetVehicleHealth","body":"FCNPC_SetVehicleHealth(${1:npcid}, ${2:Float:health})$0"},"FCNPC_GetVehicleHealth":{"prefix":"FCNPC_GetVehicleHealth","body":"FCNPC_GetVehicleHealth(${1:npcid})$0"},"FCNPC_SetVehicleHydraThrusters":{"prefix":"FCNPC_SetVehicleHydraThrusters","body":"FCNPC_SetVehicleHydraThrusters(${1:npcid}, ${2:direction})$0"},"FCNPC_GetVehicleHydraThrusters":{"prefix":"FCNPC_GetVehicleHydraThrusters","body":"FCNPC_GetVehicleHydraThrusters(${1:npcid})$0"},"FCNPC_SetVehicleGearState":{"prefix":"FCNPC_SetVehicleGearState","body":"FCNPC_SetVehicleGearState(${1:npcid}, ${2:gear_state})$0"},"FCNPC_GetVehicleGearState":{"prefix":"FCNPC_GetVehicleGearState","body":"FCNPC_GetVehicleGearState(${1:npcid})$0"},"FCNPC_SetSurfingOffsets":{"prefix":"FCNPC_SetSurfingOffsets","body":"FCNPC_SetSurfingOffsets(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_GiveSurfingOffsets":{"prefix":"FCNPC_GiveSurfingOffsets","body":"FCNPC_GiveSurfingOffsets(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_GetSurfingOffsets":{"prefix":"FCNPC_GetSurfingOffsets","body":"FCNPC_GetSurfingOffsets(${1:npcid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_SetSurfingVehicle":{"prefix":"FCNPC_SetSurfingVehicle","body":"FCNPC_SetSurfingVehicle(${1:npcid}, ${2:vehicleid})$0"},"FCNPC_GetSurfingVehicle":{"prefix":"FCNPC_GetSurfingVehicle","body":"FCNPC_GetSurfingVehicle(${1:npcid})$0"},"FCNPC_SetSurfingObject":{"prefix":"FCNPC_SetSurfingObject","body":"FCNPC_SetSurfingObject(${1:npcid}, ${2:objectid})$0"},"FCNPC_GetSurfingObject":{"prefix":"FCNPC_GetSurfingObject","body":"FCNPC_GetSurfingObject(${1:npcid})$0"},"FCNPC_SetSurfingPlayerObject":{"prefix":"FCNPC_SetSurfingPlayerObject","body":"FCNPC_SetSurfingPlayerObject(${1:npcid}, ${2:objectid})$0"},"FCNPC_GetSurfingPlayerObject":{"prefix":"FCNPC_GetSurfingPlayerObject","body":"FCNPC_GetSurfingPlayerObject(${1:npcid})$0"},"FCNPC_StopSurfing":{"prefix":"FCNPC_StopSurfing","body":"FCNPC_StopSurfing(${1:npcid})$0"},"FCNPC_StartPlayingPlayback":{"prefix":"FCNPC_StartPlayingPlayback","body":"FCNPC_StartPlayingPlayback(${1:npcid}, ${2:file[] = \"\"}, ${3:recordid = INVALID_RECORD_ID}, ${4:bool:auto_unload = false})$0"},"FCNPC_StopPlayingPlayback":{"prefix":"FCNPC_StopPlayingPlayback","body":"FCNPC_StopPlayingPlayback(${1:npcid})$0"},"FCNPC_PausePlayingPlayback":{"prefix":"FCNPC_PausePlayingPlayback","body":"FCNPC_PausePlayingPlayback(${1:npcid})$0"},"FCNPC_ResumePlayingPlayback":{"prefix":"FCNPC_ResumePlayingPlayback","body":"FCNPC_ResumePlayingPlayback(${1:npcid})$0"},"FCNPC_LoadPlayingPlayback":{"prefix":"FCNPC_LoadPlayingPlayback","body":"FCNPC_LoadPlayingPlayback(${1:file[]})$0"},"FCNPC_UnloadPlayingPlayback":{"prefix":"FCNPC_UnloadPlayingPlayback","body":"FCNPC_UnloadPlayingPlayback(${1:recordid})$0"},"FCNPC_SetPlayingPlaybackPath":{"prefix":"FCNPC_SetPlayingPlaybackPath","body":"FCNPC_SetPlayingPlaybackPath(${1:npcid}, ${2:path[]})$0"},"FCNPC_GetPlayingPlaybackPath":{"prefix":"FCNPC_GetPlayingPlaybackPath","body":"FCNPC_GetPlayingPlaybackPath(${1:npcid}, ${2:path[]}, ${3:const size = sizeof(path})$0"},"FCNPC_OpenNode":{"prefix":"FCNPC_OpenNode","body":"FCNPC_OpenNode(${1:nodeid})$0"},"FCNPC_CloseNode":{"prefix":"FCNPC_CloseNode","body":"FCNPC_CloseNode(${1:nodeid})$0"},"FCNPC_IsNodeOpen":{"prefix":"FCNPC_IsNodeOpen","body":"FCNPC_IsNodeOpen(${1:nodeid})$0"},"FCNPC_GetNodeType":{"prefix":"FCNPC_GetNodeType","body":"FCNPC_GetNodeType(${1:nodeid})$0"},"FCNPC_SetNodePoint":{"prefix":"FCNPC_SetNodePoint","body":"FCNPC_SetNodePoint(${1:nodeid}, ${2:point})$0"},"FCNPC_GetNodePointPosition":{"prefix":"FCNPC_GetNodePointPosition","body":"FCNPC_GetNodePointPosition(${1:nodeid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_GetNodePointCount":{"prefix":"FCNPC_GetNodePointCount","body":"FCNPC_GetNodePointCount(${1:nodeid})$0"},"FCNPC_GetNodeInfo":{"prefix":"FCNPC_GetNodeInfo","body":"FCNPC_GetNodeInfo(${1:nodeid}, ${2:vehnodes}, ${3:pednodes}, ${4:navinode})$0"},"FCNPC_PlayNode":{"prefix":"FCNPC_PlayNode","body":"FCNPC_PlayNode(${1:npcid}, ${2:nodeid}, ${3:type})$0"},"FCNPC_StopPlayingNode":{"prefix":"FCNPC_StopPlayingNode","body":"FCNPC_StopPlayingNode(${1:npcid})$0"},"FCNPC_CreateMovePath":{"prefix":"FCNPC_CreateMovePath","body":"FCNPC_CreateMovePath()$0"},"FCNPC_DestroyMovePath":{"prefix":"FCNPC_DestroyMovePath","body":"FCNPC_DestroyMovePath(${1:pathid})$0"},"FCNPC_IsValidMovePath":{"prefix":"FCNPC_IsValidMovePath","body":"FCNPC_IsValidMovePath(${1:pathid})$0"},"FCNPC_AddPointToPath":{"prefix":"FCNPC_AddPointToPath","body":"FCNPC_AddPointToPath(${1:pathid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"FCNPC_AddPointsToPath":{"prefix":"FCNPC_AddPointsToPath","body":"FCNPC_AddPointsToPath(${1:pathid}, ${2:Float:points[][3]}, ${3:const size = sizeof(points})$0"},"FCNPC_RemovePointFromPath":{"prefix":"FCNPC_RemovePointFromPath","body":"FCNPC_RemovePointFromPath(${1:pathid}, ${2:pointid})$0"},"FCNPC_IsValidMovePoint":{"prefix":"FCNPC_IsValidMovePoint","body":"FCNPC_IsValidMovePoint(${1:pathid}, ${2:pointid})$0"},"FCNPC_GetMovePoint":{"prefix":"FCNPC_GetMovePoint","body":"FCNPC_GetMovePoint(${1:pathid}, ${2:pointid}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"FCNPC_GetNumberMovePoint":{"prefix":"FCNPC_GetNumberMovePoint","body":"FCNPC_GetNumberMovePoint(${1:pathid})$0"},"FCNPC_GoByMovePath":{"prefix":"FCNPC_GoByMovePath","body":"FCNPC_GoByMovePath(${1:npcid}, ${2:pathid}, ${3:type = MOVE_TYPE_AUTO}, ${4:Float:speed = MOVE_SPEED_AUTO}, ${5:bool:UseMapAndreas = false}, ${6:Float:radius = 0.0}, ${7:bool:setangle = true})$0"},"orm_create":{"prefix":"orm_create","body":"orm_create(${1:const table[]}, ${2:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"},"orm_destroy":{"prefix":"orm_destroy","body":"orm_destroy(${1:ORM:id})$0"},"orm_errno":{"prefix":"orm_errno","body":"orm_errno(${1:ORM:id})$0"},"orm_apply_cache":{"prefix":"orm_apply_cache","body":"orm_apply_cache(${1:ORM:id}, ${2:row_idx}, ${3:result_idx = 0})$0"},"orm_select":{"prefix":"orm_select","body":"orm_select(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_select_inline":{"prefix":"orm_select_inline","body":"orm_select_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_update":{"prefix":"orm_update","body":"orm_update(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_update_inline":{"prefix":"orm_update_inline","body":"orm_update_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_insert":{"prefix":"orm_insert","body":"orm_insert(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_insert_inline":{"prefix":"orm_insert_inline","body":"orm_insert_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_delete":{"prefix":"orm_delete","body":"orm_delete(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_delete_inline":{"prefix":"orm_delete_inline","body":"orm_delete_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_load":{"prefix":"orm_load","body":"orm_load(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_load_inline":{"prefix":"orm_load_inline","body":"orm_load_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_save":{"prefix":"orm_save","body":"orm_save(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_save_inline":{"prefix":"orm_save_inline","body":"orm_save_inline(${1:ORM:id}, ${2:callback:Callback}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})$0"},"orm_addvar_int":{"prefix":"orm_addvar_int","body":"orm_addvar_int(${1:ORM:id}, ${2:var}, ${3:const columnname[]})$0"},"orm_addvar_float":{"prefix":"orm_addvar_float","body":"orm_addvar_float(${1:ORM:id}, ${2:Float:var}, ${3:const columnname[]})$0"},"orm_addvar_string":{"prefix":"orm_addvar_string","body":"orm_addvar_string(${1:ORM:id}, ${2:var[]}, ${3:var_maxlen}, ${4:const columnname[]})$0"},"orm_clear_vars":{"prefix":"orm_clear_vars","body":"orm_clear_vars(${1:ORM:id})$0"},"orm_delvar":{"prefix":"orm_delvar","body":"orm_delvar(${1:ORM:id}, ${2:const columnname[]})$0"},"orm_setkey":{"prefix":"orm_setkey","body":"orm_setkey(${1:ORM:id}, ${2:const columnname[]})$0"},"mysql_log":{"prefix":"mysql_log","body":"mysql_log(${1:E_LOGLEVEL:loglevel = ERROR | WARNING})$0"},"mysql_connect":{"prefix":"mysql_connect","body":"mysql_connect(${1:const host[]}, ${2:const user[]}, ${3:const password[]}, ${4:const database[]}, ${5:MySQLOpt:option_id = MySQLOpt:0})$0"},"mysql_connect_file":{"prefix":"mysql_connect_file","body":"mysql_connect_file(${1:const file_name[] = \"mysql.ini\"})$0"},"mysql_close":{"prefix":"mysql_close","body":"mysql_close(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"},"mysql_unprocessed_queries":{"prefix":"mysql_unprocessed_queries","body":"mysql_unprocessed_queries(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"},"mysql_global_options":{"prefix":"mysql_global_options","body":"mysql_global_options(${1:E_MYSQL_GLOBAL_OPTION:type}, ${2:value})$0"},"mysql_init_options":{"prefix":"mysql_init_options","body":"mysql_init_options()$0"},"mysql_set_option":{"prefix":"mysql_set_option","body":"mysql_set_option(${1:MySQLOpt:option_id}, ${2:E_MYSQL_OPTION:type}, ${3:{Float, _}:...})$0"},"mysql_pquery_inline":{"prefix":"mysql_pquery_inline","body":"mysql_pquery_inline(${1:MySQL:handle}, ${2:const query[]}, ${3:callback:Callback}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"},"mysql_pquery":{"prefix":"mysql_pquery","body":"mysql_pquery(${1:MySQL:handle}, ${2:const query[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"},"mysql_tquery":{"prefix":"mysql_tquery","body":"mysql_tquery(${1:MySQL:handle}, ${2:const query[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"},"mysql_tquery_inline":{"prefix":"mysql_tquery_inline","body":"mysql_tquery_inline(${1:MySQL:handle}, ${2:const query[]}, ${3:callback:Callback}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"},"mysql_query":{"prefix":"mysql_query","body":"mysql_query(${1:MySQL:handle}, ${2:const query[]}, ${3:bool:use_cache = true})$0"},"mysql_tquery_file":{"prefix":"mysql_tquery_file","body":"mysql_tquery_file(${1:MySQL:handle}, ${2:const file_path[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})$0"},"mysql_query_file":{"prefix":"mysql_query_file","body":"mysql_query_file(${1:MySQL:handle}, ${2:const file_path[]}, ${3:bool:use_cache = false})$0"},"mysql_errno":{"prefix":"mysql_errno","body":"mysql_errno(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"},"mysql_error":{"prefix":"mysql_error","body":"mysql_error(${1:destination[]}, ${2:max_len = sizeof(destination})$0"},"mysql_escape_string":{"prefix":"mysql_escape_string","body":"mysql_escape_string(${1:const source[]}, ${2:destination[]}, ${3:max_len = sizeof(destination})$0"},"mysql_format":{"prefix":"mysql_format","body":"mysql_format(${1:MySQL:handle}, ${2:output[]}, ${3:max_len}, ${4:const format[]}, ${5:{Float, _}:...})$0"},"mysql_set_charset":{"prefix":"mysql_set_charset","body":"mysql_set_charset(${1:const charset[]}, ${2:MySQL:handle = MYSQL_DEFAULT_HANDLE})$0"},"mysql_get_charset":{"prefix":"mysql_get_charset","body":"mysql_get_charset(${1:destination[]}, ${2:max_len = sizeof(destination})$0"},"mysql_stat":{"prefix":"mysql_stat","body":"mysql_stat(${1:destination[]}, ${2:max_len = sizeof(destination})$0"},"cache_num_rows":{"prefix":"cache_num_rows","body":"cache_num_rows()$0"},"cache_num_fields":{"prefix":"cache_num_fields","body":"cache_num_fields()$0"},"cache_num_results":{"prefix":"cache_num_results","body":"cache_num_results()$0"},"cache_get_row_count":{"prefix":"cache_get_row_count","body":"cache_get_row_count(${1:destination})$0"},"cache_get_field_count":{"prefix":"cache_get_field_count","body":"cache_get_field_count(${1:destination})$0"},"cache_get_result_count":{"prefix":"cache_get_result_count","body":"cache_get_result_count(${1:destination})$0"},"cache_get_field_name":{"prefix":"cache_get_field_name","body":"cache_get_field_name(${1:field_index}, ${2:destination[]}, ${3:max_len = sizeof(destination})$0"},"cache_get_field_type":{"prefix":"cache_get_field_type","body":"cache_get_field_type(${1:field_index})$0"},"cache_set_result":{"prefix":"cache_set_result","body":"cache_set_result(${1:result_index})$0"},"cache_get_value_index":{"prefix":"cache_get_value_index","body":"cache_get_value_index(${1:row_idx}, ${2:column_idx}, ${3:destination[]}, ${4:max_len = sizeof(destination)})$0"},"cache_get_value_index_int":{"prefix":"cache_get_value_index_int","body":"cache_get_value_index_int(${1:row_idx}, ${2:column_idx}, ${3:destination})$0"},"cache_get_value_index_bool":{"prefix":"cache_get_value_index_bool","body":"cache_get_value_index_bool(${1:row_idx}, ${2:column_idx}, ${3:&bool:destination})$0"},"cache_get_value_index_float":{"prefix":"cache_get_value_index_float","body":"cache_get_value_index_float(${1:row_idx}, ${2:column_idx}, ${3:Float:destination})$0"},"cache_is_value_index_null":{"prefix":"cache_is_value_index_null","body":"cache_is_value_index_null(${1:row_idx}, ${2:column_idx}, ${3:bool:destination})$0"},"cache_get_value_name":{"prefix":"cache_get_value_name","body":"cache_get_value_name(${1:row_idx}, ${2:const column_name[]}, ${3:destination[]}, ${4:max_len = sizeof(destination})$0"},"cache_get_value_name_int":{"prefix":"cache_get_value_name_int","body":"cache_get_value_name_int(${1:row_idx}, ${2:const column_name[]}, ${3:destination})$0"},"cache_get_value_name_bool":{"prefix":"cache_get_value_name_bool","body":"cache_get_value_name_bool(${1:row_idx}, ${2:column_name[]}, ${3:&bool:destination})$0"},"cache_get_value_name_float":{"prefix":"cache_get_value_name_float","body":"cache_get_value_name_float(${1:row_idx}, ${2:const column_name[]}, ${3:Float:destination})$0"},"cache_is_value_name_null":{"prefix":"cache_is_value_name_null","body":"cache_is_value_name_null(${1:row_idx}, ${2:const column_name[]}, ${3:bool:destination})$0"},"cache_save":{"prefix":"cache_save","body":"cache_save()$0"},"cache_delete":{"prefix":"cache_delete","body":"cache_delete(${1:Cache:cache_id})$0"},"cache_set_active":{"prefix":"cache_set_active","body":"cache_set_active(${1:Cache:cache_id})$0"},"cache_unset_active":{"prefix":"cache_unset_active","body":"cache_unset_active()$0"},"cache_is_any_active":{"prefix":"cache_is_any_active","body":"cache_is_any_active()$0"},"cache_is_valid":{"prefix":"cache_is_valid","body":"cache_is_valid(${1:Cache:cache_id})$0"},"cache_affected_rows":{"prefix":"cache_affected_rows","body":"cache_affected_rows()$0"},"cache_insert_id":{"prefix":"cache_insert_id","body":"cache_insert_id()$0"},"cache_warning_count":{"prefix":"cache_warning_count","body":"cache_warning_count()$0"},"cache_get_query_exec_time":{"prefix":"cache_get_query_exec_time","body":"cache_get_query_exec_time(${1:E_MYSQL_EXECTIME_UNIT:unit = MICROSECONDS})$0"},"cache_get_query_string":{"prefix":"cache_get_query_string","body":"cache_get_query_string(${1:destination[]}, ${2:max_len = sizeof(destination})$0"},"OnQueryError":{"prefix":"OnQueryError","body":"OnQueryError(${1:errorid}, ${2:const error[]}, ${3:const callback[]}, ${4:const query[]}, ${5:MySQL:handle})$0"},"CA_Init":{"prefix":"CA_Init","body":"CA_Init()$0"},"CA_RemoveBuilding":{"prefix":"CA_RemoveBuilding","body":"CA_RemoveBuilding(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:radius})$0"},"CA_RayCastLine":{"prefix":"CA_RayCastLine","body":"CA_RayCastLine(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z})$0"},"CA_RayCastLineID":{"prefix":"CA_RayCastLineID","body":"CA_RayCastLineID(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z})$0"},"CA_RayCastLineExtraID":{"prefix":"CA_RayCastLineExtraID","body":"CA_RayCastLineExtraID(${1:type}, ${2:Float:StartX}, ${3:Float:StartY}, ${4:Float:StartZ}, ${5:Float:EndX}, ${6:Float:EndY}, ${7:Float:EndZ}, ${8:Float:x}, ${9:Float:y}, ${10:Float:z})$0"},"CA_RayCastMultiLine":{"prefix":"CA_RayCastMultiLine","body":"CA_RayCastMultiLine(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:retx[]}, ${8:Float:rety[]}, ${9:Float:retz[]}, ${10:Float:retdist[]}, ${11:ModelIDs[]}, ${12:size = sizeof(retx})$0"},"CA_RayCastLineAngle":{"prefix":"CA_RayCastLineAngle","body":"CA_RayCastLineAngle(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:rx}, ${11:Float:ry}, ${12:Float:rz})$0"},"CA_RayCastReflectionVector":{"prefix":"CA_RayCastReflectionVector","body":"CA_RayCastReflectionVector(${1:Float:startx}, ${2:Float:starty}, ${3:Float:startz}, ${4:Float:endx}, ${5:Float:endy}, ${6:Float:endz}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:nx}, ${11:Float:ny}, ${12:Float:nz})$0"},"CA_RayCastLineNormal":{"prefix":"CA_RayCastLineNormal","body":"CA_RayCastLineNormal(${1:Float:startx}, ${2:Float:starty}, ${3:Float:startz}, ${4:Float:endx}, ${5:Float:endy}, ${6:Float:endz}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:nx}, ${11:Float:ny}, ${12:Float:nz})$0"},"CA_ContactTest":{"prefix":"CA_ContactTest","body":"CA_ContactTest(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz})$0"},"CA_EulerToQuat":{"prefix":"CA_EulerToQuat","body":"CA_EulerToQuat(${1:Float:rx}, ${2:Float:ry}, ${3:Float:rz}, ${4:Float:x}, ${5:Float:y}, ${6:Float:z}, ${7:Float:w})$0"},"CA_QuatToEuler":{"prefix":"CA_QuatToEuler","body":"CA_QuatToEuler(${1:Float:x}, ${2:Float:y}, ${3:Float:z}, ${4:Float:w}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz})$0"},"CA_GetModelBoundingSphere":{"prefix":"CA_GetModelBoundingSphere","body":"CA_GetModelBoundingSphere(${1:modelid}, ${2:Float:offx}, ${3:Float:offy}, ${4:Float:offz}, ${5:Float:radius})$0"},"CA_GetModelBoundingBox":{"prefix":"CA_GetModelBoundingBox","body":"CA_GetModelBoundingBox(${1:modelid}, ${2:Float:minx}, ${3:Float:miny}, ${4:Float:minz}, ${5:Float:maxx}, ${6:Float:maxy}, ${7:Float:maxz})$0"},"CA_SetObjectExtraID":{"prefix":"CA_SetObjectExtraID","body":"CA_SetObjectExtraID(${1:index}, ${2:type}, ${3:data})$0"},"CA_GetObjectExtraID":{"prefix":"CA_GetObjectExtraID","body":"CA_GetObjectExtraID(${1:index}, ${2:type})$0"},"CA_RayCastLineEx":{"prefix":"CA_RayCastLineEx","body":"CA_RayCastLineEx(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:rx}, ${11:Float:ry}, ${12:Float:rz}, ${13:Float:rw}, ${14:Float:cx}, ${15:Float:cy}, ${16:Float:cz})$0"},"CA_RayCastLineAngleEx":{"prefix":"CA_RayCastLineAngleEx","body":"CA_RayCastLineAngleEx(${1:Float:StartX}, ${2:Float:StartY}, ${3:Float:StartZ}, ${4:Float:EndX}, ${5:Float:EndY}, ${6:Float:EndZ}, ${7:Float:x}, ${8:Float:y}, ${9:Float:z}, ${10:Float:rx}, ${11:Float:ry}, ${12:Float:rz}, ${13:Float:ocx}, ${14:Float:ocy}, ${15:Float:ocz}, ${16:Float:orx}, ${17:Float:ory}, ${18:Float:orz})$0"},"CA_CreateObject":{"prefix":"CA_CreateObject","body":"CA_CreateObject(${1:modelid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:rx}, ${6:Float:ry}, ${7:Float:rz}, ${8:bool:add = false})$0"},"CA_DestroyObject":{"prefix":"CA_DestroyObject","body":"CA_DestroyObject(${1:index})$0"},"CA_SetObjectPos":{"prefix":"CA_SetObjectPos","body":"CA_SetObjectPos(${1:index}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"CA_SetObjectRot":{"prefix":"CA_SetObjectRot","body":"CA_SetObjectRot(${1:index}, ${2:Float:rx}, ${3:Float:ry}, ${4:Float:rz})$0"},"CA_OnFilterScriptExit":{"prefix":"CA_OnFilterScriptExit","body":"CA_OnFilterScriptExit()$0"},"CA_OnGameModeExit":{"prefix":"CA_OnGameModeExit","body":"CA_OnGameModeExit()$0"},"heapspace":{"prefix":"heapspace","body":"heapspace()$0"},"funcidx":{"prefix":"funcidx","body":"funcidx(${1:const name[]})$0"},"numargs":{"prefix":"numargs","body":"numargs()$0"},"getarg":{"prefix":"getarg","body":"getarg(${1:arg}, ${2:index=0})$0"},"setarg":{"prefix":"setarg","body":"setarg(${1:arg}, ${2:index=0}, ${3:value})$0"},"tolower":{"prefix":"tolower","body":"tolower(${1:c})$0"},"toupper":{"prefix":"toupper","body":"toupper(${1:c})$0"},"swapchars":{"prefix":"swapchars","body":"swapchars(${1:c})$0"},"random":{"prefix":"random","body":"random(${1:max})$0"},"min":{"prefix":"min","body":"min(${1:value1}, ${2:value2})$0"},"max":{"prefix":"max","body":"max(${1:value1}, ${2:value2})$0"},"clamp":{"prefix":"clamp","body":"clamp(${1:value}, ${2:min=cellmin}, ${3:max=cellmax})$0"},"getproperty":{"prefix":"getproperty","body":"getproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin}, ${4:string[]=\"\"})$0"},"setproperty":{"prefix":"setproperty","body":"setproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin}, ${4:const string[]=\"\"})$0"},"deleteproperty":{"prefix":"deleteproperty","body":"deleteproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin})$0"},"existproperty":{"prefix":"existproperty","body":"existproperty(${1:id=0}, ${2:const name[]=\"\"}, ${3:value=cellmin})$0"},"PrintAmxBacktrace":{"prefix":"PrintAmxBacktrace","body":"PrintAmxBacktrace()$0"},"PrintNativeBacktrace":{"prefix":"PrintNativeBacktrace","body":"PrintNativeBacktrace()$0"},"GetAmxBacktrace":{"prefix":"GetAmxBacktrace","body":"GetAmxBacktrace(${1:string[]}, ${2:size = sizeof(string})$0"},"GetNativeBacktrace":{"prefix":"GetNativeBacktrace","body":"GetNativeBacktrace(${1:string[]}, ${2:size = sizeof(string})$0"},"OnRuntimeError":{"prefix":"OnRuntimeError","body":"OnRuntimeError(${1:code}, ${2:bool:suppress})$0"},"IsCrashDetectPresent":{"prefix":"IsCrashDetectPresent","body":"IsCrashDetectPresent()$0"},"sendstring":{"prefix":"sendstring","body":"sendstring(${1:const message[]}, ${2:const destination[]=\"\"})$0"},"sendpacket":{"prefix":"sendpacket","body":"sendpacket(${1:const packet[]}, ${2:size}, ${3:const destination[]=\"\"})$0"},"listenport":{"prefix":"listenport","body":"listenport(${1:port})$0"},"receivestring":{"prefix":"receivestring","body":"receivestring(${1:const message[]}, ${2:const source[]})$0"},"receivepacket":{"prefix":"receivepacket","body":"receivepacket(${1:const packet[]}, ${2:size}, ${3:const source[]})$0"},"OnDialogPerformed":{"prefix":"OnDialogPerformed","body":"OnDialogPerformed(${1:playerid}, ${2:dialog[]}, ${3:response}, ${4:success})$0"},"Dialog_Opened":{"prefix":"Dialog_Opened","body":"Dialog_Opened(${1:playerid})$0"},"Dialog_Close":{"prefix":"Dialog_Close","body":"Dialog_Close(${1:playerid})$0"},"Dialog_Show":{"prefix":"Dialog_Show","body":"Dialog_Show(${1:playerid}, ${2:function[]}, ${3:style}, ${4:caption[]}, ${5:info[]}, ${6:button1[]}, ${7:button2[]}, ${8:...})$0"},"Dialog":{"prefix":"Dialog","body":"Dialog:${1:name}(${2:params})$0"},"IRC_Connect":{"prefix":"IRC_Connect","body":"IRC_Connect(${1:const server[]}, ${2:port}, ${3:const nickname[]}, ${4:const realname[]}, ${5:const username[]}, ${6:bool:ssl = false}, ${7:const localip[] = \"\"}, ${8:const serverpassword[] = \"\"})$0"},"IRC_Quit":{"prefix":"IRC_Quit","body":"IRC_Quit(${1:botid}, ${2:const message[] = \"\"})$0"},"IRC_JoinChannel":{"prefix":"IRC_JoinChannel","body":"IRC_JoinChannel(${1:botid}, ${2:const channel[]}, ${3:const key[] = \"\"})$0"},"IRC_PartChannel":{"prefix":"IRC_PartChannel","body":"IRC_PartChannel(${1:botid}, ${2:const channel[]}, ${3:const message[] = \"\"})$0"},"IRC_ChangeNick":{"prefix":"IRC_ChangeNick","body":"IRC_ChangeNick(${1:botid}, ${2:const nick[]})$0"},"IRC_SetMode":{"prefix":"IRC_SetMode","body":"IRC_SetMode(${1:botid}, ${2:const target[]}, ${3:const mode[]})$0"},"IRC_Say":{"prefix":"IRC_Say","body":"IRC_Say(${1:botid}, ${2:const target[]}, ${3:const message[]})$0"},"IRC_Notice":{"prefix":"IRC_Notice","body":"IRC_Notice(${1:botid}, ${2:const target[]}, ${3:const message[]})$0"},"IRC_IsUserOnChannel":{"prefix":"IRC_IsUserOnChannel","body":"IRC_IsUserOnChannel(${1:botid}, ${2:const channel[]}, ${3:const user[]})$0"},"IRC_InviteUser":{"prefix":"IRC_InviteUser","body":"IRC_InviteUser(${1:botid}, ${2:const channel[]}, ${3:const user[]})$0"},"IRC_KickUser":{"prefix":"IRC_KickUser","body":"IRC_KickUser(${1:botid}, ${2:const channel[]}, ${3:const user[]}, ${4:const message[] = \"\"})$0"},"IRC_GetUserChannelMode":{"prefix":"IRC_GetUserChannelMode","body":"IRC_GetUserChannelMode(${1:botid}, ${2:const channel[]}, ${3:const user[]}, ${4:dest[]})$0"},"IRC_GetChannelUserList":{"prefix":"IRC_GetChannelUserList","body":"IRC_GetChannelUserList(${1:botid}, ${2:const channel[]}, ${3:dest[]}, ${4:maxlength = sizeof dest})$0"},"IRC_SetChannelTopic":{"prefix":"IRC_SetChannelTopic","body":"IRC_SetChannelTopic(${1:botid}, ${2:const channel[]}, ${3:const topic[]})$0"},"IRC_RequestCTCP":{"prefix":"IRC_RequestCTCP","body":"IRC_RequestCTCP(${1:botid}, ${2:const user[]}, ${3:const message[]})$0"},"IRC_ReplyCTCP":{"prefix":"IRC_ReplyCTCP","body":"IRC_ReplyCTCP(${1:botid}, ${2:const user[]}, ${3:const message[]})$0"},"IRC_SendRaw":{"prefix":"IRC_SendRaw","body":"IRC_SendRaw(${1:botid}, ${2:const message[]})$0"},"IRC_CreateGroup":{"prefix":"IRC_CreateGroup","body":"IRC_CreateGroup()$0"},"IRC_DestroyGroup":{"prefix":"IRC_DestroyGroup","body":"IRC_DestroyGroup(${1:groupid})$0"},"IRC_AddToGroup":{"prefix":"IRC_AddToGroup","body":"IRC_AddToGroup(${1:groupid}, ${2:botid})$0"},"IRC_RemoveFromGroup":{"prefix":"IRC_RemoveFromGroup","body":"IRC_RemoveFromGroup(${1:groupid}, ${2:botid})$0"},"IRC_GroupSay":{"prefix":"IRC_GroupSay","body":"IRC_GroupSay(${1:groupid}, ${2:const target[]}, ${3:const message[]})$0"},"IRC_GroupNotice":{"prefix":"IRC_GroupNotice","body":"IRC_GroupNotice(${1:groupid}, ${2:const target[]}, ${3:const message[]})$0"},"IRC_SetIntData":{"prefix":"IRC_SetIntData","body":"IRC_SetIntData(${1:botid}, ${2:data}, ${3:value})$0"},"IRC_OnConnect":{"prefix":"IRC_OnConnect","body":"IRC_OnConnect(${1:botid}, ${2:ip[]}, ${3:port})$0"},"IRC_OnDisconnect":{"prefix":"IRC_OnDisconnect","body":"IRC_OnDisconnect(${1:botid}, ${2:ip[]}, ${3:port}, ${4:reason[]})$0"},"IRC_OnConnectAttempt":{"prefix":"IRC_OnConnectAttempt","body":"IRC_OnConnectAttempt(${1:botid}, ${2:ip[]}, ${3:port})$0"},"IRC_OnConnectAttemptFail":{"prefix":"IRC_OnConnectAttemptFail","body":"IRC_OnConnectAttemptFail(${1:botid}, ${2:ip[]}, ${3:port}, ${4:reason[]})$0"},"IRC_OnJoinChannel":{"prefix":"IRC_OnJoinChannel","body":"IRC_OnJoinChannel(${1:botid}, ${2:channel[]})$0"},"IRC_OnLeaveChannel":{"prefix":"IRC_OnLeaveChannel","body":"IRC_OnLeaveChannel(${1:botid}, ${2:channel[]}, ${3:message[]})$0"},"IRC_OnInvitedToChannel":{"prefix":"IRC_OnInvitedToChannel","body":"IRC_OnInvitedToChannel(${1:botid}, ${2:channel[]}, ${3:invitinguser[]}, ${4:invitinghost[]})$0"},"IRC_OnKickedFromChannel":{"prefix":"IRC_OnKickedFromChannel","body":"IRC_OnKickedFromChannel(${1:botid}, ${2:channel[]}, ${3:oppeduser[]}, ${4:oppedhost[]}, ${5:message[]})$0"},"IRC_OnUserDisconnect":{"prefix":"IRC_OnUserDisconnect","body":"IRC_OnUserDisconnect(${1:botid}, ${2:user[]}, ${3:host[]}, ${4:message[]})$0"},"IRC_OnUserJoinChannel":{"prefix":"IRC_OnUserJoinChannel","body":"IRC_OnUserJoinChannel(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]})$0"},"IRC_OnUserLeaveChannel":{"prefix":"IRC_OnUserLeaveChannel","body":"IRC_OnUserLeaveChannel(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]}, ${5:message[]})$0"},"IRC_OnUserKickedFromChannel":{"prefix":"IRC_OnUserKickedFromChannel","body":"IRC_OnUserKickedFromChannel(${1:botid}, ${2:channel[]}, ${3:kickeduser[]}, ${4:oppeduser[]}, ${5:oppedhost[]}, ${6:message[]})$0"},"IRC_OnUserNickChange":{"prefix":"IRC_OnUserNickChange","body":"IRC_OnUserNickChange(${1:botid}, ${2:oldnick[]}, ${3:newnick[]}, ${4:host[]})$0"},"IRC_OnUserSetChannelMode":{"prefix":"IRC_OnUserSetChannelMode","body":"IRC_OnUserSetChannelMode(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]}, ${5:mode[]})$0"},"IRC_OnUserSetChannelTopic":{"prefix":"IRC_OnUserSetChannelTopic","body":"IRC_OnUserSetChannelTopic(${1:botid}, ${2:channel[]}, ${3:user[]}, ${4:host[]}, ${5:topic[]})$0"},"IRC_OnUserSay":{"prefix":"IRC_OnUserSay","body":"IRC_OnUserSay(${1:botid}, ${2:recipient[]}, ${3:user[]}, ${4:host[]}, ${5:message[]})$0"},"IRC_OnUserNotice":{"prefix":"IRC_OnUserNotice","body":"IRC_OnUserNotice(${1:botid}, ${2:recipient[]}, ${3:user[]}, ${4:host[]}, ${5:message[]})$0"},"IRC_OnUserRequestCTCP":{"prefix":"IRC_OnUserRequestCTCP","body":"IRC_OnUserRequestCTCP(${1:botid}, ${2:user[]}, ${3:host[]}, ${4:message[]})$0"},"IRC_OnUserReplyCTCP":{"prefix":"IRC_OnUserReplyCTCP","body":"IRC_OnUserReplyCTCP(${1:botid}, ${2:user[]}, ${3:host[]}, ${4:message[]})$0"},"IRC_OnReceiveNumeric":{"prefix":"IRC_OnReceiveNumeric","body":"IRC_OnReceiveNumeric(${1:botid}, ${2:numeric}, ${3:message[]})$0"},"IRC_OnReceiveRaw":{"prefix":"IRC_OnReceiveRaw","body":"IRC_OnReceiveRaw(${1:botid}, ${2:message[]})$0"},"IRC_IsVoice":{"prefix":"IRC_IsVoice","body":"IRC_IsVoice(${1:botid}, ${2:channel[]}, ${3:user[]})$0"},"IRC_IsHalfop":{"prefix":"IRC_IsHalfop","body":"IRC_IsHalfop(${1:botid}, ${2:channel[]}, ${3:user[]})$0"},"IRC_IsOp":{"prefix":"IRC_IsOp","body":"IRC_IsOp(${1:botid}, ${2:channel[]}, ${3:user[]})$0"},"IRC_IsAdmin":{"prefix":"IRC_IsAdmin","body":"IRC_IsAdmin(${1:botid}, ${2:channel[]}, ${3:user[]})$0"},"IRC_IsOwner":{"prefix":"IRC_IsOwner","body":"IRC_IsOwner(${1:botid}, ${2:channel[]}, ${3:user[]})$0"},"mS_GetNumberOfPages":{"prefix":"mS_GetNumberOfPages","body":"mS_GetNumberOfPages(${1:ListID})$0"},"mS_GetNumberOfPagesEx":{"prefix":"mS_GetNumberOfPagesEx","body":"mS_GetNumberOfPagesEx(${1:playerid})$0"},"mS_GetAmountOfListItems":{"prefix":"mS_GetAmountOfListItems","body":"mS_GetAmountOfListItems(${1:ListID})$0"},"mS_GetAmountOfListItemsEx":{"prefix":"mS_GetAmountOfListItemsEx","body":"mS_GetAmountOfListItemsEx(${1:playerid})$0"},"mS_GetPlayerCurrentListID":{"prefix":"mS_GetPlayerCurrentListID","body":"mS_GetPlayerCurrentListID(${1:playerid})$0"},"mS_CreateCurrentPageTextDraw":{"prefix":"mS_CreateCurrentPageTextDraw","body":"mS_CreateCurrentPageTextDraw(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos})$0"},"mS_CreatePlayerDialogButton":{"prefix":"mS_CreatePlayerDialogButton","body":"mS_CreatePlayerDialogButton(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos}, ${4:Float:Width}, ${5:Float:Height}, ${6:button_text[]})$0"},"mS_CreatePlayerHeaderTextDraw":{"prefix":"mS_CreatePlayerHeaderTextDraw","body":"mS_CreatePlayerHeaderTextDraw(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos}, ${4:header_text[]})$0"},"mS_CreatePlayerBGTextDraw":{"prefix":"mS_CreatePlayerBGTextDraw","body":"mS_CreatePlayerBGTextDraw(${1:playerid}, ${2:Float:Xpos}, ${3:Float:Ypos}, ${4:Float:Width}, ${5:Float:Height}, ${6:bgcolor})$0"},"mS_CreateMPTextDraw":{"prefix":"mS_CreateMPTextDraw","body":"mS_CreateMPTextDraw(${1:playerid}, ${2:modelindex}, ${3:Float:Xpos}, ${4:Float:Ypos}, ${5:Float:Xrot}, ${6:Float:Yrot}, ${7:Float:Zrot}, ${8:Float:mZoom}, ${9:Float:width}, ${10:Float:height}, ${11:bgcolor})$0"},"mS_DestroyPlayerMPs":{"prefix":"mS_DestroyPlayerMPs","body":"mS_DestroyPlayerMPs(${1:playerid})$0"},"mS_ShowPlayerMPs":{"prefix":"mS_ShowPlayerMPs","body":"mS_ShowPlayerMPs(${1:playerid})$0"},"mS_UpdatePageTextDraw":{"prefix":"mS_UpdatePageTextDraw","body":"mS_UpdatePageTextDraw(${1:playerid})$0"},"ShowModelSelectionMenu":{"prefix":"ShowModelSelectionMenu","body":"ShowModelSelectionMenu(${1:playerid}, ${2:ListID}, ${3:header_text[]}, ${4:dialogBGcolor = 0x4A5A6BBB}, ${5:previewBGcolor = 0x88888899 }, ${6:tdSelectionColor = 0xFFFF00AA})$0"},"ShowModelSelectionMenuEx":{"prefix":"ShowModelSelectionMenuEx","body":"ShowModelSelectionMenuEx(${1:playerid}, ${2:items_array[]}, ${3:item_amount}, ${4:header_text[]}, ${5:extraid}, ${6:Float:Xrot = 0.0}, ${7:Float:Yrot = 0.0}, ${8:Float:Zrot = 0.0}, ${9:Float:mZoom = 1.0}, ${10:dialogBGcolor = 0x4A5A6BBB}, ${11:previewBGcolor = 0x88888899 }, ${12:tdSelectionColor = 0xFFFF00AA})$0"},"HideModelSelectionMenu":{"prefix":"HideModelSelectionMenu","body":"HideModelSelectionMenu(${1:playerid})$0"},"mS_DestroySelectionMenu":{"prefix":"mS_DestroySelectionMenu","body":"mS_DestroySelectionMenu(${1:playerid})$0"},"SendMail":{"prefix":"SendMail","body":"SendMail(${1:const szReceiver[ ]}, ${2:const szSenderMail[ ]}, ${3:const szSenderName[ ]}, ${4:const szSubject[ ]}, ${5:const szMessage[ ] })$0"},"OnMailScriptResponse":{"prefix":"OnMailScriptResponse","body":"OnMailScriptResponse(${1:iIndex}, ${2:iResponseCode}, ${3:const szData[ ] })$0"},"StringURLEncode":{"prefix":"StringURLEncode","body":"StringURLEncode(${1:szString[ ]}, ${2:iSize = sizeof( szString })$0"},"SortDeepArray":{"prefix":"SortDeepArray","body":"SortDeepArray(${1:array[][]}, ${2:sort_index}, ${3:order = SORT_ASC}, ${4:ignorecase = false})$0"},"pb_percent":{"prefix":"pb_percent","body":"pb_percent(${1:Float:x}, ${2:Float:widthorheight}, ${3:Float:max}, ${4:Float:value}, ${5:direction})$0"},"CreatePlayerProgressBar":{"prefix":"CreatePlayerProgressBar","body":"CreatePlayerProgressBar(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:width = 55.5}, ${5:Float:height = 3.2}, ${6:colour = 0xFF1C1CFF}, ${7:Float:max = 100.0}, ${8:direction = BAR_DIRECTION_RIGHT})$0"},"DestroyPlayerProgressBar":{"prefix":"DestroyPlayerProgressBar","body":"DestroyPlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"},"ShowPlayerProgressBar":{"prefix":"ShowPlayerProgressBar","body":"ShowPlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"},"HidePlayerProgressBar":{"prefix":"HidePlayerProgressBar","body":"HidePlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"},"IsValidPlayerProgressBar":{"prefix":"IsValidPlayerProgressBar","body":"IsValidPlayerProgressBar(${1:playerid}, ${2:PlayerBar:barid})$0"},"GetPlayerProgressBarPos":{"prefix":"GetPlayerProgressBarPos","body":"GetPlayerProgressBarPos(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:x}, ${4:Float:y})$0"},"SetPlayerProgressBarPos":{"prefix":"SetPlayerProgressBarPos","body":"SetPlayerProgressBarPos(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:x}, ${4:Float:y})$0"},"GetPlayerProgressBarWidth":{"prefix":"GetPlayerProgressBarWidth","body":"GetPlayerProgressBarWidth(${1:playerid}, ${2:PlayerBar:barid})$0"},"SetPlayerProgressBarWidth":{"prefix":"SetPlayerProgressBarWidth","body":"SetPlayerProgressBarWidth(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:width})$0"},"GetPlayerProgressBarHeight":{"prefix":"GetPlayerProgressBarHeight","body":"GetPlayerProgressBarHeight(${1:playerid}, ${2:PlayerBar:barid})$0"},"SetPlayerProgressBarHeight":{"prefix":"SetPlayerProgressBarHeight","body":"SetPlayerProgressBarHeight(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:height})$0"},"GetPlayerProgressBarColour":{"prefix":"GetPlayerProgressBarColour","body":"GetPlayerProgressBarColour(${1:playerid}, ${2:PlayerBar:barid})$0"},"SetPlayerProgressBarColour":{"prefix":"SetPlayerProgressBarColour","body":"SetPlayerProgressBarColour(${1:playerid}, ${2:PlayerBar:barid}, ${3:colour})$0"},"GetPlayerProgressBarMaxValue":{"prefix":"GetPlayerProgressBarMaxValue","body":"GetPlayerProgressBarMaxValue(${1:playerid}, ${2:PlayerBar:barid})$0"},"SetPlayerProgressBarMaxValue":{"prefix":"SetPlayerProgressBarMaxValue","body":"SetPlayerProgressBarMaxValue(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:max})$0"},"SetPlayerProgressBarValue":{"prefix":"SetPlayerProgressBarValue","body":"SetPlayerProgressBarValue(${1:playerid}, ${2:PlayerBar:barid}, ${3:Float:value})$0"},"GetPlayerProgressBarValue":{"prefix":"GetPlayerProgressBarValue","body":"GetPlayerProgressBarValue(${1:playerid}, ${2:PlayerBar:barid})$0"},"GetPlayerProgressBarDirection":{"prefix":"GetPlayerProgressBarDirection","body":"GetPlayerProgressBarDirection(${1:playerid}, ${2:PlayerBar:barid})$0"},"SetPlayerProgressBarDirection":{"prefix":"SetPlayerProgressBarDirection","body":"SetPlayerProgressBarDirection(${1:playerid}, ${2:PlayerBar:barid}, ${3:direction})$0"},"y_timers: ptask":{"prefix":"ptask","body":"ptask ${1:name}[${2:delay}](playerid) \n{\n\t${3}\n}$0"},"SmartCMD command":{"prefix":"command","body":"COMMAND$<{2:flags}>:${1:name}(cmdid, playerid, params[]) {\n\t\n\t${4}\n\treturn CMD_SUCCESS;\n}$0"},"DoesCommandExist":{"prefix":"DoesCommandExist","body":"DoesCommandExist(${1:cmdid})$0"},"GetCommandID":{"prefix":"GetCommandID","body":"GetCommandID(${1:const cmd[]})$0"},"GetCommandName":{"prefix":"GetCommandName","body":"GetCommandName(${1:cmdid}, ${2:cmd[]}, ${3:len = sizeof(cmd})$0"},"GetAlternateCommands":{"prefix":"GetAlternateCommands","body":"GetAlternateCommands(${1:cmdid}, ${2:cmdidlist[]})$0"},"IsCommandAlternate":{"prefix":"IsCommandAlternate","body":"IsCommandAlternate(${1:cmdid})$0"},"GetCommandFunctionID":{"prefix":"GetCommandFunctionID","body":"GetCommandFunctionID(${1:cmdid})$0"},"GetPointingCommandFunctionID":{"prefix":"GetPointingCommandFunctionID","body":"GetPointingCommandFunctionID(${1:cmdid})$0"},"GetPointingCommandID":{"prefix":"GetPointingCommandID","body":"GetPointingCommandID(${1:cmdid})$0"},"GetCommandFunctionName":{"prefix":"GetCommandFunctionName","body":"GetCommandFunctionName(${1:cmdid}, ${2:dest[]}, ${3:len = sizeof(dest})$0"},"GetEnabledCommandCount":{"prefix":"GetEnabledCommandCount","body":"GetEnabledCommandCount()$0"},"GetDisabledCommandCount":{"prefix":"GetDisabledCommandCount","body":"GetDisabledCommandCount()$0"},"GetTotalCommandCount":{"prefix":"GetTotalCommandCount","body":"GetTotalCommandCount()$0"},"EnableCommand":{"prefix":"EnableCommand","body":"EnableCommand(${1:cmdid})$0"},"DisableCommand":{"prefix":"DisableCommand","body":"DisableCommand(${1:cmdid})$0"},"IsCommandEnabled":{"prefix":"IsCommandEnabled","body":"IsCommandEnabled(${1:cmdid})$0"},"SetCommandFlags":{"prefix":"SetCommandFlags","body":"SetCommandFlags(${1:cmdid}, ${2:flags})$0"},"GetCommandFlags":{"prefix":"GetCommandFlags","body":"GetCommandFlags(${1:cmdid})$0"},"SetPointingCommandIDToSelf":{"prefix":"SetPointingCommandIDToSelf","body":"SetPointingCommandIDToSelf(${1:cmdid})$0"},"ReassignCommandFunction":{"prefix":"ReassignCommandFunction","body":"ReassignCommandFunction(${1:cmdid}, ${2:const funcname[]}, ${3:bool:updateCID = false}, ${4:bool:updatePFT = false})$0"},"EmulateCommandEx":{"prefix":"EmulateCommandEx","body":"EmulateCommandEx(${1:cmdid}, ${2:playerid}, ${3:params[]})$0"},"EmulateCommand":{"prefix":"EmulateCommand","body":"EmulateCommand(${1:playerid}, ${2:cmdtext[]})$0"},"ExecuteCommand":{"prefix":"ExecuteCommand","body":"ExecuteCommand(${1:const cmd[]}, ${2:command_mode}, ${3:playerid}, ${4:success}, ${5:params[]=\"\"})$0"},"socket_create":{"prefix":"socket_create","body":"socket_create(${1:pType:TCP})$0"},"socket_bind":{"prefix":"socket_bind","body":"socket_bind(${1:Socket:id}, ${2:ip[]})$0"},"socket_connect":{"prefix":"socket_connect","body":"socket_connect(${1:Socket:id}, ${2:host[]}, ${3:port})$0"},"socket_listen":{"prefix":"socket_listen","body":"socket_listen(${1:Socket:id}, ${2:port})$0"},"socket_stop_listen":{"prefix":"socket_stop_listen","body":"socket_stop_listen(${1:Socket:id})$0"},"socket_destroy":{"prefix":"socket_destroy","body":"socket_destroy(${1:Socket:id})$0"},"socket_send":{"prefix":"socket_send","body":"socket_send(${1:Socket:id}, ${2:data[]}, ${3:len})$0"},"socket_sendto":{"prefix":"socket_sendto","body":"socket_sendto(${1:Socket:id}, ${2:const ip[]}, ${3:port}, ${4:data[]}, ${5:len})$0"},"socket_send_array":{"prefix":"socket_send_array","body":"socket_send_array(${1:Socket:id}, ${2:data[]}, ${3:size=sizeof(data})$0"},"is_socket_valid":{"prefix":"is_socket_valid","body":"is_socket_valid(${1:Socket:id})$0"},"socket_set_max_connections":{"prefix":"socket_set_max_connections","body":"socket_set_max_connections(${1:Socket:id}, ${2:max_remote_clients})$0"},"socket_close_remote_client":{"prefix":"socket_close_remote_client","body":"socket_close_remote_client(${1:Socket:id}, ${2:remote_clientid})$0"},"socket_sendto_remote_client":{"prefix":"socket_sendto_remote_client","body":"socket_sendto_remote_client(${1:Socket:id}, ${2:remote_clientid}, ${3:data[]})$0"},"socket_remote_client_connected":{"prefix":"socket_remote_client_connected","body":"socket_remote_client_connected(${1:Socket:id}, ${2:remote_clientid})$0"},"get_remote_client_ip":{"prefix":"get_remote_client_ip","body":"get_remote_client_ip(${1:Socket:id}, ${2:remote_clientid}, ${3:ip[]})$0"},"ssl_init":{"prefix":"ssl_init","body":"ssl_init()$0"},"ssl_create_context":{"prefix":"ssl_create_context","body":"ssl_create_context(${1:Socket:id}, ${2:method})$0"},"ssl_connect":{"prefix":"ssl_connect","body":"ssl_connect(${1:Socket:id})$0"},"ssl_load_cert_into_context":{"prefix":"ssl_load_cert_into_context","body":"ssl_load_cert_into_context(${1:Socket:id}, ${2:const certificate[]}, ${3:const private_key[]})$0"},"ssl_shutdown":{"prefix":"ssl_shutdown","body":"ssl_shutdown(${1:Socket:id})$0"},"ssl_get_peer_certificate":{"prefix":"ssl_get_peer_certificate","body":"ssl_get_peer_certificate(${1:Socket:id}, ${2:method}, ${3:subject[]}, ${4:issuer[]}, ${5:remote_clientid = 0xFFFF})$0"},"ssl_set_accept_timeout":{"prefix":"ssl_set_accept_timeout","body":"ssl_set_accept_timeout(${1:Socket:id}, ${2:interval})$0"},"ssl_set_mode":{"prefix":"ssl_set_mode","body":"ssl_set_mode(${1:Socket:id}, ${2:mode})$0"},"onUDPReceiveData":{"prefix":"onUDPReceiveData","body":"onUDPReceiveData(${1:Socket:id}, ${2:data[]}, ${3:data_len}, ${4:remote_client_ip[]}, ${5:remote_client_port})$0"},"onSocketAnswer":{"prefix":"onSocketAnswer","body":"onSocketAnswer(${1:Socket:id}, ${2:data[]}, ${3:data_len})$0"},"onSocketClose":{"prefix":"onSocketClose","body":"onSocketClose(${1:Socket:id})$0"},"onSocketReceiveData":{"prefix":"onSocketReceiveData","body":"onSocketReceiveData(${1:Socket:id}, ${2:remote_clientid}, ${3:data[]}, ${4:data_len})$0"},"onSocketRemoteConnect":{"prefix":"onSocketRemoteConnect","body":"onSocketRemoteConnect(${1:Socket:id}, ${2:remote_client[]}, ${3:remote_clientid})$0"},"onSocketRemoteDisconnect":{"prefix":"onSocketRemoteDisconnect","body":"onSocketRemoteDisconnect(${1:Socket:id}, ${2:remote_clientid})$0"},"db_query_hook":{"prefix":"db_query_hook","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_query_hook(${1:iTagOf3 = tagof(_bAutoRelease})$0"},"db_escape_string":{"prefix":"db_escape_string","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_escape_string(${1:szString[]}, ${2:szEnclosing[] = \"'\"}, ${3:iSize = sizeof(szString})$0"},"db_is_persistent":{"prefix":"db_is_persistent","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_is_persistent(${1:DB:db})$0"},"db_is_valid_persistent":{"prefix":"db_is_valid_persistent","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_is_valid_persistent(${1:DB:db})$0"},"db_is_table_exists":{"prefix":"db_is_table_exists","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_is_table_exists(${1:DB:db}, ${2:szTable[]})$0"},"db_rewind":{"prefix":"db_rewind","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_rewind(${1:DBResult:dbrResult})$0"},"db_exec":{"prefix":"db_exec","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_exec(${1:DB:db}, ${2:szQuery[]})$0"},"db_insert":{"prefix":"db_insert","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_insert(${1:DB:db}, ${2:szQuery[]})$0"},"db_get_struct_info":{"prefix":"db_get_struct_info","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_get_struct_info(${1:DB:db}, ${2:;_}, ${3:e_SQLITE3}:iOffset})$0"},"db_set_struct_info":{"prefix":"db_set_struct_info","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_set_struct_info(${1:DB:db}, ${2:;_}, ${3:e_SQLITE3}:iOffset}, ${4:iValue})$0"},"db_set_row_index":{"prefix":"db_set_row_index","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_set_row_index(${1:DBResult:dbrResult}, ${2:iRow})$0"},"db_get_row_index":{"prefix":"db_get_row_index","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_get_row_index(${1:DBResult:dbrResult})$0"},"db_open_persistent":{"prefix":"db_open_persistent","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_open_persistent(${1:szName[]})$0"},"db_close_hook":{"prefix":"db_close_hook","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_close_hook(${1:DB:db})$0"},"db_query_int":{"prefix":"db_query_int","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_query_int(${1:DB:db}, ${2:szQuery[]}, ${3:iField = 0})$0"},"db_query_float":{"prefix":"db_query_float","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_query_float(${1:DB:db}, ${2:szQuery[]}, ${3:iField = 0})$0"},"db_is_result_freed":{"prefix":"db_is_result_freed","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_is_result_freed(${1:DBResult:dbrResult})$0"},"db_free_result_hook":{"prefix":"db_free_result_hook","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_free_result_hook(${1:DBResult:dbrResult})$0"},"db_free_persistent":{"prefix":"db_free_persistent","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_free_persistent(${1:DB:db})$0"},"db_changes":{"prefix":"db_changes","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_changes(${1:DB:db})$0"},"db_begin_transaction":{"prefix":"db_begin_transaction","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_begin_transaction(${1:DB:db})$0"},"db_end_transaction":{"prefix":"db_end_transaction","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_end_transaction(${1:DB:db})$0"},"db_set_asynchronous":{"prefix":"db_set_asynchronous","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_set_asynchronous(${1:DB:db}, ${2:bool:bSet = true})$0"},"db_set_synchronous":{"prefix":"db_set_synchronous","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_set_synchronous(${1:DB:db}, ${2:DB::e_SYNCHRONOUS_MODE:iValue})$0"},"db_attach_memory_db":{"prefix":"db_attach_memory_db","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_attach_memory_db(${1:DB:db}, ${2:szName[]})$0"},"db_detach_memory_db":{"prefix":"db_detach_memory_db","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_detach_memory_db(${1:DB:db}, ${2:szName[]})$0"},"db_total_changes":{"prefix":"db_total_changes","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_total_changes(${1:DB:db})$0"},"db_last_insert_rowid":{"prefix":"db_last_insert_rowid","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_last_insert_rowid(${1:DB:db})$0"},"db_field_is_null":{"prefix":"db_field_is_null","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_field_is_null(${1:DBResult:dbrResult}, ${2:iField})$0"},"db_autofree_result":{"prefix":"db_autofree_result","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_autofree_result(${1:DBResult:dbrResult})$0"},"db_prepare":{"prefix":"db_prepare","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_prepare(${1:DB:db}, ${2:szQuery[]})$0"},"stmt_bind_value":{"prefix":"stmt_bind_value","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_bind_value(${1:&DBStatement:stStatement}, ${2:iParam}, ${3:DBDataType:iType}, ${4:;Float}, ${5:_}:...})$0"},"stmt_bind_result_field":{"prefix":"stmt_bind_result_field","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_bind_result_field(${1:&DBStatement:stStatement}, ${2:iField}, ${3:DBDataType:iType}, ${4:;Float}, ${5:_}:...})$0"},"stmt_skip_row":{"prefix":"stmt_skip_row","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_skip_row(${1:&DBStatement:stStatement})$0"},"stmt_fetch_row":{"prefix":"stmt_fetch_row","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_fetch_row(${1:&DBStatement:stStatement})$0"},"stmt_rows_left":{"prefix":"stmt_rows_left","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_rows_left(${1:&DBStatement:stStatement})$0"},"stmt_execute":{"prefix":"stmt_execute","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_execute(${1:&DBStatement:stStatement}, ${2:bool:bStoreResult = true}, ${3:bool:bAutoFreeResult = true})$0"},"stmt_free_result":{"prefix":"stmt_free_result","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_free_result(${1:&DBStatement:stStatement})$0"},"stmt_close":{"prefix":"stmt_close","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_close(${1:&DBStatement:stStatement})$0"},"stmt_autoclose":{"prefix":"stmt_autoclose","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"stmt_autoclose(${1:&DBStatement:stStatement})$0"},"db_get_last_error":{"prefix":"db_get_last_error","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_get_last_error()$0"},"db_get_field_hook":{"prefix":"db_get_field_hook","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_get_field_hook(${1:DBResult:dbresult}, ${2:field}, ${3:result[]}, ${4:maxlength = sizeof(result})$0"},"db_get_field_assoc_hook":{"prefix":"db_get_field_assoc_hook","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_get_field_assoc_hook(${1:DBResult:dbresult}, ${2:field[]}, ${3:result[]}, ${4:maxlength = sizeof(result})$0"},"db_dump_table":{"prefix":"db_dump_table","body":"db_dump_table(${1:DB:db}, ${2:szTable[]}, ${3:szFilename[]})$0"},"db_print_result":{"prefix":"db_print_result","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_print_result(${1:DBResult:dbrResult}, ${2:iMaxFieldLength = 40})$0"},"db_print_query":{"prefix":"db_print_query","description":"Part of the SQLitei(mproved). This is not part from the native sa-mp SQLite implementation.","body":"db_print_query(${1:DB:db}, ${2:szQuery[]}, ${3:iMaxFieldLength = 40})$0"},"sscanf":{"prefix":"sscanf","body":"sscanf(${1:const data[]}, ${2:const format[]}, ${3:...})$0"},"unformat":{"prefix":"unformat","body":"unformat(${1:const data[]}, ${2:const format[]}, ${3:...})$0"},"INI_IsEscapeSequence":{"prefix":"INI_IsEscapeSequence","body":"INI_IsEscapeSequence(${1:str[]}, ${2:pos})$0"},"INI_ReverseWhitespace":{"prefix":"INI_ReverseWhitespace","body":"INI_ReverseWhitespace(${1:str[]}, ${2:pos})$0"},"INI_IdentifyLineType":{"prefix":"INI_IdentifyLineType","body":"INI_IdentifyLineType(${1:str[]}, ${2:p0s}, ${3:p0e}, ${4:p1s}, ${5:p1e}, ${6:p2s}, ${7:p2e}, ${8:cont})$0"},"INI_Open":{"prefix":"INI_Open","body":"INI_Open(${1:filename[]})$0"},"INI_Load":{"prefix":"INI_Load","body":"INI_Load(${1:filename[]}, ${2:bool:bExtra} = false, ${3:extra} = 0, ${4:bool:bLocal} = true)$0"},"INI_Close":{"prefix":"INI_Close","body":"INI_Close(${1:INI:handle})$0"},"INI_DoParentTag":{"prefix":"INI_DoParentTag","body":"INI_DoParentTag(${1:filename[]}, ${2:remoteformat[]}, ${3:bool:bFileFirst}, ${4:bool:bExtra}, ${5:extra}, ${6:bLocal}, ${7:bPassTag}, ${8:bFilter}, ${9:filter})$0"},"INI_SetTag":{"prefix":"INI_SetTag","body":"INI_SetTag(${1:INI:file}, ${2:tag[]})$0"},"INI_DeleteTag":{"prefix":"INI_DeleteTag","body":"INI_DeleteTag(${1:INI:file}, ${2:tag[]})$0"},"INI_ParseFile":{"prefix":"INI_ParseFile","body":"INI_ParseFile(${1:filename[]}, ${2:remoteformat[]}, ${3:bool:bFileFirst}, ${4:bool:bExtra}, ${5:extra}, ${6:bLocal}, ${7:bPassTag}, ${8:bFilter}, ${9:filter})$0"},"INI_AddToBuffer":{"prefix":"INI_AddToBuffer","body":"INI_AddToBuffer(${1:INI:file}, ${2:name[]}, ${3:data[]})$0"},"INI_WriteBuffer":{"prefix":"INI_WriteBuffer","body":"INI_WriteBuffer(${1:INI:file})$0"},"INI_GetEntryText":{"prefix":"INI_GetEntryText","body":"INI_GetEntryText(${1:str[]}, ${2:p0s}, ${3:p0e}, ${4:p1s}, ${5:p1e}, ${6:p2s}, ${7:p2e}, ${8:cont})$0"},"INI_RemoveEntry":{"prefix":"INI_RemoveEntry","body":"INI_RemoveEntry(${1:INI:file}, ${2:name[]})$0"},"INI_FreeEntry":{"prefix":"INI_FreeEntry","body":"INI_FreeEntry(${1:slot})$0"},"INI_TryGetValue":{"prefix":"INI_TryGetValue","body":"INI_TryGetValue(${1:start}, ${2:end})$0"},"INI_WriteInt":{"prefix":"INI_WriteInt","body":"INI_WriteInt(${1:INI:file}, ${2:name[]}, ${3:data})$0"},"INI_Int":{"prefix":"INI_Int","body":"INI_Int(${1:name[]}, ${2:variable})$0"},"INI_WriteFloat":{"prefix":"INI_WriteFloat","body":"INI_WriteFloat(${1:INI:file}, ${2:name[]}, ${3:Float:data})$0"},"INI_Float":{"prefix":"INI_Float","body":"INI_Float(${1:name[]}, ${2:variable})$0"},"INI_WriteHex":{"prefix":"INI_WriteHex","body":"INI_WriteHex(${1:INI:file}, ${2:name[]}, ${3:Float:data})$0"},"INI_Hex":{"prefix":"INI_Hex","body":"INI_Hex(${1:name[]}, ${2:variable})$0"},"INI_WriteString":{"prefix":"INI_WriteString","body":"INI_WriteString(${1:INI:file}, ${2:name[]}, ${3:data[]})$0"},"INI_String":{"prefix":"INI_String","body":"INI_String(${1:name[]}, ${2:variable})$0"},"INI_FindString":{"prefix":"INI_FindString","body":"INI_FindString(${1:str[]}, ${2:sub[]}, ${3:pos})$0"},"INI_WriteBool":{"prefix":"INI_WriteBool","body":"INI_WriteBool(${1:INI:file}, ${2:name[]}, ${3:bool:data})$0"},"INI_Bool":{"prefix":"INI_Bool","body":"INI_Bool(${1:name[]}, ${2:variable})$0"},"INI_WriteBin":{"prefix":"INI_WriteBin","body":"INI_WriteBin(${1:name[]}, ${2:variable}, ${3:data})$0"},"INI_Bin":{"prefix":"INI_Bin","body":"INI_Bin(${1:name[]}, ${2:variable})$0"},"INI_SetupCallbackName":{"prefix":"INI_SetupCallbackName","body":"INI_SetupCallbackName(${1:fmat[]}, ${2:const remoteFormat[]}, ${3:filename[]}, ${4:const bool:bFileFirst})$0"},"INI_GetCallback":{"prefix":"INI_GetCallback","body":"INI_GetCallback(${1:callback[E_CALLBACK_DATA]}, ${2:const format[]}, ${3:tag[]}, ${4:const input[]}, ${5:const len}, ${6:tag[]}, ${7:callbackFormat[]}, ${8:const bool:remote})$0"},"dini_Exists":{"prefix":"dini_Exists","body":"dini_Exists(${1:const filename[]})$0"},"dini_Remove":{"prefix":"dini_Remove","body":"dini_Remove(${1:const filename[]})$0"},"dini_Create":{"prefix":"dini_Create","body":"dini_Create(${1:const filename[]})$0"},"dini_Set":{"prefix":"dini_Set","body":"dini_Set(${1:const filename[]}, ${2:const key[]}, ${3:const value[]})$0"},"dini_IntSet":{"prefix":"dini_IntSet","body":"dini_IntSet(${1:const filename[]}, ${2:const key[]}, ${3:value})$0"},"dini_FloatSet":{"prefix":"dini_FloatSet","body":"dini_FloatSet(${1:const filename[]}, ${2:const key[]}, ${3:Float:value})$0"},"dini_BoolSet":{"prefix":"dini_BoolSet","body":"dini_BoolSet(${1:const filename[]}, ${2:const key[]}, ${3:bool:value})$0"},"dini_Get":{"prefix":"dini_Get","body":"dini_Get(${1:const filename[]}, ${2:const key[]})$0"},"dini_Int":{"prefix":"dini_Int","body":"dini_Int(${1:const filename[]}, ${2:const key[]})$0"},"dini_Float":{"prefix":"dini_Float","body":"dini_Float(${1:const filename[]}, ${2:const key[]})$0"},"dini_Bool":{"prefix":"dini_Bool","body":"dini_Bool(${1:const filename[]}, ${2:const key[]})$0"},"dini_Unset":{"prefix":"dini_Unset","body":"dini_Unset(${1:const filename[]}, ${2:const key[]})$0"},"dini_Isset":{"prefix":"dini_Isset","body":"dini_Isset(${1:const filename[]}, ${2:const key[]})$0"},"DINI_StripNewLine":{"prefix":"DINI_StripNewLine","body":"DINI_StripNewLine(${1:const string[]})$0"},"DINI_fcopytextfile":{"prefix":"DINI_fcopytextfile","body":"DINI_fcopytextfile(${1:const filename[]}, ${2:const newfilename[]})$0"},"dini_Timeout":{"prefix":"DINI_fcopytextfile","body":"DINI_fcopytextfile(${1:const filename[]})$0"},"dini_NumKeys":{"prefix":"dini_NumKeys","body":"dini_NumKeys(${1:const filename[]})$0"},"dini_GetKeyName":{"prefix":"dini_GetKeyName","body":"dini_GetKeyName(${1:const filename[]}, ${2:keyid})$0"},"DINI_frenametextfile":{"prefix":"DINI_frenametextfile","body":"DINI_frenametextfile(${1:const filename[]}, ${2:const newfilename[]})$0"},"strlen":{"prefix":"strlen","body":"strlen(${1:const string[]})$0"},"strpack":{"prefix":"strpack","body":"strpack(${1:dest[]}, ${2:const source[]}, ${3:maxlength=sizeof dest})$0"},"strunpack":{"prefix":"strunpack","body":"strunpack(${1:dest[]}, ${2:const source[]}, ${3:maxlength=sizeof dest})$0"},"strcat":{"prefix":"strcat","body":"strcat(${1:dest[]}, ${2:const source[]}, ${3:maxlength=sizeof dest})$0"},"strmid":{"prefix":"strmid","body":"strmid(${1:dest[]}, ${2:const source[]}, ${3:start}, ${4:end}, ${5:maxlength=sizeof dest})$0"},"strins":{"prefix":"strins","body":"strins(${1:string[]}, ${2:const substr[]}, ${3:pos}, ${4:maxlength=sizeof string})$0"},"strdel":{"prefix":"strdel","body":"strdel(${1:string[]}, ${2:start}, ${3:end})$0"},"strcmp":{"prefix":"strcmp","body":"strcmp(${1:const string1[]}, ${2:const string2[]}, ${3:bool:ignorecase=false}, ${4:length=cellmax})$0"},"strfind":{"prefix":"strfind","body":"strfind(${1:const string[]}, ${2:const sub[]}, ${3:bool:ignorecase=false}, ${4:pos=0})$0"},"strval":{"prefix":"strval","body":"strval(${1:const string[]})$0"},"valstr":{"prefix":"valstr","body":"valstr(${1:dest[]}, ${2:value}, ${3:bool:pack=false})$0"},"ispacked":{"prefix":"ispacked","body":"ispacked(${1:const string[]})$0"},"uudecode":{"prefix":"uudecode","body":"uudecode(${1:dest[]}, ${2:const source[]}, ${3:maxlength=sizeof dest})$0"},"uuencode":{"prefix":"uuencode","body":"uuencode(${1:dest[]}, ${2:const source[]}, ${3:numbytes}, ${4:maxlength=sizeof dest})$0"},"memcpy":{"prefix":"memcpy","body":"memcpy(${1:dest[]}, ${2:const source[]}, ${3:index=0}, ${4:numbytes}, ${5:maxlength=sizeof dest})$0"},"sprintf":{"prefix":"sprintf","body":"sprintf(${1:const fmat[]}, ${2:...})$0"},"strgetfirstc":{"prefix":"strgetfirstc","body":"strgetfirstc(${1:const string[]})$0"},"strgetc":{"prefix":"strgetc","body":"strgetc(${1:const string[]}, ${2:index})$0"},"strsize":{"prefix":"strsize","body":"strsize(${1:const string[]})$0"},"isempty":{"prefix":"isempty","body":"isempty(${1:const string[]})$0"},"isequal":{"prefix":"isequal","body":"isequal(${1:const str1[]}, ${2:const str2[]}, ${3:bool:ignorecase = false})$0"},"strexplode":{"prefix":"strexplode","body":"strexplode(${1:output[][]}, ${2:const input[]}, ${3:const delimiter[] = !\"}, ${4:limit = cellmax}, ${5:bool:trim = true}, ${6:bool:ignorecase = false}, ${7:size1 = sizeof(output})$0"},"strimplode":{"prefix":"strimplode","body":"strimplode(${1:const glue[]}, ${2:output[]}, ${3:maxlength = sizeof(output})$0"},"strreplace":{"prefix":"strreplace","body":"strreplace(${1:string[]}, ${2:const search[]}, ${3:const replacement[]}, ${4:bool:ignorecase = false}, ${5:pos = 0}, ${6:limit = -1}, ${7:maxlength = sizeof(string})$0"},"strtrim":{"prefix":"strtrim","body":"strtrim(${1:string[]}, ${2:const chars[] = !\"\"}, ${3:string_edges:edge = edge_both})$0"},"strpad":{"prefix":"strpad","body":"strpad(${1:string[]}, ${2:length}, ${3:const substr[] = !\" \"}, ${4:string_edges:edge = edge_both}, ${5:bool:trim_first = true}, ${6:const trim_chars[] = !\"\"}, ${7:maxlength = sizeof(string})$0"},"strwrap":{"prefix":"strwrap","body":"strwrap(${1:const left[]}, ${2:string[]}, ${3:const right[]}, ${4:maxlength = sizeof(string})$0"},"strcount":{"prefix":"strcount","body":"strcount(${1:const string[]}, ${2:const sub[]}, ${3:bool:ignorecase = false}, ${4:bool:count_overlapped = false})$0"},"strfromliteral":{"prefix":"strfromliteral","body":"strfromliteral(${1:output[]}, ${2:const input[]}, ${3:pos = 0}, ${4:maxlength = sizeof(output})$0"},"strtoliteral":{"prefix":"strtoliteral","body":"strtoliteral(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"},"strfrombin":{"prefix":"strfrombin","body":"strfrombin(${1:output[]}, ${2:const input[]}, ${3:inputlength = sizeof(input})$0"},"strtobin":{"prefix":"strtobin","body":"strtobin(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"},"strcatmid":{"prefix":"strcatmid","body":"strcatmid(${1:dest[]}, ${2:const source[]}, ${3:start = 0}, ${4:end = -1}, ${5:maxlength = sizeof(dest})$0"},"utf8encode":{"prefix":"utf8encode","body":"utf8encode(${1:dest[]}, ${2:const source[]}, ${3:maxlength = sizeof(dest})$0"},"utf8decode":{"prefix":"utf8decode","body":"utf8decode(${1:dest[]}, ${2:const source[]}, ${3:maxlength = sizeof(dest})$0"},"strurldecode":{"prefix":"strurldecode","body":"strurldecode(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"},"strurlencode":{"prefix":"strurlencode","body":"strurlencode(${1:output[]}, ${2:const input[]}, ${3:maxlength = sizeof(output})$0"},"ret_strcatmid":{"prefix":"ret_strcatmid","body":"ret_strcatmid(${1:const string[]}, ${2:const source[]}, ${3:start = 0}, ${4:end = -1})$0"},"ret_strfrombin":{"prefix":"ret_strfrombin","body":"ret_strfrombin(${1:const input[]}, ${2:inputlength = sizeof(input})$0"},"ret_strimplode":{"prefix":"ret_strimplode","body":"ret_strimplode(${1:const glue[]}, ${2:...})$0"},"ret_strreplace":{"prefix":"ret_strreplace","body":"ret_strreplace(${1:const string[]}, ${2:const search[]}, ${3:const replacement[]}, ${4:bool:ignorecase = false}, ${5:pos = 0}, ${6:limit = -1})$0"},"ret_strfromliteral":{"prefix":"ret_strfromliteral","body":"ret_strfromliteral(${1:const input[]}, ${2:pos = 0})$0"},"ret_strtoliteral":{"prefix":"ret_strtoliteral","body":"ret_strtoliteral(${1:const input[]}, ${2:bool:paranoid = true})$0"},"ret_strtrim":{"prefix":"ret_strtrim","body":"ret_strtrim(${1:const string[]}, ${2:const chars[] = !\"\"}, ${3:string_edges:edge = edge_both})$0"},"ret_strpad":{"prefix":"ret_strpad","body":"ret_strpad(${1:const string[]}, ${2:length}, ${3:const substr[] = !\" \"}, ${4:string_edges:edge = edge_both}, ${5:bool:trim_first = true}, ${6:const trim_chars[] = !\"\"})$0"},"ret_strwrap":{"prefix":"ret_strwrap","body":"ret_strwrap(${1:const left[]}, ${2:const string[]}, ${3:const right[]})$0"},"ret_strurldecode":{"prefix":"ret_strurldecode","body":"ret_strurldecode(${1:const input[]})$0"},"ret_strurlencode":{"prefix":"ret_strurlencode","body":"ret_strurlencode(${1:const input[]}, ${2:bool:pack = false})$0"},"ret_utf8encode":{"prefix":"ret_utf8encode","body":"ret_utf8encode(${1:const input[]})$0"},"ret_utf8decode":{"prefix":"ret_utf8decode","body":"ret_utf8decode(${1:const input[]})$0"},"ret_strunpack":{"prefix":"ret_strunpack","body":"ret_strunpack(${1:const source[]})$0"},"ret_strcat":{"prefix":"ret_strcat","body":"ret_strcat(${1:const string1[]}, ${2:const string2[]})$0"},"ret_strmid":{"prefix":"ret_strmid","body":"ret_strmid(${1:const source[]}, ${2:start}, ${3:end})$0"},"ret_strins":{"prefix":"ret_strins","body":"ret_strins(${1:const string[]}, ${2:const substr[]}, ${3:pos}, ${4:maxlength = sizeof(string})$0"},"ret_strdel":{"prefix":"ret_strdel","body":"ret_strdel(${1:const string[]}, ${2:start}, ${3:end})$0"},"ret_valstr":{"prefix":"ret_valstr","body":"ret_valstr(${1:value}, ${2:bool:pack = false})$0"},"ret_GetPlayerName":{"prefix":"ret_GetPlayerName","body":"ret_GetPlayerName(${1:playerid}, ${2:bool:pack = false})$0"},"y_timers: task":{"prefix":"task","body":"task ${1:name}[${2:delay}]() \n{\n\t${3}\n}$0"},"gettime":{"prefix":"gettime","body":"gettime(${1:hour=0}, ${2:minute=0}, ${3:second=0})$0"},"getdate":{"prefix":"getdate","body":"getdate(${1:year=0}, ${2:month=0}, ${3:day=0})$0"},"tickcount":{"prefix":"tickcount","body":"tickcount(${1:granularity=0})$0"},"y_timers: timer":{"prefix":"timer","body":"timer ${1:name}[${2:delay}](${3:args}) \n{\n\t${4}\n}$0"},"y_command":{"prefix":"YCMD","body":"YCMD:${1:command_name}(playerid, params[], help) \n{\n\t${4}\n\treturn 1;\n}$0"},"zcmd_command":{"prefix":"ZCMD command","body":"CMD:${1:command_name}(playerid, params[])\n{\n\t${4}\n\treturn 1;\n}$0"},"zcmd_OnPlayerCommandReceived":{"prefix":"ZCMD OnPlayerCommandReceived","body":"public OnPlayerCommandReceived(${1:playerid}, {$2:cmdtext[]})\n{\t\n${4}\n\treturn 1;\n}$0"},"zcmd_OnPlayerCommandPerformed":{"prefix":"ZCMD OnPlayerCommandPerformed","body":"public OnPlayerCommandPerformed(${1:playerid}, ${2:cmdtext[]}, ${3:success})\n{\t\n${4}\n\treturn 1;\n}$0"},"CreateActor":{"prefix":"CreateActor","description":"Create a static 'actor' in the world. These 'actors' are like NPCs, however they have limited functionality. They do not take up server player slots.","body":"CreateActor(${1:modelid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z}, ${5:Float:Rotation})$0"},"DestroyActor":{"prefix":"DestroyActor","description":"Destroy an actor which was created with CreateActor.","body":"DestroyActor(${1:actorid})$0"},"IsActorStreamedIn":{"prefix":"IsActorStreamedIn","description":"Checks if an actor is streamed in for a player.","body":"IsActorStreamedIn(${1:actorid}, ${2:forplayerid})$0"},"SetActorVirtualWorld":{"prefix":"SetActorVirtualWorld","description":"Set the virtual world of an actor. Only players in the same world will see the actor.","body":"SetActorVirtualWorld(${1:actorid}, ${2:vworld})$0"},"GetActorVirtualWorld":{"prefix":"GetActorVirtualWorld","description":"Get the virtual world of an actor.","body":"GetActorVirtualWorld(${1:actorid})$0"},"ApplyActorAnimation":{"prefix":"ApplyActorAnimation","description":"Apply an animation to an actor.","body":"ApplyActorAnimation(${1:actorid}, ${2:animlib[]}, ${3:animname[]}, ${4:Float:fDelta}, ${5:loop}, ${6:lockx}, ${7:locky}, ${8:freeze}, ${9:time})$0"},"ClearActorAnimations":{"prefix":"ClearActorAnimations","description":"Clear any animations applied to an actor.","body":"ClearActorAnimations(${1:actorid})$0"},"SetActorPos":{"prefix":"SetActorPos","description":"Set the position of an actor.","body":"SetActorPos(${1:actorid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"GetActorPos":{"prefix":"GetActorPos","description":"Get the position of an actor.","body":"GetActorPos(${1:actorid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"SetActorFacingAngle":{"prefix":"SetActorFacingAngle","description":"Set the facing angle of an actor.","body":"SetActorFacingAngle(${1:actorid}, ${2:Float:ang})$0"},"GetActorFacingAngle":{"prefix":"GetActorFacingAngle","description":"Get the facing angle of an actor.","body":"GetActorFacingAngle(${1:actorid}, ${2:Float:ang})$0"},"SetActorHealth":{"prefix":"SetActorHealth","description":"Set the health of an actor.","body":"SetActorHealth(${1:actorid}, ${2:Float:health})$0"},"GetActorHealth":{"prefix":"GetActorHealth","description":"Get the health of an actor.","body":"GetActorHealth(${1:actorid}, ${2:Float:health})$0"},"SetActorInvulnerable":{"prefix":"SetActorInvulnerable","description":"Toggle an actor's invulnerability.","body":"SetActorInvulnerable(${1:actorid}, ${2:invulnerable = true})$0"},"IsActorInvulnerable":{"prefix":"IsActorInvulnerable","description":"Check if an actor is invulnerable.","body":"IsActorInvulnerable(${1:actorid})$0"},"IsValidActor":{"prefix":"IsValidActor","description":"Checks if an actor ID is valid.","body":"IsValidActor(${1:actorid})$0"},"HTTP":{"prefix":"HTTP","description":"Sends a threaded HTTP request.","body":"HTTP(${1:index}, ${2|HTTP_GET,HTTP_POST,HTTP_HEAD|}, ${3:url[]}, ${4:data[]}, ${5:callback[]})$0"},"StartRecordingPlayback":{"prefix":"StartRecordingPlayback","description":"This will run a .rec file which has to be saved in the npcmodes/recordings folder. These files allow the NPC to follow certain actions. Their actions can be recorded manually. For more information, check the related functions.","body":"StartRecordingPlayback(${1|PLAYER_RECORDING_TYPE_NONE,PLAYER_RECORDING_TYPE_DRIVER,PLAYER_RECORDING_TYPE_ONFOOT|}, ${2:recordname[]})$0"},"StopRecordingPlayback":{"prefix":"StopRecordingPlayback","description":"This will stop the current .rec file which is being ran by the NPC, making it stay idle until some other order is given.","body":"StopRecordingPlayback()$0"},"PauseRecordingPlayback":{"prefix":"PauseRecordingPlayback","description":"This will pause playing back the recording.","body":"PauseRecordingPlayback()$0"},"ResumeRecordingPlayback":{"prefix":"ResumeRecordingPlayback","description":"This will resume the paused recording.","body":"ResumeRecordingPlayback()$0"},"OnNPCModeInit":{"prefix":"OnNPCModeInit","description":"Gets called when a NPC script is loaded.","body":"OnNPCModeInit()$0"},"OnNPCModeExit":{"prefix":"OnNPCModeExit","description":"Gets called when a NPC-script unloaded.","body":"OnNPCModeExit()$0"},"OnNPCConnect":{"prefix":"OnNPCConnect","description":"Gets called when a NPC successfully connects to the server.","body":"OnNPCConnect(${1:myplayerid})$0"},"OnNPCDisconnect":{"prefix":"OnNPCDisconnect","description":"Gets called when the NPC gets disconnected from the server.","body":"OnNPCDisconnect(${1:reason[]})$0"},"OnNPCSpawn":{"prefix":"OnNPCSpawn","description":"Gets called when a NPC spawned.","body":"OnNPCSpawn()$0"},"OnNPCEnterVehicle":{"prefix":"OnNPCEnterVehicle","description":"Gets called when a NPC enters a vehicle.","body":"OnNPCEnterVehicle(${1:vehicleid}, ${2:seatid})$0"},"OnNPCExitVehicle":{"prefix":"OnNPCExitVehicle","description":"Gets called when a NPC leaves a vehicle.","body":"OnNPCExitVehicle()$0"},"OnClientMessage":{"prefix":"OnClientMessage","description":"This callback gets called whenever the NPC sees a ClientMessage. This will be everytime a SendClientMessageToAll function is used and everytime a SendClientMessage function is sent towards the NPC. This callback won't be called when someone says something.","body":"OnClientMessage(${1:color}, ${2:text[]})$0"},"OnPlayerText":{"prefix":"OnPlayerText","description":"Called when a player sends a chat message.","body":"OnPlayerText(${1:playerid}, ${2:text[]})$0"},"OnPlayerStreamIn":{"prefix":"OnPlayerStreamIn","description":"This callback is called when a player is streamed by some other player's client.","body":"OnPlayerStreamIn(${1:playerid})$0"},"OnPlayerStreamOut":{"prefix":"OnPlayerStreamOut","description":"This callback is called when a player is streamed out from some other player's client.","body":"OnPlayerStreamOut(${1:playerid})$0"},"OnVehicleStreamIn":{"prefix":"OnVehicleStreamIn","description":"Called when a vehicle is streamed to a player's client.","body":"OnVehicleStreamIn(${1:vehicleid})$0"},"OnVehicleStreamOut":{"prefix":"OnVehicleStreamOut","description":"This callback is called when a vehicle is streamed out for a player's client (it's so far away that they can't see it).","body":"OnVehicleStreamOut(${1:vehicleid})$0"},"OnRecordingPlaybackEnd":{"prefix":"OnRecordingPlaybackEnd","description":"This callback is called when a recorded file being reproduced with StartRecordingPlayback has reached to its end.","body":"OnRecordingPlaybackEnd()$0"},"CreateObject":{"prefix":"CreateObject","description":"Creates an object at specified coordinates in the game world.","body":"CreateObject(${1:modelid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z}, ${5:Float:rX}, ${6:Float:rY}, ${7:Float:rZ}, ${8:Float:DrawDistance = 0.0})$0"},"AttachObjectToVehicle":{"prefix":"AttachObjectToVehicle","description":"Attach an object to a vehicle.","body":"AttachObjectToVehicle(${1:objectid}, ${2:vehicleid}, ${3:Float:OffsetX}, ${4:Float:OffsetY}, ${5:Float:OffsetZ}, ${6:Float:RotX}, ${7:Float:RotY}, ${8:Float:RotZ})$0"},"AttachObjectToObject":{"prefix":"AttachObjectToObject","description":"You can use this function to attach objects to other objects. The objects will folow the main object.","body":"AttachObjectToObject(${1:objectid}, ${2:attachtoid}, ${3:Float:OffsetX}, ${4:Float:OffsetY}, ${5:Float:OffsetZ}, ${6:Float:RotX}, ${7:Float:RotY}, ${8:Float:RotZ}, ${9:SyncRotation = 1})$0"},"AttachObjectToPlayer":{"prefix":"AttachObjectToPlayer","description":"Attach an object to a player.","body":"AttachObjectToPlayer(${1:objectid}, ${2:playerid}, ${3:Float:OffsetX}, ${4:Float:OffsetY}, ${5:Float:OffsetZ}, ${6:Float:RotX}, ${7:Float:RotY}, ${8:Float:RotZ})$0"},"SetObjectPos":{"prefix":"SetObjectPos","description":"Change the position of an object.","body":"SetObjectPos(${1:objectid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"GetObjectPos":{"prefix":"GetObjectPos","description":"Get the position of an object.","body":"GetObjectPos(${1:objectid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"SetObjectRot":{"prefix":"SetObjectRot","description":"Set the rotation of an object on the three axes (X, Y and Z).","body":"SetObjectRot(${1:objectid}, ${2:Float:RotX}, ${3:Float:RotY}, ${4:Float:RotZ})$0"},"GetObjectRot":{"prefix":"GetObjectRot","description":"Use this function to get the objects current rotation. The rotation is saved by reference in three RotX/RotY/RotZ variables.","body":"GetObjectRot(${1:objectid}, ${2:Float:RotX}, ${3:Float:RotY}, ${4:Float:RotZ})$0"},"GetObjectModel":{"prefix":"GetObjectModel","description":"Get the model ID of an object.","body":"GetObjectModel(${1:objectid})$0"},"SetObjectNoCameraCol":{"prefix":"SetObjectNoCameraCol","description":"Disable collisions between players' cameras and the specified object.","body":"SetObjectNoCameraCol(${1:objectid})$0"},"IsValidObject":{"prefix":"IsValidObject","description":"Checks if an object with the ID provided exists.","body":"IsValidObject(${1:objectid})$0"},"DestroyObject":{"prefix":"DestroyObject","description":"Destroys (removes) an object that was created using CreateObject.","body":"DestroyObject(${1:objectid})$0"},"MoveObject":{"prefix":"MoveObject","description":"Move an object to a new position with a set speed. Players/vehicles will 'surf' the object as it moves.","body":"MoveObject(${1:objectid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z}, ${5:Float:Speed}, ${6:Float:RotX = -1000.0}, ${7:Float:RotY = -1000.0}, ${8:Float:RotZ = -1000.0})$0"},"StopObject":{"prefix":"StopObject","description":"Stop a moving object after MoveObject has been used.","body":"StopObject(${1:objectid})$0"},"IsObjectMoving":{"prefix":"IsObjectMoving","description":"Checks if the given objectid is moving.","body":"IsObjectMoving(${1:objectid})$0"},"EditObject":{"prefix":"EditObject","description":"Allows a player to edit an object (position and rotation) using their mouse on a GUI (Graphical User Interface).","body":"EditObject(${1:playerid}, ${2:objectid})$0"},"EditPlayerObject":{"prefix":"EditPlayerObject","description":"Allows players to edit a player-object (position and rotation) with a GUI and their mouse.","body":"EditPlayerObject(${1:playerid}, ${2:objectid})$0"},"SelectObject":{"prefix":"SelectObject","description":"Display the cursor and allow the player to select an object. OnPlayerSelectObject is called when the player selects an object.","body":"SelectObject(${1:playerid})$0"},"CancelEdit":{"prefix":"CancelEdit","description":"Cancel object edition mode for a player","body":"CancelEdit(${1:playerid})$0"},"CreatePlayerObject":{"prefix":"CreatePlayerObject","description":"Creates an object which will be visible to only one player.","body":"CreatePlayerObject(${1:playerid}, ${2:modelid}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z}, ${6:Float:rX}, ${7:Float:rY}, ${8:Float:rZ}, ${9:Float:DrawDistance = 0.0})$0"},"AttachPlayerObjectToVehicle":{"prefix":"AttachPlayerObjectToVehicle","description":"Attach a player object to a vehicle.","body":"AttachPlayerObjectToVehicle(${1:playerid}, ${2:objectid}, ${3:vehicleid}, ${4:Float:fOffsetX}, ${5:Float:fOffsetY}, ${6:Float:fOffsetZ}, ${7:Float:fRotX}, ${8:Float:fRotY}, ${9:Float:RotZ})$0"},"SetPlayerObjectPos":{"prefix":"SetPlayerObjectPos","description":"Sets the position of a player-object to the specified coordinates.","body":"SetPlayerObjectPos(${1:playerid}, ${2:objectid}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z})$0"},"GetPlayerObjectPos":{"prefix":"GetPlayerObjectPos","description":"Get the position of a player object.","body":"GetPlayerObjectPos(${1:playerid}, ${2:objectid}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z})$0"},"SetPlayerObjectRot":{"prefix":"SetPlayerObjectRot","description":"Set the rotation of an object on the X, Y and Z axis.","body":"SetPlayerObjectRot(${1:playerid}, ${2:objectid}, ${3:Float:RotX}, ${4:Float:RotY}, ${5:Float:RotZ})$0"},"GetPlayerObjectRot":{"prefix":"GetPlayerObjectRot","description":"Use this function to get the object's current rotation. The rotation is saved by reference in three RotX/RotY/RotZ variables.","body":"GetPlayerObjectRot(${1:playerid}, ${2:objectid}, ${3:Float:RotX}, ${4:Float:RotY}, ${5:Float:RotZ})$0"},"GetPlayerObjectModel":{"prefix":"GetPlayerObjectModel","description":"Retrieve the model ID of a player-object.","body":"GetPlayerObjectModel(${1:playerid}, ${2:objectid})$0"},"SetPlayerObjectNoCameraCol":{"prefix":"SetPlayerObjectNoCameraCol","description":"Toggles a player object camera collision.","body":"SetPlayerObjectNoCameraCol(${1:playerid}, ${2:objectid})$0"},"IsValidPlayerObject":{"prefix":"IsValidPlayerObject","description":"Checks if the given object ID is valid for the given player.","body":"IsValidPlayerObject(${1:playerid}, ${2:objectid})$0"},"DestroyPlayerObject":{"prefix":"DestroyPlayerObject","description":"estroy a player-object created using CreatePlayerObject.","body":"DestroyPlayerObject(${1:playerid}, ${2:objectid})$0"},"MovePlayerObject":{"prefix":"MovePlayerObject","description":"Move a player object with a set speed. Also supports rotation. Players/vehicles will surf moving objects.","body":"MovePlayerObject(${1:playerid}, ${2:objectid}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z}, ${6:Float:Speed}, ${7:Float:RotX = -1000.0}, ${8:Float:RotY = -1000.0}, ${9:Float:RotZ = -1000.0})$0"},"StopPlayerObject":{"prefix":"StopPlayerObject","description":"Stop a moving player-object after MovePlayerObject has been used.","body":"StopPlayerObject(${1:playerid}, ${2:objectid})$0"},"IsPlayerObjectMoving":{"prefix":"IsPlayerObjectMoving","description":"Checks if the given player objectid is moving.","body":"IsPlayerObjectMoving(${1:playerid}, ${2:objectid})$0"},"AttachPlayerObjectToPlayer":{"prefix":"AttachPlayerObjectToPlayer","description":"The same as AttachObjectToPlayer but for objects which were created for player.","body":"AttachPlayerObjectToPlayer(${1:objectplayer}, ${2:objectid}, ${3:attachplayer}, ${4:Float:OffsetX}, ${5:Float:OffsetY}, ${6:Float:OffsetZ}, ${7:Float:rX}, ${8:Float:rY}, ${9:Float:rZ})$0"},"SetObjectMaterial":{"prefix":"SetObjectMaterial","description":"Replace the texture of an object with the texture from another model in the game.","body":"SetObjectMaterial(${1:objectid}, ${2:materialindex}, ${3:modelid}, ${4:txdname[]}, ${5:texturename[]}, ${6:materialcolor=0})$0"},"SetPlayerObjectMaterial":{"prefix":"SetPlayerObjectMaterial","description":"Replace the texture of a player-object with the texture from another model in the game.","body":"SetPlayerObjectMaterial(${1:playerid}, ${2:objectid}, ${3:materialindex}, ${4:modelid}, ${5:txdname[]}, ${6:texturename[]}, ${7:materialcolor=0})$0"},"SetObjectMaterialText":{"prefix":"SetObjectMaterialText","description":"Replace the texture of an object with text.","body":"SetObjectMaterialText(${1:objectid}, ${2:text[]}, ${3:materialindex = 0}, ${4|OBJECT_MATERIAL_SIZE_32x32,OBJECT_MATERIAL_SIZE_64x32,OBJECT_MATERIAL_SIZE_64x64,OBJECT_MATERIAL_SIZE_128x32,OBJECT_MATERIAL_SIZE_128x64,OBJECT_MATERIAL_SIZE_128x128,OBJECT_MATERIAL_SIZE_256x32,OBJECT_MATERIAL_SIZE_256x64,OBJECT_MATERIAL_SIZE_256x128,OBJECT_MATERIAL_SIZE_256x256,OBJECT_MATERIAL_SIZE_512x64,OBJECT_MATERIAL_SIZE_512x128,OBJECT_MATERIAL_SIZE_512x256,OBJECT_MATERIAL_SIZE_512x512|}, ${5:fontface[] = \"Arial\"}, ${6:fontsize = 24}, ${7:bold = 1}, ${8:fontcolor = 0xFFFFFFFF}, ${9:backcolor = 0}, ${10|OBJECT_MATERIAL_TEXT_ALIGN_LEFT,OBJECT_MATERIAL_TEXT_ALIGN_CENTER,OBJECT_MATERIAL_TEXT_ALIGN_RIGHT|})$0"},"SetPlayerObjectMaterialText":{"prefix":"SetPlayerObjectMaterialText","description":"Replace the texture of a player object with text.","body":"SetObjectMaterialText(${1:objectid}, ${2:text[]}, ${3:materialindex = 0}, ${4|OBJECT_MATERIAL_SIZE_32x32,OBJECT_MATERIAL_SIZE_64x32,OBJECT_MATERIAL_SIZE_64x64,OBJECT_MATERIAL_SIZE_128x32,OBJECT_MATERIAL_SIZE_128x64,OBJECT_MATERIAL_SIZE_128x128,OBJECT_MATERIAL_SIZE_256x32,OBJECT_MATERIAL_SIZE_256x64,OBJECT_MATERIAL_SIZE_256x128,OBJECT_MATERIAL_SIZE_256x256,OBJECT_MATERIAL_SIZE_512x64,OBJECT_MATERIAL_SIZE_512x128,OBJECT_MATERIAL_SIZE_512x256,OBJECT_MATERIAL_SIZE_512x512|}, ${5:fontface[] = \"Arial\"}, ${6:fontsize = 24}, ${7:bold = 1}, ${8:fontcolor = 0xFFFFFFFF}, ${9:backcolor = 0}, ${10|OBJECT_MATERIAL_TEXT_ALIGN_LEFT,OBJECT_MATERIAL_TEXT_ALIGN_CENTER,OBJECT_MATERIAL_TEXT_ALIGN_RIGHT|})$0"},"SetObjectsDefaultCameraCol":{"prefix":"SetObjectsDefaultCameraCol","description":"Allows camera collisions with newly created objects to be disabled by default.","body":"SetObjectsDefaultCameraCol(${1:disable})$0"},"SetSpawnInfo":{"prefix":"SetSpawnInfo","description":"This function can be used to change the spawn information of a specific player. It allows you to automatically set someone's spawn weapons, their team, skin and spawn position, normally used in case of minigames or automatic-spawn systems.","body":"SetSpawnInfo(${1:playerid}, ${2:team}, ${3:skin}, ${4:Float:x}, ${5:Float:y}, ${6:Float:z}, ${7:Float:rotation}, ${8:weapon1}, ${9:weapon1_ammo}, ${10:weapon2}, ${11:weapon2_ammo}, ${12:weapon3}, ${13:weapon3_ammo})$0"},"SpawnPlayer":{"prefix":"SpawnPlayer","description":"(Re)Spawns a player.","body":"SpawnPlayer(${1:playerid})$0"},"SetPlayerPos":{"prefix":"SetPlayerPos","description":"Set a player's position.","body":"SetPlayerPos(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"SetPlayerPosFindZ":{"prefix":"SetPlayerPosFindZ","description":"This sets the players position then adjusts the players z-coordinate to the nearest solid ground under the position.","body":"SetPlayerPosFindZ(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"GetPlayerPos":{"prefix":"GetPlayerPos","description":"Get the position of a player, represented by X, Y and Z coordinates.","body":"GetPlayerPos(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"SetPlayerFacingAngle":{"prefix":"SetPlayerFacingAngle","description":"Set a player's facing angle (Z rotation).","body":"SetPlayerFacingAngle(${1:playerid}, ${2:Float:ang})$0"},"GetPlayerFacingAngle":{"prefix":"GetPlayerFacingAngle","description":"Gets the angle a player is facing.","body":"GetPlayerFacingAngle(${1:playerid}, ${2:Float:ang})$0"},"IsPlayerInRangeOfPoint":{"prefix":"IsPlayerInRangeOfPoint","description":"Checks if a player is in range of a point.","body":"IsPlayerInRangeOfPoint(${1:playerid}, ${2:Float:range}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"GetPlayerDistanceFromPoint":{"prefix":"GetPlayerDistanceFromPoint","description":"Calculate the distance between a player and a map coordinate.","body":"GetPlayerDistanceFromPoint(${1:playerid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"IsPlayerStreamedIn":{"prefix":"IsPlayerStreamedIn","description":"","body":"IsPlayerStreamedIn(${1:playerid}, ${2:forplayerid})$0"},"SetPlayerInterior":{"prefix":"SetPlayerInterior","description":"Checks if a player is streamed in another player's client.","body":"SetPlayerInterior(${1:playerid}, ${2:interiorid})$0"},"GetPlayerInterior":{"prefix":"GetPlayerInterior","description":"Retrieves the player's current interior. ","body":"GetPlayerInterior(${1:playerid})$0"},"SetPlayerHealth":{"prefix":"SetPlayerHealth","description":"Set the health of a player.","body":"SetPlayerHealth(${1:playerid}, ${2:Float:health})$0"},"GetPlayerHealth":{"prefix":"GetPlayerHealth","description":"Get the health of a player.","body":"GetPlayerHealth(${1:playerid}, ${2:Float:health})$0"},"SetPlayerArmour":{"prefix":"SetPlayerArmour","description":"Set a player's armor level.","body":"SetPlayerArmour(${1:playerid}, ${2:Float:armour})$0"},"GetPlayerArmour":{"prefix":"GetPlayerArmour","description":"This function stores the armour of a player into a variable.","body":"GetPlayerArmour(${1:playerid}, ${2:Float:armour})$0"},"SetPlayerAmmo":{"prefix":"SetPlayerAmmo","description":"Set the ammo of a player's weapon.","body":"SetPlayerAmmo(${1:playerid}, ${2:weaponslot}, ${3:ammo})$0"},"GetPlayerAmmo":{"prefix":"GetPlayerAmmo","description":"Gets the amount of ammo in a player's current weapon.","body":"GetPlayerAmmo(${1:playerid})$0"},"GetPlayerWeaponState":{"prefix":"GetPlayerWeaponState","description":"Check the state of a player's weapon.","body":"GetPlayerWeaponState(${1:playerid})$0"},"GetPlayerTargetPlayer":{"prefix":"GetPlayerTargetPlayer","description":"Check who a player is aiming at.","body":"GetPlayerTargetPlayer(${1:playerid})$0"},"GetPlayerTargetActor":{"prefix":"GetPlayerTargetActor","description":"Gets id of an actor which is aimed by certain player.","body":"GetPlayerTargetActor(${1:playerid})$0"},"SetPlayerTeam":{"prefix":"SetPlayerTeam","description":"Set the team of a player.","body":"SetPlayerTeam(${1:playerid}, ${2:teamid})$0"},"GetPlayerTeam":{"prefix":"GetPlayerTeam","description":"Get the ID of the team the player is on.","body":"GetPlayerTeam(${1:playerid})$0"},"SetPlayerScore":{"prefix":"SetPlayerScore","description":"Set a player's score.","body":"SetPlayerScore(${1:playerid}, ${2:score})$0"},"GetPlayerScore":{"prefix":"GetPlayerScore","description":"This function returns a player's score as it was set using SetPlayerScore.","body":"GetPlayerScore(${1:playerid})$0"},"GetPlayerDrunkLevel":{"prefix":"GetPlayerDrunkLevel","description":"Checks the player's level of drunkenness. If the level is less than 2000, the player is sober. The player's level of drunkness goes down slowly automatically (26 levels per second) but will always reach 2000 at the end (in 0.3b it will stop at zero). The higher drunkenness levels affect the player's camera, and the car driving handling. The level of drunkenness increases when the player drinks from a bottle (You can use SetPlayerSpecialAction to give them bottles).","body":"GetPlayerDrunkLevel(${1:playerid})$0"},"SetPlayerDrunkLevel":{"prefix":"SetPlayerDrunkLevel","description":"Sets the drunk level of a player which makes the player's camera sway and vehicles hard to control.","body":"SetPlayerDrunkLevel(${1:playerid}, ${2:level})$0"},"SetPlayerColor":{"prefix":"SetPlayerColor","description":"Set the colour of a player's nametag and marker (radar blip).","body":"SetPlayerColor(${1:playerid}, ${2:color})$0"},"GetPlayerColor":{"prefix":"GetPlayerColor","description":"Gets the color of the player's name and radar marker. Only works after SetPlayerColor.","body":"GetPlayerColor(${1:playerid})$0"},"SetPlayerSkin":{"prefix":"SetPlayerSkin","description":"Set the skin of a player. A player's skin is their character model.","body":"SetPlayerSkin(${1:playerid}, ${2:skinid})$0"},"GetPlayerSkin":{"prefix":"GetPlayerSkin","description":"Get the skin of a player. A player's skin is their character model.","body":"GetPlayerSkin(${1:playerid})$0"},"GivePlayerWeapon":{"prefix":"GivePlayerWeapon","description":"Give a player a weapon with a specified amount of ammo.","body":"GivePlayerWeapon(${1:playerid}, ${2:weaponid}, ${3:ammo})$0"},"ResetPlayerWeapons":{"prefix":"ResetPlayerWeapons","description":"Removes all weapons from a player.","body":"ResetPlayerWeapons(${1:playerid})$0"},"SetPlayerArmedWeapon":{"prefix":"SetPlayerArmedWeapon","description":"Sets which weapon (that a player already has) the player is holding.","body":"SetPlayerArmedWeapon(${1:playerid}, ${2:weaponid})$0"},"GetPlayerWeaponData":{"prefix":"GetPlayerWeaponData","description":"Get the weapon and ammo in a specific player's weapon slot (e.g. the weapon in the 'SMG' slot).","body":"GetPlayerWeaponData(${1:playerid}, ${2:slot}, ${3:weapons}, ${4:ammo})$0"},"GivePlayerMoney":{"prefix":"GivePlayerMoney","description":"Give money to or take money from a player.","body":"GivePlayerMoney(${1:playerid}, ${2:money})$0"},"ResetPlayerMoney":{"prefix":"ResetPlayerMoney","description":"Reset a player's money to $0.","body":"ResetPlayerMoney(${1:playerid})$0"},"SetPlayerName":{"prefix":"SetPlayerName","description":"Sets the name of a player.","body":"SetPlayerName(${1:playerid}, ${2:const name[]})$0"},"GetPlayerMoney":{"prefix":"GetPlayerMoney","description":"Retrieves the amount of money a player has.","body":"GetPlayerMoney(${1:playerid})$0"},"GetPlayerState":{"prefix":"GetPlayerState","description":"Get a player's current state.","body":"GetPlayerState(${1:playerid})$0"},"GetPlayerIp":{"prefix":"GetPlayerIp","description":"Get the specified player's IP address and store it in a string.","body":"GetPlayerIp(${1:playerid}, ${2:name[]}, ${3:len})$0"},"GetPlayerPing":{"prefix":"GetPlayerPing","description":"Get the ping of a player. The ping measures the amount of time it takes for the server to 'ping' the client and for the client to send the message back.","body":"GetPlayerPing(${1:playerid})$0"},"GetPlayerWeapon":{"prefix":"GetPlayerWeapon","description":"Returns the ID of the weapon a player is currently holding.","body":"GetPlayerWeapon(${1:playerid})$0"},"GetPlayerKeys":{"prefix":"GetPlayerKeys","description":"Check which keys a player is pressing.","body":"GetPlayerKeys(${1:playerid}, ${2:keys}, ${3:updown}, ${4:leftright})$0"},"GetPlayerName":{"prefix":"GetPlayerName","description":"Get a player's name.","body":"GetPlayerName(${1:playerid}, ${2:const name[]}, ${3:len})$0"},"SetPlayerTime":{"prefix":"SetPlayerTime","description":"Sets the game time for a player. If a player's clock is enabled (TogglePlayerClock) the time displayed by it will update automatically.","body":"SetPlayerTime(${1:playerid}, ${2:hour}, ${3:minute})$0"},"GetPlayerTime":{"prefix":"GetPlayerTime","description":"Get the player's current game time. Set by SetWorldTime, or by the game automatically if TogglePlayerClock is used.","body":"GetPlayerTime(${1:playerid}, ${2:hour}, ${3:minute})$0"},"TogglePlayerClock":{"prefix":"TogglePlayerClock","description":"Toggle the in-game clock (top-right corner) for a specific player. When this is enabled, time will progress at 1 minute per second. Weather will also interpolate (slowly change over time) when set using SetWeather/SetPlayerWeather.","body":"TogglePlayerClock(${1:playerid}, ${2:toggle})$0"},"SetPlayerWeather":{"prefix":"SetPlayerWeather","description":"Set a player's weather.","body":"SetPlayerWeather(${1:playerid}, ${2:weather})$0"},"ForceClassSelection":{"prefix":"ForceClassSelection","description":"Forces a player to go back to class selection.","body":"ForceClassSelection(${1:playerid})$0"},"SetPlayerWantedLevel":{"prefix":"SetPlayerWantedLevel","description":"Set a player's wanted level (6 brown stars under HUD).","body":"SetPlayerWantedLevel(${1:playerid}, ${2:level})$0"},"GetPlayerWantedLevel":{"prefix":"GetPlayerWantedLevel","description":"Gets the wanted level of a player.","body":"GetPlayerWantedLevel(${1:playerid})$0"},"SetPlayerFightingStyle":{"prefix":"SetPlayerFightingStyle","description":"Set a player's special fighting style. To use in-game, aim and press the 'secondary attack' key (ENTER by default).","body":"SetPlayerFightingStyle(${1:playerid}, ${2:style})$0"},"GetPlayerFightingStyle":{"prefix":"GetPlayerFightingStyle","description":"Get the fighting style the player currently using.","body":"GetPlayerFightingStyle(${1:playerid})$0"},"SetPlayerVelocity":{"prefix":"SetPlayerVelocity","description":"Set a player's velocity on the X, Y and Z axes.","body":"SetPlayerVelocity(${1:playerid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"GetPlayerVelocity":{"prefix":"GetPlayerVelocity","description":"Get the velocity (speed) of a player on the X, Y and Z axes.","body":"GetPlayerVelocity(${1:playerid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z })$0"},"PlayCrimeReportForPlayer":{"prefix":"PlayCrimeReportForPlayer","description":"This function plays a crime report for a player - just like in single-player when CJ commits a crime.","body":"PlayCrimeReportForPlayer(${1:playerid}, ${2:suspectid}, ${3:crime})$0"},"PlayAudioStreamForPlayer":{"prefix":"PlayAudioStreamForPlayer","description":"Play an 'audio stream' for a player. Normal audio files also work (e.g. MP3).","body":"PlayAudioStreamForPlayer(${1:playerid}, ${2:url[]}, ${3:Float:posX = 0.0}, ${4:Float:posY = 0.0}, ${5:Float:posZ = 0.0}, ${6:Float:distance = 50.0}, ${7:usepos = 0})$0"},"StopAudioStreamForPlayer":{"prefix":"StopAudioStreamForPlayer","description":"Stops the current audio stream for a player.","body":"StopAudioStreamForPlayer(${1:playerid})$0"},"SetPlayerShopName":{"prefix":"SetPlayerShopName","description":"Loads or unloads an interior script for a player (for example the ammunation menu).","body":"SetPlayerShopName(${1:playerid}, ${2:shopname[]})$0"},"SetPlayerSkillLevel":{"prefix":"SetPlayerSkillLevel","description":"Set the skill level of a certain weapon type for a player.","body":"SetPlayerSkillLevel(${1:playerid}, ${2:skill}, ${3:level})$0"},"GetPlayerSurfingVehicleID":{"prefix":"GetPlayerSurfingVehicleID","description":"Get the ID of the vehicle that the player is surfing (stuck to the roof of).","body":"GetPlayerSurfingVehicleID(${1:playerid})$0"},"GetPlayerSurfingObjectID":{"prefix":"GetPlayerSurfingObjectID","description":"Returns the ID of the object the player is surfing on.","body":"GetPlayerSurfingObjectID(${1:playerid})$0"},"RemoveBuildingForPlayer":{"prefix":"RemoveBuildingForPlayer","description":"Removes a standard San Andreas model for a single player within a specified range.","body":"RemoveBuildingForPlayer(${1:playerid}, ${2:modelid}, ${3:Float:fX}, ${4:Float:fY}, ${5:Float:fZ}, ${6:Float:fRadius})$0"},"GetPlayerLastShotVectors":{"prefix":"GetPlayerLastShotVectors","description":"Retrieves the start and end (hit) position of the last bullet a player fired.","body":"GetPlayerLastShotVectors(${1:playerid}, ${2:Float:fOriginX}, ${3:Float:fOriginY}, ${4:Float:fOriginZ}, ${5:Float:fHitPosX}, ${6:Float:fHitPosY}, ${7:Float:fHitPosZ})$0"},"SetPlayerAttachedObject":{"prefix":"SetPlayerAttachedObject","description":"Attach an object to a specific bone on a player.","body":"SetPlayerAttachedObject(${1:playerid}, ${2:index}, ${3:modelid}, ${4:bone}, ${5:Float:fOffsetX = 0.0}, ${6:Float:fOffsetY = 0.0}, ${7:Float:fOffsetZ = 0.0}, ${8:Float:fRotX = 0.0}, ${9:Float:fRotY = 0.0}, ${10:Float:fRotZ = 0.0}, ${11:Float:fScaleX = 1.0}, ${12:Float:fScaleY = 1.0}, ${13:Float:fScaleZ = 1.0}, ${14:materialcolor1 = 0}, ${15:materialcolor2 = 0})$0"},"RemovePlayerAttachedObject":{"prefix":"RemovePlayerAttachedObject","description":"Remove an attached object from a player.","body":"RemovePlayerAttachedObject(${1:playerid}, ${2:index})$0"},"IsPlayerAttachedObjectSlotUsed":{"prefix":"IsPlayerAttachedObjectSlotUsed","description":"Check if a player has an object attached in the specified index (slot).","body":"IsPlayerAttachedObjectSlotUsed(${1:playerid}, ${2:index})$0"},"EditAttachedObject":{"prefix":"EditAttachedObject","description":"Enter edition mode for an attached object.","body":"EditAttachedObject(${1:playerid}, ${2:index})$0"},"CreatePlayerTextDraw":{"prefix":"CreatePlayerTextDraw","description":"Creates a textdraw for a single player. This can be used as a way around the global text-draw limit.","body":"CreatePlayerTextDraw(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:text[]})$0"},"PlayerTextDrawDestroy":{"prefix":"PlayerTextDrawDestroy","description":"Destroy a player-textdraw.","body":"PlayerTextDrawDestroy(${1:playerid}, ${2:PlayerText:text})$0"},"PlayerTextDrawLetterSize":{"prefix":"PlayerTextDrawLetterSize","description":"Sets the width and height of the letters in a player-textdraw.","body":"PlayerTextDrawLetterSize(${1:playerid}, ${2:PlayerText:text}, ${3:Float:x}, ${4:Float:y})$0"},"PlayerTextDrawTextSize":{"prefix":"PlayerTextDrawTextSize","description":"Change the size of a player-textdraw (box if PlayerTextDrawUseBox is enabled and/or clickable area for use with PlayerTextDrawSetSelectable).","body":"PlayerTextDrawTextSize(${1:playerid}, ${2:PlayerText:text}, ${3:Float:x}, ${4:Float:y})$0"},"PlayerTextDrawAlignment":{"prefix":"PlayerTextDrawAlignment","description":"Set the text alignment of a player-textdraw.","body":"PlayerTextDrawAlignment(${1:playerid}, ${2:PlayerText:text}, ${3:alignment})$0"},"PlayerTextDrawColor":{"prefix":"PlayerTextDrawColor","description":"Sets the text color of a player-textdraw","body":"PlayerTextDrawColor(${1:playerid}, ${2:PlayerText:text}, ${3:color})$0"},"PlayerTextDrawUseBox":{"prefix":"PlayerTextDrawUseBox","description":"Toggle the box on a player-textdraw.","body":"PlayerTextDrawUseBox(${1:playerid}, ${2:PlayerText:text}, ${3:use})$0"},"PlayerTextDrawBoxColor":{"prefix":"PlayerTextDrawBoxColor","description":"Sets the color of a textdraw's box (PlayerTextDrawUseBox).","body":"PlayerTextDrawBoxColor(${1:playerid}, ${2:PlayerText:text}, ${3:color})$0"},"PlayerTextDrawSetShadow":{"prefix":"PlayerTextDrawSetShadow","description":"Adds a shadow to the bottom-right side of the text in a player-textdraw. The shadow font matches the text font.","body":"PlayerTextDrawSetShadow(${1:playerid}, ${2:PlayerText:text}, ${3:size})$0"},"PlayerTextDrawSetOutline":{"prefix":"PlayerTextDrawSetOutline","description":"Set the outline of a player-textdraw. The outline colour cannot be changed unless PlayerTextDrawBackgroundColor is used.","body":"PlayerTextDrawSetOutline(${1:playerid}, ${2:PlayerText:text}, ${3:size})$0"},"PlayerTextDrawBackgroundColor":{"prefix":"PlayerTextDrawBackgroundColor","description":"Adjust the background color of a player-textdraw.","body":"PlayerTextDrawBackgroundColor(${1:playerid}, ${2:PlayerText:text}, ${3:color})$0"},"PlayerTextDrawFont":{"prefix":"PlayerTextDrawFont","description":"Change the font of a player-textdraw.","body":"PlayerTextDrawFont(${1:playerid}, ${2:PlayerText:text}, ${3:font})$0"},"PlayerTextDrawSetProportional":{"prefix":"PlayerTextDrawSetProportional","description":"Appears to scale text spacing to a proportional ratio. Useful when using PlayerTextDrawLetterSize to ensure the text has even character spacing.","body":"PlayerTextDrawSetProportional(${1:playerid}, ${2:PlayerText:text}, ${3:set})$0"},"PlayerTextDrawSetSelectable":{"prefix":"PlayerTextDrawSetSelectable","description":"Toggles whether a player-textdraw can be selected or not.","body":"PlayerTextDrawSetSelectable(${1:playerid}, ${2:PlayerText:text}, ${3:set})$0"},"PlayerTextDrawShow":{"prefix":"PlayerTextDrawShow","description":"Show a player-textdraw to the player it was created for.","body":"PlayerTextDrawShow(${1:playerid}, ${2:PlayerText:text})$0"},"PlayerTextDrawHide":{"prefix":"PlayerTextDrawHide","description":"Hide a player-textdraw from the player it was created for.","body":"PlayerTextDrawHide(${1:playerid}, ${2:PlayerText:text})$0"},"PlayerTextDrawSetString":{"prefix":"PlayerTextDrawSetString","description":"Change the text of a player-textdraw.","body":"PlayerTextDrawSetString(${1:playerid}, ${2:PlayerText:text}, ${3:string[]})$0"},"PlayerTextDrawSetPreviewModel":{"prefix":"PlayerTextDrawSetPreviewModel","description":"Sets a player textdraw 2D preview sprite of a specified model ID.","body":"PlayerTextDrawSetPreviewModel(${1:playerid}, ${2:PlayerText:text}, ${3:modelindex})$0"},"PlayerTextDrawSetPreviewRot":{"prefix":"PlayerTextDrawSetPreviewRot","description":"Sets the rotation and zoom of a 3D model preview player-textdraw.","body":"PlayerTextDrawSetPreviewRot(${1:playerid}, ${2:PlayerText:text}, ${3:Float:fRotX}, ${4:Float:fRotY}, ${5:Float:fRotZ}, ${6:Float:fZoom = 1.0})$0"},"PlayerTextDrawSetPreviewVehCol":{"prefix":"PlayerTextDrawSetPreviewVehCol","description":"Set the color of a vehicle in a player-textdraw model preview (if a vehicle is shown).","body":"PlayerTextDrawSetPreviewVehCol(${1:playerid}, ${2:PlayerText:text}, ${3:color1}, ${4:color2})$0"},"SetPVarInt":{"prefix":"SetPVarInt","description":"Set an integer player variable.","body":"SetPVarInt(${1:playerid}, ${2:varname[]}, ${3:int_value})$0"},"GetPVarInt":{"prefix":"GetPVarInt","description":"Gets an integer player variable's value.","body":"GetPVarInt(${1:playerid}, ${2:varname[]})$0"},"SetPVarString":{"prefix":"SetPVarString","description":"Saves a string into a player variable.","body":"SetPVarString(${1:playerid}, ${2:varname[]}, ${3:string_value[]})$0"},"GetPVarString":{"prefix":"GetPVarString","description":"Gets a player variable as a string.","body":"GetPVarString(${1:playerid}, ${2:varname[]}, ${3:string_return[]}, ${4:len})$0"},"SetPVarFloat":{"prefix":"SetPVarFloat","description":"Set a float player variable's value.","body":"SetPVarFloat(${1:playerid}, ${2:varname[]}, ${3:Float:float_value})$0"},"GetPVarFloat":{"prefix":"GetPVarFloat","description":"Get a float player variable's value.","body":"GetPVarFloat(${1:playerid}, ${2:varname[]})$0"},"DeletePVar":{"prefix":"DeletePVar","description":"Deletes a previously set player variable.","body":"DeletePVar(${1:playerid}, ${2:varname[]})$0"},"GetPVarsUpperIndex":{"prefix":"GetPVarsUpperIndex","description":"Each PVar (player-variable) has its own unique identification number for lookup, this function returns the highest ID set for a player.","body":"GetPVarsUpperIndex(${1:playerid})$0"},"GetPVarNameAtIndex":{"prefix":"GetPVarNameAtIndex","description":"Retrieve the name of a player's pVar via the index.","body":"GetPVarNameAtIndex(${1:playerid}, ${2:index}, ${3:ret_varname[]}, ${4:ret_len})$0"},"GetPVarType":{"prefix":"GetPVarType","description":"Gets the type (integer, float or string) of a player variable.","body":"GetPVarType(${1:playerid}, ${2:varname[]})$0"},"SetPlayerChatBubble":{"prefix":"SetPlayerChatBubble","description":"Creates a chat bubble above a player's name tag.","body":"SetPlayerChatBubble(${1:playerid}, ${2:text[]}, ${3:color}, ${4:Float:drawdistance}, ${5:expiretime})$0"},"PutPlayerInVehicle":{"prefix":"PutPlayerInVehicle","description":"Puts a player in a vehicle.","body":"PutPlayerInVehicle(${1:playerid}, ${2:vehicleid}, ${3:seatid})$0"},"GetPlayerVehicleID":{"prefix":"GetPlayerVehicleID","description":"This function gets the ID of the vehicle the player is currently in. Note: NOT the model id of the vehicle. See GetVehicleModel for that.","body":"GetPlayerVehicleID(${1:playerid})$0"},"GetPlayerVehicleSeat":{"prefix":"GetPlayerVehicleSeat","description":"Find out which seat a player is in.","body":"GetPlayerVehicleSeat(${1:playerid})$0"},"RemovePlayerFromVehicle":{"prefix":"RemovePlayerFromVehicle","description":"Removes/ejects a player from their vehicle.","body":"RemovePlayerFromVehicle(${1:playerid})$0"},"TogglePlayerControllable":{"prefix":"TogglePlayerControllable","description":"Toggles whether a player can control their character or not. The player will also be unable to move their camera.","body":"TogglePlayerControllable(${1:playerid}, ${2:toggle})$0"},"PlayerPlaySound":{"prefix":"PlayerPlaySound","description":"Plays the specified sound for a player.","body":"PlayerPlaySound(${1:playerid}, ${2:soundid}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"ApplyAnimation":{"prefix":"ApplyAnimation","description":"Apply an animation to a player.","body":"ApplyAnimation(${1:playerid}, ${2:animlib[]}, ${3:animname[]}, ${4:Float:fDelta}, ${5:loop}, ${6:lockx}, ${7:locky}, ${8:freeze}, ${9:time}, ${10:forcesync = 0})$0"},"ClearAnimations":{"prefix":"ClearAnimations","description":"Clears all animations for the given player (it also cancels all current tasks such as jetpacking,parachuting,entering vehicles, driving (removes player out of vehicle), swimming, etc.. ).","body":"ClearAnimations(${1:playerid}, ${2:forcesync = 0})$0"},"GetPlayerAnimationIndex":{"prefix":"GetPlayerAnimationIndex","description":"Returns the index of any running applied animations.","body":"GetPlayerAnimationIndex(${1:playerid})$0"},"GetAnimationName":{"prefix":"GetAnimationName","description":"Get the animation library/name for the index.","body":"GetAnimationName(${1:index}, ${2:animlib[]}, ${3:len1}, ${4:animname[]}, ${5:len2})$0"},"GetPlayerSpecialAction":{"prefix":"GetPlayerSpecialAction","description":"Retrieves a player's current special action.","body":"GetPlayerSpecialAction(${1:playerid})$0"},"SetPlayerSpecialAction":{"prefix":"SetPlayerSpecialAction","description":"This function allows to set players special action.","body":"SetPlayerSpecialAction(${1:playerid}, ${2:actionid})$0"},"DisableRemoteVehicleCollisions":{"prefix":"DisableRemoteVehicleCollisions","description":"Disables collisions between occupied vehicles for a player.","body":"DisableRemoteVehicleCollisions(${1:playerid}, ${2:disable})$0"},"SetPlayerCheckpoint":{"prefix":"SetPlayerCheckpoint","description":"Sets a checkpoint (red cylinder) for a player. Also shows a red blip on the radar. When players enter a checkpoint, OnPlayerEnterCheckpoint is called and actions can be performed.","body":"SetPlayerCheckpoint(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:size})$0"},"DisablePlayerCheckpoint":{"prefix":"DisablePlayerCheckpoint","description":"Disables (hides/destroys) a player's set checkpoint. Players can only have a single checkpoint set at a time. Checkpoints don't need to be disabled before setting another one.","body":"DisablePlayerCheckpoint(${1:playerid})$0"},"SetPlayerRaceCheckpoint":{"prefix":"SetPlayerRaceCheckpoint","description":"Creates a race checkpoint. When the player enters it, the OnPlayerEnterRaceCheckpoint callback is called.","body":"SetPlayerRaceCheckpoint(${1:playerid}, ${2:type}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z}, ${6:Float:nextx}, ${7:Float:nexty}, ${8:Float:nextz}, ${9:Float:size})$0"},"DisablePlayerRaceCheckpoint":{"prefix":"DisablePlayerRaceCheckpoint","description":"Disable any initialized race checkpoints for a specific player, since you can only have one at any given time.","body":"DisablePlayerRaceCheckpoint(${1:playerid})$0"},"SetPlayerWorldBounds":{"prefix":"SetPlayerWorldBounds","description":"Set the world boundaries for a player. Players can not go out of the boundaries (they will be pushed back in).","body":"SetPlayerWorldBounds(${1:playerid}, ${2:Float:x_max}, ${3:Float:x_min}, ${4:Float:y_max}, ${5:Float:y_min})$0"},"SetPlayerMarkerForPlayer":{"prefix":"SetPlayerMarkerForPlayer","description":"Change the colour of a player's nametag and radar blip for another player.","body":"SetPlayerMarkerForPlayer(${1:playerid}, ${2:showplayerid}, ${3:color})$0"},"ShowPlayerNameTagForPlayer":{"prefix":"ShowPlayerNameTagForPlayer","description":"This functions allows you to toggle the drawing of player nametags, healthbars and armor bars which display above their head. For use of a similar function like this on a global level, ShowNameTags function.","body":"ShowPlayerNameTagForPlayer(${1:playerid}, ${2:showplayerid}, ${3:show})$0"},"SetPlayerMapIcon":{"prefix":"SetPlayerMapIcon","description":"Place an icon/marker on a player's map. Can be used to mark locations such as banks and hospitals to players.","body":"SetPlayerMapIcon(${1:playerid}, ${2:iconid}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z}, ${6:markertype}, ${7:color}, ${8:style = MAPICON_LOCAL})$0"},"RemovePlayerMapIcon":{"prefix":"RemovePlayerMapIcon","description":"Removes a map icon that was set earlier for a player using SetPlayerMapIcon.","body":"RemovePlayerMapIcon(${1:playerid}, ${2:iconid})$0"},"AllowPlayerTeleport":{"prefix":"AllowPlayerTeleport","description":"Enable/Disable the teleporting ability for a player by right-clicking on the map","body":"AllowPlayerTeleport(${1:playerid}, ${2:allow})$0"},"SetPlayerCameraPos":{"prefix":"SetPlayerCameraPos","description":"Sets the camera to a specific position for a player.","body":"SetPlayerCameraPos(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"SetPlayerCameraLookAt":{"prefix":"SetPlayerCameraLookAt","description":"Set the direction a player's camera looks at. Generally meant to be used in combination with SetPlayerCameraPos.","body":"SetPlayerCameraLookAt(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5|CAMERA_CUT,CAMERA_MOVE|})$0"},"SetCameraBehindPlayer":{"prefix":"SetCameraBehindPlayer","description":"Restore the camera to a place behind the player, after using a function like SetPlayerCameraPos.","body":"SetCameraBehindPlayer(${1:playerid})$0"},"GetPlayerCameraPos":{"prefix":"GetPlayerCameraPos","description":"Get the position of the player's camera.","body":"GetPlayerCameraPos(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"GetPlayerCameraFrontVector":{"prefix":"GetPlayerCameraFrontVector","description":"This function will return the current direction of player's aiming in 3-D space, the coords are relative to the camera position, see GetPlayerCameraPos.","body":"GetPlayerCameraFrontVector(${1:playerid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"GetPlayerCameraMode":{"prefix":"GetPlayerCameraMode","description":"Returns the current GTA camera mode for the requested player. The camera modes are useful in determining whether a player is aiming, doing a passenger driveby etc.","body":"GetPlayerCameraMode(${1:playerid})$0"},"EnablePlayerCameraTarget":{"prefix":"EnablePlayerCameraTarget","description":"Toggle camera targeting functions for a player. Disabled by default to save bandwidth.","body":"EnablePlayerCameraTarget(${1:playerid}, ${2:enable})$0"},"GetPlayerCameraTargetObject":{"prefix":"GetPlayerCameraTargetObject","description":"Allows you to retrieve the ID of the object the player is looking at.","body":"GetPlayerCameraTargetObject(${1:playerid})$0"},"GetPlayerCameraTargetVehicle":{"prefix":"GetPlayerCameraTargetVehicle","description":"Get the ID of the vehicle the player is looking at.","body":"GetPlayerCameraTargetVehicle(${1:playerid})$0"},"GetPlayerCameraTargetPlayer":{"prefix":"GetPlayerCameraTargetPlayer","description":"Allows you to retrieve the ID of the player the playerid is looking at.","body":"GetPlayerCameraTargetPlayer(${1:playerid})$0"},"GetPlayerCameraTargetActor":{"prefix":"GetPlayerCameraTargetActor","description":"Allows you to retrieve the ID of the actor the player is looking at (in any).","body":"GetPlayerCameraTargetActor(${1:playerid})$0"},"GetPlayerCameraAspectRatio":{"prefix":"GetPlayerCameraAspectRatio","description":"Retrieves the aspect ratio of a player's camera.","body":"GetPlayerCameraAspectRatio(${1:playerid})$0"},"GetPlayerCameraZoom":{"prefix":"GetPlayerCameraZoom","description":"Retrieves the game camera zoom level for a given player.","body":"GetPlayerCameraZoom(${1:playerid})$0"},"AttachCameraToObject":{"prefix":"AttachCameraToObject","description":"You can use this function to attach the player camera to objects.","body":"AttachCameraToObject(${1:playerid}, ${2:objectid})$0"},"AttachCameraToPlayerObject":{"prefix":"AttachCameraToPlayerObject","description":"","body":"AttachCameraToPlayerObject(${1:playerid}, ${2:playerobjectid})$0"},"InterpolateCameraPos":{"prefix":"InterpolateCameraPos","description":"Attaches a player's camera to a player-object. The player is able to move their camera while it is attached to an object. Can be used with MovePlayerObject and AttachPlayerObjectToVehicle.","body":"InterpolateCameraPos(${1:playerid}, ${2:Float:FromX}, ${3:Float:FromY}, ${4:Float:FromZ}, ${5:Float:ToX}, ${6:Float:ToY}, ${7:Float:ToZ}, ${8:time}, ${9:cut = CAMERA_CUT})$0"},"InterpolateCameraLookAt":{"prefix":"InterpolateCameraLookAt","description":"Interpolate a player's camera's 'look at' point between two coordinates with a set speed. Can be be used with InterpolateCameraPos.","body":"InterpolateCameraLookAt(${1:playerid}, ${2:Float:FromX}, ${3:Float:FromY}, ${4:Float:FromZ}, ${5:Float:ToX}, ${6:Float:ToY}, ${7:Float:ToZ}, ${8:time}, ${9:cut = CAMERA_CUT})$0"},"IsPlayerConnected":{"prefix":"IsPlayerConnected","description":"Checks if a player is connected (if an ID is taken by a connected player).","body":"IsPlayerConnected(${1:playerid})$0"},"IsPlayerInVehicle":{"prefix":"IsPlayerInVehicle","description":"Checks if a player is in a specific vehicle.","body":"IsPlayerInVehicle(${1:playerid}, ${2:vehicleid})$0"},"IsPlayerInAnyVehicle":{"prefix":"IsPlayerInAnyVehicle","description":"Check if a player is inside any vehicle (as a driver or passenger).","body":"IsPlayerInAnyVehicle(${1:playerid})$0"},"IsPlayerInCheckpoint":{"prefix":"IsPlayerInCheckpoint","description":"Check if the player is currently inside a checkpoint, this could be used for properties or teleport points for example.","body":"IsPlayerInCheckpoint(${1:playerid})$0"},"IsPlayerInRaceCheckpoint":{"prefix":"IsPlayerInRaceCheckpoint","description":"Check if the player is inside their current set race checkpoint (SetPlayerRaceCheckpoint).","body":"IsPlayerInRaceCheckpoint(${1:playerid})$0"},"SetPlayerVirtualWorld":{"prefix":"SetPlayerVirtualWorld","description":"Set the virtual world of a player. They can only see other players or vehicles that are in that same world.","body":"SetPlayerVirtualWorld(${1:playerid}, ${2:worldid})$0"},"GetPlayerVirtualWorld":{"prefix":"GetPlayerVirtualWorld","description":"Retrieves the current virtual world the player is in.","body":"GetPlayerVirtualWorld(${1:playerid})$0"},"EnableStuntBonusForPlayer":{"prefix":"EnableStuntBonusForPlayer","description":"Toggle stunt bonuses for a player. Enabled by default.","body":"EnableStuntBonusForPlayer(${1:playerid}, ${2:enable})$0"},"EnableStuntBonusForAll":{"prefix":"EnableStuntBonusForAll","description":"Enables or disables stunt bonuses for all players. If enabled, players will receive monetary rewards when performing a stunt in a vehicle (e.g. a wheelie).","body":"EnableStuntBonusForAll(${1:enable})$0"},"TogglePlayerSpectating":{"prefix":"TogglePlayerSpectating","description":"Toggle whether a player is in spectator mode or not. While in spectator mode a player can spectate (watch) other players and vehicles. After using this function, either PlayerSpectatePlayer or PlayerSpectateVehicle needs to be used.","body":"TogglePlayerSpectating(${1:playerid}, ${2:toggle})$0"},"PlayerSpectatePlayer":{"prefix":"PlayerSpectatePlayer","description":"Makes a player spectate (watch) another player.","body":"PlayerSpectatePlayer(${1:playerid}, ${2:targetplayerid}, ${3:mode = SPECTATE_MODE_NORMAL})$0"},"PlayerSpectateVehicle":{"prefix":"PlayerSpectateVehicle","description":"Sets a player to spectate another vehicle. Their camera will be attached to the vehicle as if they are driving it.","body":"PlayerSpectateVehicle(${1:playerid}, ${2:targetvehicleid}, ${3:mode = SPECTATE_MODE_NORMAL})$0"},"StartRecordingPlayerData":{"prefix":"StartRecordingPlayerData","description":"Starts recording a player's movements to a file, which can then be reproduced by an NPC.","body":"StartRecordingPlayerData(${1:playerid}, ${2:recordtype}, ${3:recordname[]})$0"},"StopRecordingPlayerData":{"prefix":"StopRecordingPlayerData","description":"Stops all the recordings that had been started with StartRecordingPlayerData for a specific player.","body":"StopRecordingPlayerData(${1:playerid})$0"},"SelectTextDraw":{"prefix":"SelectTextDraw","description":"Display the cursor and allow the player to select a textdraw","body":"SelectTextDraw(${1:playerid}, ${2:hovercolor})$0"},"CancelSelectTextDraw":{"prefix":"CancelSelectTextDraw","description":"Cancel textdraw selection with the mouse","body":"CancelSelectTextDraw(${1:playerid})$0"},"CreateExplosionForPlayer":{"prefix":"CreateExplosionForPlayer","description":"Creates an explosion that is only visible to a single player. This can be used to isolate explosions from other players or to make them only appear in specific virtual worlds.","body":"CreateExplosionForPlayer(${1:playerid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z}, ${5:type}, ${6:Float:Radius})$0"},"print":{"prefix":"print","description":"Prints a string to the server console (not in-game chat) and logs (server_log.txt).","body":"print(${1:const string[]})$0"},"printf":{"prefix":"printf","description":"Outputs a formatted string on the console (the server window, not the in-game chat).","body":"printf(${1:const format[]}, ${2:...})$0"},"format":{"prefix":"format","description":"Formats a string to include variables and other strings inside it.","body":"format(${1:output[]}, ${2:len}, ${3:const format[]}, ${4:...})$0"},"SendClientMessage":{"prefix":"SendClientMessage","description":"This function sends a message to a specific player with a chosen color in the chat. The whole line in the chatbox will be in the set color unless color embedding is used (0.3c or later).","body":"SendClientMessage(${1:playerid}, ${2:color}, ${3:const message[]})$0"},"SendClientMessageToAll":{"prefix":"SendClientMessageToAll","description":"Displays a message in chat to all players. This is a multi-player equivalent of SendClientMessage.","body":"SendClientMessageToAll(${1:color}, ${2:const message[]})$0"},"SendPlayerMessageToPlayer":{"prefix":"SendPlayerMessageToPlayer","description":"Sends a message in the name of a player to another player on the server. The message will appear in the chat box but can only be seen by the user specified with 'playerid'. The line will start with the sender's name in their color, followed by the message in white.","body":"SendPlayerMessageToPlayer(${1:playerid}, ${2:senderid}, ${3:const message[]})$0"},"SendPlayerMessageToAll":{"prefix":"SendPlayerMessageToAll","description":"Sends a message in the name of a player to all other players on the server. The line will start with the sender's name in their color, followed by the message in white.","body":"SendPlayerMessageToAll(${1:senderid}, ${2:const message[]})$0"},"SendDeathMessage":{"prefix":"SendDeathMessage","description":"Adds a death to the 'killfeed' on the right-hand side of the screen for all players.","body":"SendDeathMessage(${1:killer}, ${2:killee}, ${3:weapon})$0"},"SendDeathMessageToPlayer":{"prefix":"SendDeathMessageToPlayer","description":"Adds a death to the 'killfeed' on the right-hand side of the screen for a single player.","body":"SendDeathMessageToPlayer(${1:playerid}, ${2:killer}, ${3:killee}, ${4:weapon})$0"},"GameTextForAll":{"prefix":"GameTextForAll","description":"Shows 'game text' (on-screen text) for a certain length of time for all players.","body":"GameTextForAll(${1:const string[]}, ${2:time}, ${3:style})$0"},"GameTextForPlayer":{"prefix":"GameTextForPlayer","description":"Shows 'game text' (on-screen text) for a certain length of time for a specific player.","body":"GameTextForPlayer(${1:playerid}, ${2:const string[]}, ${3:time}, ${4:style})$0"},"SetTimer":{"prefix":"SetTimer","description":"Sets a 'timer' to call a function after some time. Can be set to repeat.","body":"SetTimer(${1:funcname[]}, ${2:interval}, ${3:repeating})$0"},"SetTimerEx":{"prefix":"SetTimerEx","description":"","body":"SetTimerEx(${1:funcname[]}, ${2:interval}, ${3:repeating}, ${4:const format[]}, ${5:...})$0"},"KillTimer":{"prefix":"KillTimer","description":"Sets a timer to call a function after the specified interval. This variant ('Ex') can pass parameters (such as a player ID) to the function.","body":"KillTimer(${1:timerid})$0"},"GetTickCount":{"prefix":"GetTickCount","description":"Returns the uptime of the actual server (not the SA-MP server) in milliseconds.","body":"GetTickCount()$0"},"GetMaxPlayers":{"prefix":"GetMaxPlayers","description":"Returns the maximum number of players that can join the server, as set by the server variable 'maxplayers' in server.cfg.","body":"GetMaxPlayers()$0"},"CallRemoteFunction":{"prefix":"CallRemoteFunction","description":"Calls a public function in any script that is loaded.","body":"CallRemoteFunction(${1:const function[]}, ${2:const format[]}, ${3:...})$0"},"CallLocalFunction":{"prefix":"CallLocalFunction","description":"Calls a public function from the script in which it is used.","body":"CallLocalFunction(${1:const function[]}, ${2:const format[]}, ${3:...})$0"},"VectorSize":{"prefix":"VectorSize","description":"Returns the norm (length) of the provided vector.","body":"VectorSize(${1:Float:x}, ${2:Float:y}, ${3:Float:z})$0"},"asin":{"prefix":"asin","description":"Returns the arcsine (in radians) of a number.","body":"asin(${1:Float:value})$0"},"acos":{"prefix":"acos","description":"Returns the arccos (in radians) of a number.","body":"acos(${1:Float:value})$0"},"atan":{"prefix":"atan","description":"Get the inversed value of an arc tangent in radians.","body":"atan(${1:Float:value})$0"},"atan2":{"prefix":"atan2","description":"Get the inversed value of an arc tangent in radians.","body":"atan2(${1:Float:x}, ${2:Float:y})$0"},"GetPlayerPoolSize":{"prefix":"GetPlayerPoolSize","description":"Gets the highest playerid currently in use on the server.","body":"GetPlayerPoolSize()$0"},"GetVehiclePoolSize":{"prefix":"GetVehiclePoolSize","description":"Gets the highest vehicleid currently in use on the server.","body":"GetVehiclePoolSize()$0"},"GetActorPoolSize":{"prefix":"GetActorPoolSize","description":"Gets the highest actorid created on the server.","body":"GetActorPoolSize()$0"},"SHA256_PassHash":{"prefix":"SHA256_PassHash","description":"Hashes a password using the SHA-256 hashing algorithm. Includes a salt. The output is always 256 bytes in length, or the equivalent of 64 Pawn cells.","body":"SHA256_PassHash(${1:password[]}, ${2:salt[]}, ${3:ret_hash[]}, ${4:ret_hash_len})$0"},"SetSVarInt":{"prefix":"SetSVarInt","description":"Set an integer server variable.","body":"SetSVarInt(${1:varname[]}, ${2:int_value})$0"},"GetSVarInt":{"prefix":"GetSVarInt","description":"Gets an integer server variable's value.","body":"GetSVarInt(${1:varname[]})$0"},"SetSVarString":{"prefix":"SetSVarString","description":"Set a string server variable.","body":"SetSVarString(${1:varname[]}, ${2:string_value[]})$0"},"GetSVarString":{"prefix":"GetSVarString","description":"Gets a string server variable's value.","body":"GetSVarString(${1:varname[]}, ${2:string_return[]}, ${3:len})$0"},"SetSVarFloat":{"prefix":"SetSVarFloat","description":"Set a float server variable.","body":"SetSVarFloat(${1:varname[]}, ${2:Float:float_value})$0"},"GetSVarFloat":{"prefix":"GetSVarFloat","description":"Gets a float server variable's value.","body":"GetSVarFloat(${1:varname[]})$0"},"DeleteSVar":{"prefix":"DeleteSVar","description":"Deletes a previously set server variable.","body":"DeleteSVar(${1:varname[]})$0"},"GetSVarsUpperIndex":{"prefix":"GetSVarsUpperIndex","description":"Each SVar (server-variable) has its own unique identification number for lookup, this function returns the highest ID.","body":"GetSVarsUpperIndex()$0"},"GetSVarNameAtIndex":{"prefix":"GetSVarNameAtIndex","description":"Retrieve the name of a sVar via the index.","body":"GetSVarNameAtIndex(${1:index}, ${2:ret_varname[]}, ${3:ret_len})$0"},"GetSVarType":{"prefix":"GetSVarType","description":"Gets the type (integer, float or string) of a server variable.","body":"GetSVarType(${1:varname[]})$0"},"SetGameModeText":{"prefix":"SetGameModeText","description":"Set the name of the game mode, which appears in the server browser.","body":"SetGameModeText(${1:const string[]})$0"},"SetTeamCount":{"prefix":"SetTeamCount","description":"This function is used to change the amount of teams used in the gamemode. It has no obvious way of being used, but can help to indicate the number of teams used for better (more effective) internal handling. This function should only be used in the OnGameModeInit callback. Important: You can pass 2 billion here if you like, this function has no effect at all.","body":"SetTeamCount(${1:count})$0"},"AddPlayerClass":{"prefix":"AddPlayerClass","description":"Adds a class to class selection. Classes are used so players may spawn with a skin of their choice.","body":"AddPlayerClass(${1:modelid}, ${2:Float:spawn_x}, ${3:Float:spawn_y}, ${4:Float:spawn_z}, ${5:Float:z_angle}, ${6:weapon1}, ${7:weapon1_ammo}, ${8:weapon2}, ${9:weapon2_ammo}, ${10:weapon3}, ${11:weapon3_ammo})$0"},"AddPlayerClassEx":{"prefix":"AddPlayerClassEx","description":"This function is exactly the same as the AddPlayerClass function, with the addition of a team parameter.","body":"AddPlayerClassEx(${1:teamid}, ${2:modelid}, ${3:Float:spawn_x}, ${4:Float:spawn_y}, ${5:Float:spawn_z}, ${6:Float:z_angle}, ${7:weapon1}, ${8:weapon1_ammo}, ${9:weapon2}, ${10:weapon2_ammo}, ${11:weapon3}, ${12:weapon3_ammo})$0"},"AddStaticVehicle":{"prefix":"AddStaticVehicle","description":"Adds a 'static' vehicle (models are pre-loaded for players) to the gamemode.","body":"AddStaticVehicle(${1:modelid}, ${2:Float:spawn_x}, ${3:Float:spawn_y}, ${4:Float:spawn_z}, ${5:Float:z_angle}, ${6:color1}, ${7:color2})$0"},"AddStaticVehicleEx":{"prefix":"AddStaticVehicleEx","description":"Adds a 'static' vehicle (models are pre-loaded for players)to the gamemode. Differs from AddStaticVehicle in only one way: allows a respawn time to be set for when the vehicle is left unoccupied by the driver.","body":"AddStaticVehicleEx(${1:modelid}, ${2:Float:spawn_x}, ${3:Float:spawn_y}, ${4:Float:spawn_z}, ${5:Float:z_angle}, ${6:color1}, ${7:color2}, ${8:respawn_delay}, ${9:addsiren=0})$0"},"AddStaticPickup":{"prefix":"AddStaticPickup","description":"This function adds a 'static' pickup to the game. These pickups support weapons, health, armor etc., with the ability to function without scripting them (weapons/health/armor will be given automatically).","body":"AddStaticPickup(${1:model}, ${2:type}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z}, ${6:virtualworld = 0})$0"},"CreatePickup":{"prefix":"CreatePickup","description":"This function does exactly the same as AddStaticPickup, except it returns a pickup ID which can be used to destroy it afterwards and be tracked using OnPlayerPickUpPickup.","body":"CreatePickup(${1:model}, ${2:type}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z}, ${6:virtualworld = 0})$0"},"DestroyPickup":{"prefix":"DestroyPickup","description":"Destroys a pickup created with CreatePickup.","body":"DestroyPickup(${1:pickup})$0"},"ShowNameTags":{"prefix":"ShowNameTags","description":"Toggle the drawing of nametags, health bars and armor bars above players.","body":"ShowNameTags(${1:show})$0"},"ShowPlayerMarkers":{"prefix":"ShowPlayerMarkers","description":"Toggles player markers (blips on the radar). Must be used when the server starts (OnGameModeInit). For other times, see SetPlayerMarkerForPlayer.","body":"ShowPlayerMarkers(${1:mode})$0"},"GameModeExit":{"prefix":"GameModeExit","description":"Ends the current gamemode.","body":"GameModeExit()$0"},"SetWorldTime":{"prefix":"SetWorldTime","description":"Sets the world time (for all players) to a specific hour.","body":"SetWorldTime(${1:hour})$0"},"GetWeaponName":{"prefix":"GetWeaponName","description":"Get the name of a weapon.","body":"GetWeaponName(${1:weaponid}, ${2:const weapon[]}, ${3:len})$0"},"EnableTirePopping":{"prefix":"EnableTirePopping","description":"With this function you can enable or disable tire popping.","body":"EnableTirePopping(${1:enable})$0"},"EnableVehicleFriendlyFire":{"prefix":"EnableVehicleFriendlyFire","description":"Enable friendly fire for team vehicles. Players will be unable to damage teammates' vehicles (SetPlayerTeam must be used!).","body":"EnableVehicleFriendlyFire()$0"},"AllowInteriorWeapons":{"prefix":"AllowInteriorWeapons","description":"Toggle whether the usage of weapons in interiors is allowed or not.","body":"AllowInteriorWeapons(${1:allow})$0"},"SetWeather":{"prefix":"SetWeather","description":"Set the world weather for all players.","body":"SetWeather(${1:weatherid})$0"},"SetGravity":{"prefix":"SetGravity","description":"Set the gravity for all players.","body":"SetGravity(${1:Float:gravity})$0"},"AllowAdminTeleport":{"prefix":"AllowAdminTeleport","description":"This function will determine whether RCON admins will be teleported to their waypoint when they set one.","body":"AllowAdminTeleport(${1:allow})$0"},"SetDeathDropAmount":{"prefix":"SetDeathDropAmount","description":"Warning: This function does not work in the current SA:MP version!","body":"SetDeathDropAmount(${1:amount})$0"},"CreateExplosion":{"prefix":"CreateExplosion","description":"Create an explosion at the specified coordinates.","body":"CreateExplosion(${1:Float:X}, ${2:Float:Y}, ${3:Float:Z}, ${4:type}, ${5:Float:Radius})$0"},"EnableZoneNames":{"prefix":"EnableZoneNames","description":"This function allows to turn on zone / area names such as the 'Vinewood' or 'Doherty' text at the bottom-right of the screen as they enter the area. This is a gamemode option and should be set in the callback OnGameModeInit.","body":"EnableZoneNames(${1:enable})$0"},"UsePlayerPedAnims":{"prefix":"UsePlayerPedAnims","description":"Uses standard player walking animation (animation of the CJ skin) instead of custom animations for every skin (e.g. skating for skater skins).","body":"UsePlayerPedAnims()$0"},"DisableInteriorEnterExits":{"prefix":"DisableInteriorEnterExits","description":"","body":"DisableInteriorEnterExits()$0"},"SetNameTagDrawDistance":{"prefix":"SetNameTagDrawDistance","description":"Disable all the interior entrances and exits in the game (the yellow arrows at doors).","body":"SetNameTagDrawDistance(${1:Float:distance})$0"},"DisableNameTagLOS":{"prefix":"DisableNameTagLOS","description":"Disables the nametag Line-Of-Sight checking so that players can see nametags through objects.","body":"DisableNameTagLOS()$0"},"LimitGlobalChatRadius":{"prefix":"LimitGlobalChatRadius","description":"Set a radius limitation for the chat. Only players at a certain distance from the player will see their message in the chat. Also changes the distance at which a player can see other players on the map at the same distance.","body":"LimitGlobalChatRadius(${1:Float:chat_radius})$0"},"LimitPlayerMarkerRadius":{"prefix":"LimitPlayerMarkerRadius","description":"Set the player marker radius.","body":"LimitPlayerMarkerRadius(${1:Float:marker_radius})$0"},"ConnectNPC":{"prefix":"ConnectNPC","description":"Connect an NPC to the server.","body":"ConnectNPC(${1:name[]}, ${2:script[]})$0"},"IsPlayerNPC":{"prefix":"IsPlayerNPC","description":"Check if a player is an actual player or an NPC.","body":"IsPlayerNPC(${1:playerid})$0"},"IsPlayerAdmin":{"prefix":"IsPlayerAdmin","description":"Check if a player is logged in as an RCON admin.","body":"IsPlayerAdmin(${1:playerid})$0"},"Kick":{"prefix":"Kick","description":"Kicks a player from the server. They will have to quit the game and re-connect if they wish to continue playing.","body":"Kick(${1:playerid})$0"},"Ban":{"prefix":"Ban","description":"Ban a player who is currently in the server. They will be unable to join the server ever again. The ban will be IP-based, and be saved in the samp.ban file in the server's root directory. BanEx can be used to give a reason for the ban. IP bans can be added/removed using the RCON banip and unbanip commands (SendRconCommand).","body":"Ban(${1:playerid})$0"},"BanEx":{"prefix":"BanEx","description":"Ban a player with a reason.","body":"BanEx(${1:playerid}, ${2:const reason[]})$0"},"SendRconCommand":{"prefix":"SendRconCommand","description":"Sends an RCON (Remote Console) command.","body":"SendRconCommand(${1:command[]})$0"},"GetPlayerNetworkStats":{"prefix":"GetPlayerNetworkStats","description":"Gets a player's network stats and saves them into a string.","body":"GetPlayerNetworkStats(${1:playerid}, ${2:retstr[]}, ${3:retstr_size})$0"},"GetNetworkStats":{"prefix":"GetNetworkStats","description":"Gets the server's network stats and stores them in a string.","body":"GetNetworkStats(${1:retstr[]}, ${2:retstr_size})$0"},"GetPlayerVersion":{"prefix":"GetPlayerVersion","description":"Returns the SA-MP client version, as reported by the player.","body":"GetPlayerVersion(${1:playerid}, ${2:const version[]}, ${3:len})$0"},"BlockIpAddress":{"prefix":"BlockIpAddress","description":"Blocks an IP address from further communication with the server for a set amount of time (with wildcards allowed). Players trying to connect to the server with a blocked IP address will receive the generic 'You are banned from this server.' message. Players that are online on the specified IP before the block will timeout after a few seconds and, upon reconnect, will receive the same message.","body":"BlockIpAddress(${1:ip_address[]}, ${2:timems})$0"},"UnBlockIpAddress":{"prefix":"UnBlockIpAddress","description":"Unblock an IP address that was previously blocked using BlockIpAddress.","body":"UnBlockIpAddress(${1:ip_address[]})$0"},"GetServerVarAsString":{"prefix":"GetServerVarAsString","description":"Get the string value of a server variable.","body":"GetServerVarAsString(${1:const varname[]}, ${2:buffer[]}, ${3:len})$0"},"GetServerVarAsInt":{"prefix":"GetServerVarAsInt","description":"Get the integer value of a server variable.","body":"GetServerVarAsInt(${1:const varname[]})$0"},"GetServerVarAsBool":{"prefix":"GetServerVarAsBool","description":"Get the boolean value of a server variable.","body":"GetServerVarAsBool(${1:const varname[]})$0"},"GetConsoleVarAsString":{"prefix":"GetConsoleVarAsString","description":"Get the string value of a console variable.","body":"GetConsoleVarAsString(${1:const varname[]}, ${2:buffer[]}, ${3:len})$0"},"GetConsoleVarAsInt":{"prefix":"GetConsoleVarAsInt","description":"Get the integer value of a console variable.","body":"GetConsoleVarAsInt(${1:const varname[]})$0"},"GetConsoleVarAsBool":{"prefix":"GetConsoleVarAsBool","description":"Get the boolean value of a console variable.","body":"GetConsoleVarAsBool(${1:const varname[]})$0"},"GetServerTickRate":{"prefix":"GetServerTickRate","description":"Gets the tick rate (like FPS) of the server.","body":"GetServerTickRate()$0"},"NetStats_GetConnectedTime":{"prefix":"NetStats_GetConnectedTime","description":"Gets the amount of time (in milliseconds) that a player has been connected to the server for.","body":"NetStats_GetConnectedTime(${1:playerid})$0"},"NetStats_MessagesReceived":{"prefix":"NetStats_MessagesReceived","description":"Gets the number of messages the server has received from the player.","body":"NetStats_MessagesReceived(${1:playerid})$0"},"NetStats_BytesReceived":{"prefix":"NetStats_BytesReceived","description":"Gets the amount of data (in bytes) that the server has received from the player.","body":"NetStats_BytesReceived(${1:playerid})$0"},"NetStats_MessagesSent":{"prefix":"NetStats_MessagesSent","description":"Gets the number of messages the server has sent to the player.","body":"NetStats_MessagesSent(${1:playerid})$0"},"NetStats_BytesSent":{"prefix":"NetStats_BytesSent","description":"Gets the amount of data (in bytes) that the server has sent to the player.","body":"NetStats_BytesSent(${1:playerid})$0"},"NetStats_MessagesRecvPerSecond":{"prefix":"NetStats_MessagesRecvPerSecond","description":"Gets the number of messages the player has received in the last second.","body":"NetStats_MessagesRecvPerSecond(${1:playerid})$0"},"NetStats_PacketLossPercent":{"prefix":"NetStats_PacketLossPercent","description":"Gets the packet loss percentage of a player. Packet loss means data the player is sending to the server is being lost (or vice-versa).","body":"NetStats_PacketLossPercent(${1:playerid})$0"},"NetStats_ConnectionStatus":{"prefix":"NetStats_ConnectionStatus","description":"Gets the player's current connection status.","body":"NetStats_ConnectionStatus(${1:playerid})$0"},"NetStats_GetIpPort":{"prefix":"NetStats_GetIpPort","description":"Get a player's IP and port.","body":"NetStats_GetIpPort(${1:playerid}, ${2:ip_port[]}, ${3:ip_port_len})$0"},"CreateMenu":{"prefix":"CreateMenu","description":"Creates a menu.","body":"CreateMenu(${1:const title[]}, ${2:columns}, ${3:Float:x}, ${4:Float:y}, ${5:Float:col1width}, ${6:Float:col2width = 0.0})$0"},"DestroyMenu":{"prefix":"DestroyMenu","description":"Destroys the specified menu.","body":"DestroyMenu(${1:Menu:menuid})$0"},"AddMenuItem":{"prefix":"AddMenuItem","description":"Adds an item to a specified menu.","body":"AddMenuItem(${1:Menu:menuid}, ${2:column}, ${3:const menutext[]})$0"},"SetMenuColumnHeader":{"prefix":"SetMenuColumnHeader","description":"Sets the caption of a column in a menu.","body":"SetMenuColumnHeader(${1:Menu:menuid}, ${2:column}, ${3:const columnheader[]})$0"},"ShowMenuForPlayer":{"prefix":"ShowMenuForPlayer","description":"Shows a previously created menu for a player.","body":"ShowMenuForPlayer(${1:Menu:menuid}, ${2:playerid})$0"},"HideMenuForPlayer":{"prefix":"HideMenuForPlayer","description":"Hides a menu for a player.","body":"HideMenuForPlayer(${1:Menu:menuid}, ${2:playerid})$0"},"IsValidMenu":{"prefix":"IsValidMenu","description":"Checks if a menu is valid.","body":"IsValidMenu(${1:Menu:menuid})$0"},"DisableMenu":{"prefix":"DisableMenu","description":"Disable a menu.","body":"DisableMenu(${1:Menu:menuid})$0"},"DisableMenuRow":{"prefix":"DisableMenuRow","description":"Disable a specific row in a menu for all players. It will be greyed-out and can't be selected by players.","body":"DisableMenuRow(${1:Menu:menuid}, ${2:row})$0"},"GetPlayerMenu":{"prefix":"GetPlayerMenu","description":"Gets the ID of the menu the player is currently viewing (shown by ShowMenuForPlayer).","body":"GetPlayerMenu(${1:playerid})$0"},"TextDrawCreate":{"prefix":"TextDrawCreate","description":"Creates a textdraw. Textdraws are, as the name implies, text (mainly - there can be boxes, sprites and model previews (skins/vehicles/weapons/objects too) that is drawn on a player's screens. See this page for extensive information about textdraws.","body":"TextDrawCreate(${1:Float:x}, ${2:Float:y}, ${3:text[]})$0"},"TextDrawDestroy":{"prefix":"TextDrawDestroy","description":"Destroys a previously-created textdraw.","body":"TextDrawDestroy(${1:Text:text})$0"},"TextDrawLetterSize":{"prefix":"TextDrawLetterSize","description":"Sets the width and height of the letters.","body":"TextDrawLetterSize(${1:Text:text}, ${2:Float:x}, ${3:Float:y})$0"},"TextDrawTextSize":{"prefix":"TextDrawTextSize","description":"Change the size of a textdraw (box if TextDrawUseBox is enabled and/or clickable area for use with TextDrawSetSelectable).","body":"TextDrawTextSize(${1:Text:text}, ${2:Float:x}, ${3:Float:y})$0"},"TextDrawAlignment":{"prefix":"TextDrawAlignment","description":"Set the alignment of text in a text draw.","body":"TextDrawAlignment(${1:Text:text}, ${2:alignment})$0"},"TextDrawColor":{"prefix":"TextDrawColor","description":"Sets the text color of a textdraw","body":"TextDrawColor(${1:Text:text}, ${2:color})$0"},"TextDrawUseBox":{"prefix":"TextDrawUseBox","description":"Toggle whether a textdraw uses a box or not.","body":"TextDrawUseBox(${1:Text:text}, ${2:use})$0"},"TextDrawBoxColor":{"prefix":"TextDrawBoxColor","description":"Adjusts the text box colour (only used if TextDrawUseBox 'use' parameter is 1).","body":"TextDrawBoxColor(${1:Text:text}, ${2:color})$0"},"TextDrawSetShadow":{"prefix":"TextDrawSetShadow","description":"Sets the size of a textdraw's text's shadow.","body":"TextDrawSetShadow(${1:Text:text}, ${2:size})$0"},"TextDrawSetOutline":{"prefix":"TextDrawSetOutline","description":"Sets the thickness of a textdraw's text's outline. TextDrawBackgroundColor can be used to change the color.","body":"TextDrawSetOutline(${1:Text:text}, ${2:size})$0"},"TextDrawBackgroundColor":{"prefix":"TextDrawBackgroundColor","description":"Adjusts the text draw area background color (the outline/shadow - NOT the box. For box color, see TextDrawBoxColor).","body":"TextDrawBackgroundColor(${1:Text:text}, ${2:color})$0"},"TextDrawFont":{"prefix":"TextDrawFont","description":"Changes the text font.","body":"TextDrawFont(${1:Text:text}, ${2:font})$0"},"TextDrawSetProportional":{"prefix":"TextDrawSetProportional","description":"Appears to scale text spacing to a proportional ratio. Useful when using TextDrawLetterSize to ensure the text has even character spacing.","body":"TextDrawSetProportional(${1:Text:text}, ${2:set})$0"},"TextDrawSetSelectable":{"prefix":"TextDrawSetSelectable","description":"Sets whether a textdraw can be selected (clicked on) or not","body":"TextDrawSetSelectable(${1:Text:text}, ${2:set})$0"},"TextDrawShowForPlayer":{"prefix":"TextDrawShowForPlayer","description":"Shows a textdraw for a specific player.","body":"TextDrawShowForPlayer(${1:playerid}, ${2:Text:text})$0"},"TextDrawHideForPlayer":{"prefix":"TextDrawHideForPlayer","description":"Hides a textdraw for a specific player.","body":"TextDrawHideForPlayer(${1:playerid}, ${2:Text:text})$0"},"TextDrawShowForAll":{"prefix":"TextDrawShowForAll","description":"Shows a textdraw for all players.","body":"TextDrawShowForAll(${1:Text:text})$0"},"TextDrawHideForAll":{"prefix":"TextDrawHideForAll","description":"","body":"TextDrawHideForAll(${1:Text:text})$0"},"TextDrawSetString":{"prefix":"TextDrawSetString","description":"Hides a text draw for all players.","body":"TextDrawSetString(${1:Text:text}, ${2:string[]})$0"},"TextDrawSetPreviewModel":{"prefix":"TextDrawSetPreviewModel","description":"Set the model for a textdraw model preview. Click here to see this function's effect.","body":"TextDrawSetPreviewModel(${1:Text:text}, ${2:modelindex})$0"},"TextDrawSetPreviewRot":{"prefix":"TextDrawSetPreviewRot","description":"Sets the rotation and zoom of a 3D model preview textdraw.","body":"TextDrawSetPreviewRot(${1:Text:text}, ${2:Float:fRotX}, ${3:Float:fRotY}, ${4:Float:fRotZ}, ${5:Float:fZoom = 1.0})$0"},"TextDrawSetPreviewVehCol":{"prefix":"TextDrawSetPreviewVehCol","description":"If a vehicle model is used in a 3D preview textdraw, this sets the two colour values for that vehicle.","body":"TextDrawSetPreviewVehCol(${1:Text:text}, ${2:color1}, ${3:color2})$0"},"GangZoneCreate":{"prefix":"GangZoneCreate","description":"Create a gangzone (colored radar area).","body":"GangZoneCreate(${1:Float:minx}, ${2:Float:miny}, ${3:Float:maxx}, ${4:Float:maxy})$0"},"GangZoneDestroy":{"prefix":"GangZoneDestroy","description":"Destroy a gangzone.","body":"GangZoneDestroy(${1:zone})$0"},"GangZoneShowForPlayer":{"prefix":"GangZoneShowForPlayer","description":"Show a gangzone for a player. Must be created with GangZoneCreate first.","body":"GangZoneShowForPlayer(${1:playerid}, ${2:zone}, ${3:color})$0"},"GangZoneShowForAll":{"prefix":"GangZoneShowForAll","description":"Shows a gangzone with the desired color to all players.","body":"GangZoneShowForAll(${1:zone}, ${2:color})$0"},"GangZoneHideForPlayer":{"prefix":"GangZoneHideForPlayer","description":"Hides a gangzone for a player.","body":"GangZoneHideForPlayer(${1:playerid}, ${2:zone})$0"},"GangZoneHideForAll":{"prefix":"GangZoneHideForAll","description":"GangZoneHideForAll hides a gangzone from all players.","body":"GangZoneHideForAll(${1:zone})$0"},"GangZoneFlashForPlayer":{"prefix":"GangZoneFlashForPlayer","description":"Makes a gangzone flash for a player.","body":"GangZoneFlashForPlayer(${1:playerid}, ${2:zone}, ${3:flashcolor})$0"},"GangZoneFlashForAll":{"prefix":"GangZoneFlashForAll","description":"GangZoneFlashForAll flashes a gangzone for all players.","body":"GangZoneFlashForAll(${1:zone}, ${2:flashcolor})$0"},"GangZoneStopFlashForPlayer":{"prefix":"GangZoneStopFlashForPlayer","description":"Stops a gangzone flashing for a player.","body":"GangZoneStopFlashForPlayer(${1:playerid}, ${2:zone})$0"},"GangZoneStopFlashForAll":{"prefix":"GangZoneStopFlashForAll","description":"Stops a gangzone flashing for all players.","body":"GangZoneStopFlashForAll(${1:zone})$0"},"Create3DTextLabel":{"prefix":"Create3DTextLabel","description":"Creates a 3D Text Label at a specific location in the world","body":"Create3DTextLabel(${1:text[]}, ${2:color}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z}, ${6:Float:DrawDistance}, ${7:virtualworld}, ${8:testLOS=0})$0"},"Delete3DTextLabel":{"prefix":"Delete3DTextLabel","description":"Delete a 3D text label (created with Create3DTextLabel).","body":"Delete3DTextLabel(${1:Text3D:id})$0"},"Attach3DTextLabelToPlayer":{"prefix":"Attach3DTextLabelToPlayer","description":"Attach a 3D text label to a player.","body":"Attach3DTextLabelToPlayer(${1:Text3D:id}, ${2:playerid}, ${3:Float:OffsetX}, ${4:Float:OffsetY}, ${5:Float:OffsetZ})$0"},"Attach3DTextLabelToVehicle":{"prefix":"Attach3DTextLabelToVehicle","description":"Attaches a 3D Text Label to a specific vehicle.","body":"Attach3DTextLabelToVehicle(${1:Text3D:id}, ${2:vehicleid}, ${3:Float:OffsetX}, ${4:Float:OffsetY}, ${5:Float:OffsetZ})$0"},"Update3DTextLabelText":{"prefix":"Update3DTextLabelText","description":"Updates a 3D Text Label text and color","body":"Update3DTextLabelText(${1:Text3D:id}, ${2:color}, ${3:text[]})$0"},"CreatePlayer3DTextLabel":{"prefix":"CreatePlayer3DTextLabel","description":"Creates a 3D Text Label only for a specific player","body":"CreatePlayer3DTextLabel(${1:playerid}, ${2:text[]}, ${3:color}, ${4:Float:X}, ${5:Float:Y}, ${6:Float:Z}, ${7:Float:DrawDistance}, ${8:attachedplayer=INVALID_PLAYER_ID}, ${9:attachedvehicle=INVALID_VEHICLE_ID}, ${10:testLOS=0})$0"},"DeletePlayer3DTextLabel":{"prefix":"DeletePlayer3DTextLabel","description":"Destroy a 3D text label that was created using CreatePlayer3DTextLabel.","body":"DeletePlayer3DTextLabel(${1:playerid}, ${2:PlayerText3D:id})$0"},"UpdatePlayer3DTextLabelText":{"prefix":"UpdatePlayer3DTextLabelText","description":"Updates a player 3D Text Label's text and color.","body":"UpdatePlayer3DTextLabelText(${1:playerid}, ${2:PlayerText3D:id}, ${3:color}, ${4:text[]})$0"},"ShowPlayerDialog":{"prefix":"ShowPlayerDialog","description":"Shows the player a synchronous (only one at a time) dialog box.","body":"ShowPlayerDialog(${1:playerid}, ${2:dialogid}, ${3|DIALOG_STYLE_MSGBOX,DIALOG_STYLE_INPUT,DIALOG_STYLE_LIST,DIALOG_STYLE_PASSWORD,DIALOG_STYLE_TABLIST,DIALOG_STYLE_TABLIST_HEADERS|}, ${4:caption[]}, ${5:info[]}, ${6:button1[]}, ${7:button2[]})$0"},"OnGameModeInit":{"prefix":"OnGameModeInit","description":"This callback is triggered when the gamemode starts.","body":"OnGameModeInit()$0"},"OnGameModeExit":{"prefix":"OnGameModeExit","description":"This callback is called when a gamemode ends, either through 'gmx', the server being shut down, or GameModeExit.","body":"OnGameModeExit()$0"},"OnFilterScriptInit":{"prefix":"OnFilterScriptInit","description":"This callback is called when a filterscript is initialized (loaded). It is only called inside the filterscript which is starting.","body":"OnFilterScriptInit()$0"},"OnFilterScriptExit":{"prefix":"OnFilterScriptExit","description":"This callback is called when a filterscript is unloaded. It is only called inside the filterscript which is unloaded.","body":"OnFilterScriptExit()$0"},"OnPlayerConnect":{"prefix":"OnPlayerConnect","description":"This callback is called when a player connects to the server.","body":"OnPlayerConnect(${1:playerid})$0"},"OnPlayerDisconnect":{"prefix":"OnPlayerDisconnect","description":"This callback is called when a player disconnects from the server.","body":"OnPlayerDisconnect(${1:playerid}, ${2:reason})$0"},"OnPlayerSpawn":{"prefix":"OnPlayerSpawn","description":"This callback is called when a player spawns.(i.e. after caling SpawnPlayer function)","body":"OnPlayerSpawn(${1:playerid})$0"},"OnPlayerDeath":{"prefix":"OnPlayerDeath","description":"This callback is called when a player dies, either by suicide or by being killed by another player.","body":"OnPlayerDeath(${1:playerid}, ${2:killerid}, ${3:reason})$0"},"OnVehicleSpawn":{"prefix":"OnVehicleSpawn","description":"This callback is called when a vehicle respawns.","body":"OnVehicleSpawn(${1:vehicleid})$0"},"OnVehicleDeath":{"prefix":"OnVehicleDeath","description":"This callback is called when a vehicle is destroyed - either by exploding or becoming submerged in water.","body":"OnVehicleDeath(${1:vehicleid}, ${2:killerid})$0"},"OnPlayerCommandText":{"prefix":"OnPlayerCommandText","description":"This callback is called when a player enters a command into the client chat window. Commands are anything that start with a forward slash, e.g. /help.","body":"OnPlayerCommandText(${1:playerid}, ${2:cmdtext[]})$0"},"OnPlayerRequestClass":{"prefix":"OnPlayerRequestClass","description":"Called when a player changes class at class selection (and when class selection first appears).","body":"OnPlayerRequestClass(${1:playerid}, ${2:classid})$0"},"OnPlayerEnterVehicle":{"prefix":"OnPlayerEnterVehicle","description":"This callback is called when a player starts to enter a vehicle, meaning the player is not in vehicle yet at the time this callback is called.","body":"OnPlayerEnterVehicle(${1:playerid}, ${2:vehicleid}, ${3:ispassenger})$0"},"OnPlayerExitVehicle":{"prefix":"OnPlayerExitVehicle","description":"This callback is called when a player starts to exit a vehicle.","body":"OnPlayerExitVehicle(${1:playerid}, ${2:vehicleid})$0"},"OnPlayerStateChange":{"prefix":"OnPlayerStateChange","description":"This callback is called when a player changes state. For example, when a player changes from being the driver of a vehicle to being on-foot.","body":"OnPlayerStateChange(${1:playerid}, ${2:newstate}, ${3:oldstate})$0"},"OnPlayerEnterCheckpoint":{"prefix":"OnPlayerEnterCheckpoint","description":"This callback is called when a player enters the checkpoint set for that player.","body":"OnPlayerEnterCheckpoint(${1:playerid})$0"},"OnPlayerLeaveCheckpoint":{"prefix":"OnPlayerLeaveCheckpoint","description":"This callback is called when a player leaves the checkpoint set for them by SetPlayerCheckpoint. Only one checkpoint can be set at a time.","body":"OnPlayerLeaveCheckpoint(${1:playerid})$0"},"OnPlayerEnterRaceCheckpoint":{"prefix":"OnPlayerEnterRaceCheckpoint","description":"This callback is called when a player enters a race checkpoint.","body":"OnPlayerEnterRaceCheckpoint(${1:playerid})$0"},"OnPlayerLeaveRaceCheckpoint":{"prefix":"OnPlayerLeaveRaceCheckpoint","description":"This callback is called when a player leaves the race checkpoint.","body":"OnPlayerLeaveRaceCheckpoint(${1:playerid})$0"},"OnRconCommand":{"prefix":"OnRconCommand","description":"This callback is called when a command is sent through the server console, remote RCON, or via the in-game '/rcon command'.","body":"OnRconCommand(${1:cmd[]})$0"},"OnPlayerRequestSpawn":{"prefix":"OnPlayerRequestSpawn","description":"Called when a player attempts to spawn via class selection either by pressing SHIFT or clicking the 'Spawn' button.","body":"OnPlayerRequestSpawn(${1:playerid})$0"},"OnObjectMoved":{"prefix":"OnObjectMoved","description":"This callback is called when an object is moved after MoveObject (when it stops moving).","body":"OnObjectMoved(${1:objectid})$0"},"OnPlayerObjectMoved":{"prefix":"OnPlayerObjectMoved","description":"This callback is called when a player object is moved after MovePlayerObject (when it stops moving).","body":"OnPlayerObjectMoved(${1:playerid}, ${2:objectid})$0"},"OnPlayerPickUpPickup":{"prefix":"OnPlayerPickUpPickup","description":"Called when a player picks up a pickup created with CreatePickup.","body":"OnPlayerPickUpPickup(${1:playerid}, ${2:pickupid})$0"},"OnVehicleMod":{"prefix":"OnVehicleMod","description":"This callback is called when a vehicle is modded.","body":"OnVehicleMod(${1:playerid}, ${2:vehicleid}, ${3:componentid})$0"},"OnEnterExitModShop":{"prefix":"OnEnterExitModShop","description":"This callback is called when a player enters or exits a mod shop.","body":"OnEnterExitModShop(${1:playerid}, ${2:enterexit}, ${3:interiorid})$0"},"OnVehiclePaintjob":{"prefix":"OnVehiclePaintjob","description":"Called when a player previews a vehicle paintjob inside a mod shop. Watch out, this callback is not called when the player buys the paintjob.","body":"OnVehiclePaintjob(${1:playerid}, ${2:vehicleid}, ${3:paintjobid})$0"},"OnVehicleRespray":{"prefix":"OnVehicleRespray","description":"This callback is called when a player exits a mod shop, even if the colors weren't changed. Watch out, the name is ambiguous, Pay 'n' Spray shops don't call this callback.","body":"OnVehicleRespray(${1:playerid}, ${2:vehicleid}, ${3:color1}, ${4:color2})$0"},"OnVehicleDamageStatusUpdate":{"prefix":"OnVehicleDamageStatusUpdate","description":"This callback is called when a vehicle element such as doors, tires, panels, or lights change their damage status.","body":"OnVehicleDamageStatusUpdate(${1:vehicleid}, ${2:playerid})$0"},"OnUnoccupiedVehicleUpdate":{"prefix":"OnUnoccupiedVehicleUpdate","description":"This callback is called when a player's client updates/syncs the position of a vehicle they're not driving. This can happen outside of the vehicle or when the player is a passenger of a vehicle that has no driver.","body":"OnUnoccupiedVehicleUpdate(${1:vehicleid}, ${2:playerid}, ${3:passenger_seat}, ${4:Float:new_x}, ${5:Float:new_y}, ${6:Float:new_z}, ${7:Float:vel_x}, ${8:Float:vel_y}, ${9:Float:vel_z})$0"},"OnPlayerSelectedMenuRow":{"prefix":"OnPlayerSelectedMenuRow","description":"This callback is called when a player selects an item from a menu (ShowMenuForPlayer).","body":"OnPlayerSelectedMenuRow(${1:playerid}, ${2:row})$0"},"OnPlayerExitedMenu":{"prefix":"OnPlayerExitedMenu","description":"Called when a player exits a menu.","body":"OnPlayerExitedMenu(${1:playerid})$0"},"OnPlayerInteriorChange":{"prefix":"OnPlayerInteriorChange","description":"Called when a player changes interior. Can be triggered by SetPlayerInterior or when a player enter/exits a building.","body":"OnPlayerInteriorChange(${1:playerid}, ${2:newinteriorid}, ${3:oldinteriorid})$0"},"OnPlayerKeyStateChange":{"prefix":"OnPlayerKeyStateChange","description":"This callback is called when the state of any supported key is changed (pressed/released). Directional keys do not trigger OnPlayerKeyStateChange (up/down/left/right).","body":"OnPlayerKeyStateChange(${1:playerid}, ${2:newkeys}, ${3:oldkeys})$0"},"OnRconLoginAttempt":{"prefix":"OnRconLoginAttempt","description":"This callback is called when someone attempts to log in to RCON in-game; successful or not.","body":"OnRconLoginAttempt(${1:ip[]}, ${2:password[]}, ${3:success })$0"},"OnPlayerUpdate":{"prefix":"OnPlayerUpdate","description":"This callback is called every time a client/player updates the server with their status. It is often used to create custom callbacks for client updates that aren't actively tracked by the server, such as health or armor updates or players switching weapons.","body":"OnPlayerUpdate(${1:playerid})$0"},"OnActorStreamIn":{"prefix":"OnActorStreamIn","description":"This callback is called when an actor is streamed in by a player's client.","body":"OnActorStreamIn(${1:actorid}, ${2:forplayerid})$0"},"OnActorStreamOut":{"prefix":"OnActorStreamOut","description":"This callback is called when an actor is streamed out by a player's client.","body":"OnActorStreamOut(${1:actorid}, ${2:forplayerid})$0"},"OnDialogResponse":{"prefix":"OnDialogResponse","description":"This callback is called when a player responds to a dialog shown using ShowPlayerDialog by either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style dialog).","body":"OnDialogResponse(${1:playerid}, ${2:dialogid}, ${3:response}, ${4:listitem}, ${5:inputtext[]})$0"},"OnPlayerTakeDamage":{"prefix":"OnPlayerTakeDamage","description":"This callback is called when a player takes damage.","body":"OnPlayerTakeDamage(${1:playerid}, ${2:issuerid}, ${3:Float:amount}, ${4:weaponid}, ${5:bodypart})$0"},"OnPlayerGiveDamage":{"prefix":"OnPlayerGiveDamage","description":"This callback is called when a player gives damage to another player.","body":"OnPlayerGiveDamage(${1:playerid}, ${2:damagedid}, ${3:Float:amount}, ${4:weaponid}, ${5:bodypart})$0"},"OnPlayerGiveDamageActor":{"prefix":"OnPlayerGiveDamageActor","description":"This callback is called when a player gives damage to an actor.","body":"OnPlayerGiveDamageActor(${1:playerid}, ${2:damaged_actorid}, ${3:Float:amount}, ${4:weaponid}, ${5:bodypart})$0"},"OnPlayerClickMap":{"prefix":"OnPlayerClickMap","description":"OnPlayerClickMap is called when a player places a target/waypoint on the pause menu map (by right-clicking).","body":"OnPlayerClickMap(${1:playerid}, ${2:Float:fX}, ${3:Float:fY}, ${4:Float:fZ})$0"},"OnPlayerClickTextDraw":{"prefix":"OnPlayerClickTextDraw","description":"This callback is called when a player clicks on a textdraw or cancels the select mode with the Escape key.","body":"OnPlayerClickTextDraw(${1:playerid}, ${2:Text:clickedid})$0"},"OnPlayerClickPlayerTextDraw":{"prefix":"OnPlayerClickPlayerTextDraw","description":"This callback is called when a player clicks on a player-textdraw. It is not called when player cancels the select mode (ESC) - however, OnPlayerClickTextDraw is.","body":"OnPlayerClickPlayerTextDraw(${1:playerid}, ${2:PlayerText:playertextid})$0"},"OnIncomingConnection":{"prefix":"OnIncomingConnection","description":"This callback is called when an IP address attempts a connection to the server. To block incoming connections, use BlockIpAddress.","body":"OnIncomingConnection(${1:playerid}, ${2:ip_address[]}, ${3:port})$0"},"OnTrailerUpdate":{"prefix":"OnTrailerUpdate","description":"This callback is called when a player sent a trailer update.","body":"OnTrailerUpdate(${1:playerid}, ${2:vehicleid})$0"},"OnVehicleSirenStateChange":{"prefix":"OnVehicleSirenStateChange","description":"This callback is called when a vehicle's siren is toggled.","body":"OnVehicleSirenStateChange(${1:playerid}, ${2:vehicleid}, ${3:newstate})$0"},"OnPlayerClickPlayer":{"prefix":"OnPlayerClickPlayer","description":"Called when a player double-clicks on a player on the scoreboard.","body":"OnPlayerClickPlayer(${1:playerid}, ${2:clickedplayerid}, ${3:source})$0"},"OnPlayerEditAttachedObject":{"prefix":"OnPlayerEditAttachedObject","description":"This callback is called when a player ends attached object edition mode.","body":"OnPlayerEditAttachedObject(${1:playerid}, ${2:response}, ${3:index}, ${4:modelid}, ${5:boneid}, ${6:Float:fOffsetX}, ${7:Float:fOffsetY}, ${8:Float:fOffsetZ}, ${9:Float:fRotX}, ${10:Float:fRotY}, ${11:Float:fRotZ}, ${12:Float:fScaleX}, ${13:Float:fScaleY}, ${14:Float:fScaleZ })$0"},"OnPlayerSelectObject":{"prefix":"OnPlayerSelectObject","description":"This callback is called when a player selects an object after SelectObject has been used.","body":"OnPlayerSelectObject(${1:playerid}, ${2:type}, ${3:objectid}, ${4:modelid}, ${5:Float:fX}, ${6:Float:fY}, ${7:Float:fZ})$0"},"OnPlayerWeaponShot":{"prefix":"OnPlayerWeaponShot","description":"This callback is called when a player fires a shot from a weapon. Only bullet weapons are supported. Only passenger drive-by is supported (not driver drive-by, and not sea sparrow / hunter shots).","body":"OnPlayerWeaponShot(${1:playerid}, ${2:weaponid}, ${3:hittype}, ${4:hitid}, ${5:Float:fX}, ${6:Float:fY}, ${7:Float:fZ})$0"},"db_open":{"prefix":"db_open","description":"This function is used to open a connection to a SQLite database, which is inside the '/scriptfiles' folder","body":"db_open(${1:name[]})$0"},"db_close":{"prefix":"db_close","description":"Closes an SQLite database that was opened with db_open.","body":"db_close(${1:DB:db})$0"},"db_query":{"prefix":"db_query","description":"This function is used to execute an SQL query on an opened SQLite database.","body":"db_query(${1:DB:db}, ${2:query[]})$0"},"db_free_result":{"prefix":"db_free_result","description":"Frees result memory allocated from db_query.","body":"db_free_result(${1:DBResult:dbresult})$0"},"db_num_rows":{"prefix":"db_num_rows","description":"Returns the number of rows from a db_query","body":"db_num_rows(${1:DBResult:dbresult})$0"},"db_next_row":{"prefix":"db_next_row","description":"Moves to the next row of the result allocated from db_query.","body":"db_next_row(${1:DBResult:dbresult})$0"},"db_num_fields":{"prefix":"db_num_fields","description":"Get the number of fields in a result.","body":"db_num_fields(${1:DBResult:dbresult})$0"},"db_field_name":{"prefix":"db_field_name","description":"Returns the name of a field at a particular index.","body":"db_field_name(${1:DBResult:dbresult}, ${2:field}, ${3:result[]}, ${4:maxlength})$0"},"db_get_field":{"prefix":"db_get_field","description":"Get the content of a field from db_query","body":"db_get_field(${1:DBResult:dbresult}, ${2:field}, ${3:result[]}, ${4:maxlength})$0"},"db_get_field_int":{"prefix":"db_get_field_int","description":"Get the content of a field as an integer from db_query","body":"db_get_field_int(${1:DBResult:result}, ${2:field = 0})$0"},"db_get_field_float":{"prefix":"db_get_field_float","description":"Get the content of a field as a float from db_query","body":"db_get_field_float(${1:DBResult:result}, ${2:field = 0})$0"},"db_get_field_assoc":{"prefix":"db_get_field_assoc","description":"Get the contents of field with specified name.","body":"db_get_field_assoc(${1:DBResult:dbresult}, ${2:const field[]}, ${3:result[]}, ${4:maxlength})$0"},"db_get_field_assoc_int":{"prefix":"db_get_field_assoc_int","description":"Get the contents of field as an integer with specified name.","body":"db_get_field_assoc_int(${1:DBResult:result}, ${2:const field[]})$0"},"db_get_field_assoc_float":{"prefix":"db_get_field_assoc_float","description":"Get the contents of field as a float with specified name.","body":"db_get_field_assoc_float(${1:DBResult:result}, ${2:const field[]})$0"},"db_get_mem_handle":{"prefix":"db_get_mem_handle","description":"Get memory handle for an SQLite database that was opened with db_open.","body":"db_get_mem_handle(${1:DB:db})$0"},"db_get_result_mem_handle":{"prefix":"db_get_result_mem_handle","description":"Get memory handle for an SQLite query that was executed with db_query.","body":"db_get_result_mem_handle(${1:DBResult:result})$0"},"db_debug_openfiles":{"prefix":"db_debug_openfiles","description":"db_debug_openfiles.","body":"db_debug_openfiles()$0"},"db_debug_openresults":{"prefix":"db_debug_openresults","description":"db_debug_openresults.","body":"db_debug_openresults()$0"},"CreateVehicle":{"prefix":"CreateVehicle","description":"Creates a vehicle in the world. Can be used in place of AddStaticVehicleEx at any time in the script.","body":"CreateVehicle(${1:vehicletype}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z}, ${5:Float:rotation}, ${6:color1}, ${7:color2}, ${8:respawn_delay}, ${9:addsiren=0})$0"},"DestroyVehicle":{"prefix":"DestroyVehicle","description":"Destroy a vehicle. It will disappear instantly.","body":"DestroyVehicle(${1:vehicleid})$0"},"IsVehicleStreamedIn":{"prefix":"IsVehicleStreamedIn","description":"Checks if a vehicle is streamed in for a player. Only nearby vehicles are streamed in (visible) for a player.","body":"IsVehicleStreamedIn(${1:vehicleid}, ${2:forplayerid})$0"},"GetVehiclePos":{"prefix":"GetVehiclePos","description":"Gets the position of a vehicle.","body":"GetVehiclePos(${1:vehicleid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"SetVehiclePos":{"prefix":"SetVehiclePos","description":"Set a vehicle's position","body":"SetVehiclePos(${1:vehicleid}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})$0"},"GetVehicleZAngle":{"prefix":"GetVehicleZAngle","description":"Get the rotation of a vehicle on the Z axis (yaw).","body":"GetVehicleZAngle(${1:vehicleid}, ${2:Float:z_angle})$0"},"GetVehicleRotationQuat":{"prefix":"GetVehicleRotationQuat","description":"","body":"GetVehicleRotationQuat(${1:vehicleid}, ${2:Float:w}, ${3:Float:x}, ${4:Float:y}, ${5:Float:z})$0"},"GetVehicleDistanceFromPoint":{"prefix":"GetVehicleDistanceFromPoint","description":"Returns a vehicle's rotation on all axes as a quaternion.","body":"GetVehicleDistanceFromPoint(${1:vehicleid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"SetVehicleZAngle":{"prefix":"SetVehicleZAngle","description":"Set the Z rotation (yaw) of a vehicle.","body":"SetVehicleZAngle(${1:vehicleid}, ${2:Float:z_angle})$0"},"SetVehicleParamsForPlayer":{"prefix":"SetVehicleParamsForPlayer","description":"Set the parameters of a vehicle for a player.","body":"SetVehicleParamsForPlayer(${1:vehicleid}, ${2:playerid}, ${3:objective}, ${4:doorslocked})$0"},"ManualVehicleEngineAndLights":{"prefix":"ManualVehicleEngineAndLights","description":"Use this function before any player connects (OnGameModeInit) to tell all clients that the script will control vehicle engines and lights. This prevents the game automatically turning the engine on/off when players enter/exit vehicles and headlights automatically coming on when it is dark.","body":"ManualVehicleEngineAndLights()$0"},"SetVehicleParamsEx":{"prefix":"SetVehicleParamsEx","description":"Sets a vehicle's parameters for all players.","body":"SetVehicleParamsEx(${1:vehicleid}, ${2:engine}, ${3:lights}, ${4:alarm}, ${5:doors}, ${6:bonnet}, ${7:boot}, ${8:objective})$0"},"GetVehicleParamsEx":{"prefix":"GetVehicleParamsEx","description":"Gets a vehicle's parameters.","body":"GetVehicleParamsEx(${1:vehicleid}, ${2:engine}, ${3:lights}, ${4:alarm}, ${5:doors}, ${6:bonnet}, ${7:boot}, ${8:objective})$0"},"GetVehicleParamsSirenState":{"prefix":"GetVehicleParamsSirenState","description":"Returns a vehicle's siren state (on/off).","body":"GetVehicleParamsSirenState(${1:vehicleid})$0"},"SetVehicleParamsCarDoors":{"prefix":"SetVehicleParamsCarDoors","description":"Allows you to open and close the doors of a vehicle.","body":"SetVehicleParamsCarDoors(${1:vehicleid}, ${2:driver}, ${3:passenger}, ${4:backleft}, ${5:backright})$0"},"GetVehicleParamsCarDoors":{"prefix":"GetVehicleParamsCarDoors","description":"Allows you to retrieve the current state of a vehicle's doors","body":"GetVehicleParamsCarDoors(${1:vehicleid}, ${2:driver}, ${3:passenger}, ${4:backleft}, ${5:backright})$0"},"SetVehicleParamsCarWindows":{"prefix":"SetVehicleParamsCarWindows","description":"Allows you to open and close the windows of a vehicle.","body":"SetVehicleParamsCarWindows(${1:vehicleid}, ${2:driver}, ${3:passenger}, ${4:backleft}, ${5:backright})$0"},"GetVehicleParamsCarWindows":{"prefix":"GetVehicleParamsCarWindows","description":"Allows you to retrieve the current state of a vehicle's windows","body":"GetVehicleParamsCarWindows(${1:vehicleid}, ${2:driver}, ${3:passenger}, ${4:backleft}, ${5:backright})$0"},"SetVehicleToRespawn":{"prefix":"SetVehicleToRespawn","description":"Sets a vehicle back to the position at where it was created.","body":"SetVehicleToRespawn(${1:vehicleid})$0"},"LinkVehicleToInterior":{"prefix":"LinkVehicleToInterior","description":"Links a vehicle to an interior. Vehicles can only be seen by players in the same interior (SetPlayerInterior).","body":"LinkVehicleToInterior(${1:vehicleid}, ${2:interiorid})$0"},"AddVehicleComponent":{"prefix":"AddVehicleComponent","description":"Adds a 'component' (often referred to as a 'mod' (modification)) to a vehicle. Valid components can be found here.","body":"AddVehicleComponent(${1:vehicleid}, ${2:componentid})$0"},"RemoveVehicleComponent":{"prefix":"RemoveVehicleComponent","description":"Remove a component from a vehicle.","body":"RemoveVehicleComponent(${1:vehicleid}, ${2:componentid})$0"},"ChangeVehicleColor":{"prefix":"ChangeVehicleColor","description":"Change a vehicle's primary and secondary colors.","body":"ChangeVehicleColor(${1:vehicleid}, ${2:color1}, ${3:color2})$0"},"ChangeVehiclePaintjob":{"prefix":"ChangeVehiclePaintjob","description":"Change a vehicle's paintjob (for plain colors see ChangeVehicleColor).","body":"ChangeVehiclePaintjob(${1:vehicleid}, ${2:paintjobid})$0"},"SetVehicleHealth":{"prefix":"SetVehicleHealth","description":"Set a vehicle's health. When a vehicle's health decreases the engine will produce smoke, and finally fire when it decreases to less than 250 (25%).","body":"SetVehicleHealth(${1:vehicleid}, ${2:Float:health})$0"},"GetVehicleHealth":{"prefix":"GetVehicleHealth","description":"Get the health of a vehicle.","body":"GetVehicleHealth(${1:vehicleid}, ${2:Float:health})$0"},"AttachTrailerToVehicle":{"prefix":"AttachTrailerToVehicle","description":"Attach a vehicle to another vehicle as a trailer.","body":"AttachTrailerToVehicle(${1:trailerid}, ${2:vehicleid})$0"},"DetachTrailerFromVehicle":{"prefix":"DetachTrailerFromVehicle","description":"Detach the connection between a vehicle and its trailer, if any.","body":"DetachTrailerFromVehicle(${1:vehicleid})$0"},"IsTrailerAttachedToVehicle":{"prefix":"IsTrailerAttachedToVehicle","description":"Checks if a vehicle has a trailer attached to it. Use GetVehicleTrailer to get the vehicle ID of the trailer (if any).","body":"IsTrailerAttachedToVehicle(${1:vehicleid})$0"},"GetVehicleTrailer":{"prefix":"GetVehicleTrailer","description":"Get the ID of the trailer attached to a vehicle.","body":"GetVehicleTrailer(${1:vehicleid})$0"},"SetVehicleNumberPlate":{"prefix":"SetVehicleNumberPlate","description":"Set a vehicle numberplate.","body":"SetVehicleNumberPlate(${1:vehicleid}, ${2:numberplate[]})$0"},"GetVehicleModel":{"prefix":"GetVehicleModel","description":"Gets the model ID of a vehicle.","body":"GetVehicleModel(${1:vehicleid})$0"},"GetVehicleComponentInSlot":{"prefix":"GetVehicleComponentInSlot","description":"Retrieves the installed component ID (modshop mod(ification)) on a vehicle in a specific slot.","body":"GetVehicleComponentInSlot(${1:vehicleid}, ${2:slot})$0"},"GetVehicleComponentType":{"prefix":"GetVehicleComponentType","description":"Find out what type of component a certain ID is.","body":"GetVehicleComponentType(${1:component})$0"},"RepairVehicle":{"prefix":"RepairVehicle","description":"Fully repairs a vehicle, including visual damage (bumps, dents, scratches, popped tires etc.).","body":"RepairVehicle(${1:vehicleid})$0"},"GetVehicleVelocity":{"prefix":"GetVehicleVelocity","description":"Get the velocity of a vehicle on the X, Y and Z axes.","body":"GetVehicleVelocity(${1:vehicleid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"SetVehicleVelocity":{"prefix":"SetVehicleVelocity","description":"Sets the X, Y and Z velocity of a vehicle.","body":"SetVehicleVelocity(${1:vehicleid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"SetVehicleAngularVelocity":{"prefix":"SetVehicleAngularVelocity","description":"Sets the angular X, Y and Z velocity of a vehicle","body":"SetVehicleAngularVelocity(${1:vehicleid}, ${2:Float:X}, ${3:Float:Y}, ${4:Float:Z})$0"},"GetVehicleModelInfo":{"prefix":"GetVehicleModelInfo","description":"Retrieve information about a specific vehicle model such as the size or position of seats","body":"GetVehicleModelInfo(${1:vehiclemodel}, ${2:infotype}, ${3:Float:X}, ${4:Float:Y}, ${5:Float:Z})$0"},"SetVehicleVirtualWorld":{"prefix":"SetVehicleVirtualWorld","description":"Sets the 'virtual world' of a vehicle. Players will only be able to see vehicles in their own virtual world.","body":"SetVehicleVirtualWorld(${1:vehicleid}, ${2:worldid})$0"},"GetVehicleVirtualWorld":{"prefix":"GetVehicleVirtualWorld","description":"Get the virtual world of a vehicle.","body":"GetVehicleVirtualWorld(${1:vehicleid})$0"},"fopen":{"prefix":"fopen","description":"Open a file (to read from or write to).","body":"fopen(${1:const name[]}, ${2|io_read,io_write,io_readwrite,io_append|})$0"},"fclose":{"prefix":"fclose","description":"Closes a file. Files should always be closed when the script no longer needs them (after reading/writing).","body":"fclose(${1:File: handle})$0"},"ftemp":{"prefix":"ftemp","description":"Creates a file in the 'tmp', 'temp' or root directory with random name for reading and writing. The file is deleted after fclose() is used on the file.","body":"ftemp()$0"},"fremove":{"prefix":"fremove","description":"Delete a file.","body":"fremove(${1:const name[]})$0"},"fwrite":{"prefix":"fwrite","description":"Write text into a file.","body":"fwrite(${1:File: handle}, ${2:const string[]})$0"},"fread":{"prefix":"fread","description":"Read a single line from a file.","body":"fread(${1:File: handle}, ${2:string[]}, ${3:size = sizeof string}, ${4:bool: pack = false})$0"},"fputchar":{"prefix":"fputchar","description":"Write one character to a file.","body":"fputchar(${1:File: handle}, ${2:value}, ${3:bool: utf8 = true})$0"},"fgetchar":{"prefix":"fgetchar","description":"Reads a single character from a file.","body":"fgetchar(${1:File: handle}, ${2:value}, ${3:bool: utf8 = true})$0"},"fblockwrite":{"prefix":"fblockwrite","description":"Write data to a file in binary format, while ignoring line brakes and encoding.","body":"fblockwrite(${1:File: handle}, ${2:const buffer[]}, ${3:size = sizeof buffer})$0"},"fblockread":{"prefix":"fblockread","description":"This function allows you to read data from a file, without encoding and line terminators.","body":"fblockread(${1:File: handle}, ${2:buffer[]}, ${3:size = sizeof buffer})$0"},"fseek":{"prefix":"fseek","description":"Change the current position in the file. You can either seek forward or backward through the file.","body":"fseek(${1:File: handle}, ${2:position = 0}, ${3:seek_whence: whence = seek_start})$0"},"flength":{"prefix":"flength","description":"Returns the length of a file.","body":"flength(${1:File: handle})$0"},"fexist":{"prefix":"fexist","description":"","body":"fexist(${1:const pattern[]})$0"},"fmatch":{"prefix":"fmatch","description":"Checks if a specific file exists in the scriptfiles directory.","body":"fmatch(${1:name[]}, ${2:const pattern[]}, ${3:index = 0}, ${4:size = sizeof name})$0"},"file_move":{"prefix":"file_move","description":"Move a file.","body":"file_move(${1:file[]}, ${2:destination[]})$0"},"file_copy":{"prefix":"file_copy","description":"Copies a file.","body":"file_copy(${1:file[]}, ${2:destination[]})$0"},"file_delete":{"prefix":"file_delete","description":"Deletes a file.","body":"file_delete(${1:file[]})$0"},"file_create":{"prefix":"file_create","description":"Creates a file.","body":"file_create(${1:file[]})$0"},"file_write":{"prefix":"file_write","description":"Writes in a file.","body":"file_write(${1:file[]}, ${2:text[]}, ${3:mode[] = \"a\"})$0"},"file_read":{"prefix":"file_read","description":"Reads from a file.","body":"file_read(${1:file[]}, ${2:storage[]}, ${3:size = sizeof(storage})$0"},"file_log":{"prefix":"file_log","description":"Logs into a file.","body":"file_log()$0"},"file_exists":{"prefix":"file_exists","description":"Checks if a file exists.","body":"file_exists(${1:file[]})$0"},"f_open":{"prefix":"f_open","description":"Opens a file.","body":"f_open(${1:file[]}, ${2:mode[] = \"r\"})$0"},"f_close":{"prefix":"f_close","description":"Closes a file.","body":"f_close(${1:File: file})$0"},"f_read":{"prefix":"f_read","description":"Reads from a file.","body":"f_read(${1:File: file}, ${2:storage[]}, ${3:size = sizeof(storage})$0"},"f_write":{"prefix":"f_write","description":"Writes to a file.","body":"f_write(${1:File: file}, ${2:string[]})$0"},"dir_create":{"prefix":"dir_create","description":"Create a directory.","body":"dir_create(${1:directory[]})$0"},"dir_delete":{"prefix":"dir_delete","description":"Deletes a directory.","body":"dir_delete(${1:directory[]})$0"},"dir_exists":{"prefix":"dir_exists","description":"Checks if a directory exists.","body":"dir_exists(${1:directory[]})$0"},"dir_open":{"prefix":"dir_open","description":"Opens a directory.","body":"dir_open(${1:directory[]})$0"},"dir_close":{"prefix":"dir_close","description":"Closes a directory.","body":"dir_close(${1:dir:handle})$0"},"dir_list":{"prefix":"dir_list","description":"Lists the contents of a directory.","body":"dir_list(${1:dir:handle}, ${2:storage[]}, ${3:type}, ${4:length = sizeof(storage})$0"},"float":{"prefix":"float","description":"Converts an integer into a float.","body":"float(${1:value})$0"},"floatstr":{"prefix":"floatstr","description":"Converts a string to a float.","body":"floatstr(${1:const string[]})$0"},"floatmul":{"prefix":"floatmul","description":"Multiplies two floats with each other.","body":"floatmul(${1:Float:oper1}, ${2:Float:oper2})$0"},"floatdiv":{"prefix":"floatdiv","description":"Divide one float by another one. Redundant as the division operator (/) does the same thing.","body":"floatdiv(${1:Float:dividend}, ${2:Float:divisor})$0"},"floatadd":{"prefix":"floatadd","description":"Adds two floats together. This function is redundant as the standard operator (+) does the same thing.","body":"floatadd(${1:Float:oper1}, ${2:Float:oper2})$0"},"floatsub":{"prefix":"floatsub","description":"Subtracts one float from another one. Note that this function has no real use, as one can simply use the standard operator (-) instead.","body":"floatsub(${1:Float:oper1}, ${2:Float:oper2})$0"},"floatfract":{"prefix":"floatfract","description":"Get the fractional part of a float. This means the value of the numbers after the decimal point.","body":"floatfract(${1:Float:value})$0"},"floatround":{"prefix":"floatround","description":"Round a floating point number to an integer value.","body":"floatround(${1:Float:value}, ${2:floatround_method:method=floatround_round})$0"},"floatcmp":{"prefix":"floatcmp","description":"floatcmp can be used to compare float values to each other, to validate the comparison.","body":"floatcmp(${1:Float:oper1}, ${2:Float:oper2})$0"},"floatsqroot":{"prefix":"floatsqroot","description":"Calculates the square root of given value.","body":"floatsqroot(${1:Float:value})$0"},"floatpower":{"prefix":"floatpower","description":"Raises the given value to the power of the exponent.","body":"floatpower(${1:Float:value}, ${2:Float:exponent})$0"},"floatlog":{"prefix":"floatlog","description":"This function allows you to get the logarithm of a float value.","body":"floatlog(${1:Float:value}, ${2:Float:base=10.0})$0"},"floatsin":{"prefix":"floatsin","description":"Get the sine from a given angle. The input angle may be in radians, degrees or grades.","body":"floatsin(${1:Float:value}, ${2|degrees,radian,grades|})$0"},"floatcos":{"prefix":"floatcos","description":"Get the cosine from a given angle. The input angle may be in radians, degrees or grades.","body":"floatcos(${1:Float:value}, ${2|degrees,radian,grades|})$0"},"floattan":{"prefix":"floattan","description":"Get the tangent from a given angle. The input angle may be in radians, degrees or grades.","body":"floattan(${1:Float:value}, ${2|degrees,radian,grades|})$0"},"floatabs":{"prefix":"floatabs","description":"This function returns the absolute value of float.","body":"floatabs(${1:Float:value})$0"},"#if !defined … #define … #endif":{"prefix":"def","description":"The #define directive allows the definition of macros within your source code. These macro definitions allow constant values to be declared for use throughout your code.","body":"#if !defined ${1/([A-Za-z0-9_]+).*/$1/}\n\t#define ${1:SYMBOL} ${2:value}\n#endif$0"},"#include \"…\"":{"prefix":"include","description":"The #include directive tells the preprocessor to insert the contents of another file into the source code at the point where the #include directive is found.","body":"include \"${1:}\"$0"},"#include <…>":{"prefix":"include","description":"The #include directive tells the preprocessor to insert the contents of another file into the source code at the point where the #include directive is found.","body":"include <${1:}>$0"},"ALS Callback":{"prefix":"ALS","description":"Callback hook.","body":"public ${2:Function}(${3:Args})\n{\n\t${4}\n\t#if defined ${1:Prefix}_${2:Function}\n\t\treturn ${1:Prefix}_${2:Function}(${3:Args});\n\t#else\n\t\treturn 1;\n\t#endif\n}\n#if defined _ALS_${2:Function}\n\t#undef ${2:Function}\n#else\n\t#define _ALS_${2:Function}\n#endif\n\n#define ${2:Function} ${1:Prefix}_${2:Function}\n#if defined ${1:Prefix}_${2:Function}\n\tforward ${1:Prefix}_${2:Function}(${3:Args});\n#endif$0"},"AddAchievement":{"prefix":"AddAchievement","description":"register achievement with system","body":"AddAchievement(const title[], const desc[])"},"GetAchievementStatus":{"prefix":"GetAchievementStatus","description":"get achievement status","body":"GetAchievementStatus(playerid, archivementID)"},"SetAchievementStatus":{"prefix":"SetAchievementStatus","description":"set achievement status","body":"SetAchievementStatus(playerid, archivementID, bool:status)"},"InitAchievementList":{"prefix":"InitAchievementList","description":"Show achievement list to player","body":"InitAchievementList(playerid)"},"Database_Ex_Init_DatabaseTable":{"prefix":"Database_Ex_Init_DatabaseTable","description":"Database Extended Function","body":"Database_Ex_Init_DatabaseTable(const table[])"},"Database_Ex_Init_PlayerData":{"prefix":"Database_Ex_Init_PlayerData","description":"Database Extended Function","body":"Database_Ex_Init_PlayerData(const table[], playerid)"},"Database_Ex_Add_Bool":{"prefix":"Database_Ex_Add_Bool","description":"Database Extended Function","body":"Database_Ex_Add_Bool(const table[], const column[])"},"Database_Ex_Add_Int":{"prefix":"Database_Ex_Add_Int","description":"Database Extended Function","body":"Database_Ex_Add_Int(const table[], const column[])"},"Database_Ex_Add_Float":{"prefix":"Database_Ex_Add_Float","description":"Database Extended Function","body":"Database_Ex_Add_Float(const table[], const column[])"},"Database_Ex_Add_String":{"prefix":"Database_Ex_Add_String","description":"Database Extended Function","body":"Database_Ex_Add_String(const table[], const column[], size = 50)"},"bool:Database_Ex_Get_Bool":{"prefix":"Database_Ex_Get_Bool","description":"Database Extended Function","body":"bool:Database_Ex_Get_Bool(const table[], playerid, const column[])"},"Database_Ex_Get_Int":{"prefix":"Database_Ex_Get_Int","description":"Database Extended Function","body":"Database_Ex_Get_Int(const table[], playerid, const column[])"},"Float:Database_Ex_Get_Float":{"prefix":"Database_Ex_Get_Float","description":"Database Extended Function","body":"Float:Database_Ex_Get_Float(const table[], playerid, const column[])"},"Database_Ex_Get_String":{"prefix":"Database_Ex_Get_String","description":"Database Extended Function","body":"Database_Ex_Get_String(const table[], playerid, const column[])"},"Database_Ex_Update_Bool":{"prefix":"Database_Ex_Update_Bool","description":"Database Extended Function","body":"Database_Ex_Update_Bool(const table[], playerid, const column[], bool:data)"},"Database_Ex_Update_Int":{"prefix":"Database_Ex_Update_Int","description":"Database Extended Function","body":"Database_Ex_Update_Int(const table[], playerid, const column[], data)"},"Database_Ex_Update_Float":{"prefix":"Database_Ex_Update_Float","description":"Database Extended Function","body":"Database_Ex_Update_Float(const table[], playerid, const column[], Float:data)"},"Database_Ex_Update_String":{"prefix":"Database_Ex_Update_String","description":"Database Extended Function","body":"Database_Ex_Update_String(const table[], playerid, const column[], const data[])"},"Database_Ex_OnAccountRename":{"prefix":"Database_Ex_OnAccountRename","description":"Database Extended Function","body":"Database_Ex_OnAccountRename(const table[], const OldName[], const NewName[])"},"Database_Ex_OnAccountDelete":{"prefix":"Database_Ex_OnAccountDelete","description":"Database Extended Function","body":"Database_Ex_OnAccountDelete(const table[], const AccountName[])"},"Database_No_Init_DatabaseTable":{"prefix":"Database_No_Init_DatabaseTable","description":"Database Extended Function","body":"Database_No_Init_DatabaseTable(const table[])"},"Database_No_Init_NTableData":{"prefix":"Database_No_Init_NTableData","description":"Database Extended Function","body":"Database_No_Init_NTableData(const table[], eID)"},"Database_No_Add_Bool":{"prefix":"Database_No_Add_Bool","description":"Database Extended Function","body":"Database_No_Add_Bool(const table[], const column[])"},"Database_No_Add_Int":{"prefix":"Database_No_Add_Int","description":"Database Extended Function","body":"Database_No_Add_Int(const table[], const column[])"},"Database_No_Add_Float":{"prefix":"Database_No_Add_Float","description":"Database Extended Function","body":"Database_No_Add_Float(const table[], const column[])"},"Database_No_Add_String":{"prefix":"Database_No_Add_String","description":"Database Extended Function","body":"Database_No_Add_String(const table[], const column[], size = 50)"},"bool:Database_No_Get_Bool":{"prefix":"Database_No_Get_Bool","description":"Database Extended Function","body":"bool:Database_No_Get_Bool(const table[], eID, const column[])"},"Database_No_Get_Int":{"prefix":"Database_No_Get_Int","description":"Database Extended Function","body":"Database_No_Get_Int(const table[], eID, const column[])"},"Float:Database_No_Get_Float":{"prefix":"Database_No_Get_Float","description":"Database Extended Function","body":"Float:Database_No_Get_Float(const table[], eID, const column[])"},"Database_No_Get_String":{"prefix":"Database_No_Get_String","description":"Database Extended Function","body":"Database_No_Get_String(const table[], eID, const column[])"},"Database_No_Update_Bool":{"prefix":"Database_No_Update_Bool","description":"Database Extended Function","body":"Database_No_Update_Bool(const table[], eID, const column[], bool:data)"},"Database_No_Update_Int":{"prefix":"Database_No_Update_Int","description":"Database Extended Function","body":"Database_No_Update_Int(const table[], eID, const column[], data)"},"Database_No_Update_Float":{"prefix":"Database_No_Update_Float","description":"Database Extended Function","body":"Database_No_Update_Float(const table[], eID, const column[], Float:data)"},"Database_No_Update_String":{"prefix":"Database_No_Update_String","description":"Database Extended Function","body":"Database_No_Update_String(const table[], eID, const column[], const data[])"},"Backpack_GetPlayerBackpackID":{"prefix":"Backpack_GetPlayerBackpackID","description":"back pack function","body":"Backpack_GetPlayerBackpackID(playerid)"},"Backpack_SetPlayerBackpackID":{"prefix":"Backpack_SetPlayerBackpackID","description":"back pack function","body":"Backpack_SetPlayerBackpackID(playerid, BpID)"},"Backpack_Add":{"prefix":"Backpack_Add","description":"back pack function","body":"Backpack_Add(playerid)"},"Backpack_Save":{"prefix":"Backpack_Save","description":"back pack function","body":"Backpack_Save(BpID)"},"Backpack_Remove":{"prefix":"Backpack_Remove","description":"back pack function","body":"Backpack_Remove(BpID)"},"Backpack_isValidBackpack":{"prefix":"Backpack_isValidBackpack","description":"back pack function","body":"Backpack_isValidBackpack(BpID)"},"Backpack_isBackpackDropped":{"prefix":"Backpack_isBackpackDropped","description":"back pack function","body":"Backpack_isBackpackDropped(BpID)"},"Backpack_SetBackpackDropState":{"prefix":"Backpack_SetBackpackDropState","description":"back pack function","body":"Backpack_SetBackpackDropState(BpID, bool:status = false)"},"Backpack_UpdateOwner":{"prefix":"Backpack_UpdateOwner","description":"back pack function","body":"Backpack_UpdateOwner(BpID, playerid)"},"Backpack_GetOwner":{"prefix":"Backpack_GetOwner","description":"back pack function","body":"Backpack_GetOwner(BpID)"},"Backpack_GetInvItemQuantity":{"prefix":"Backpack_GetInvItemQuantity","description":"back pack function","body":"Backpack_GetInvItemQuantity(BpID, InvID)"},"Backpack_AddInventoryItem":{"prefix":"Backpack_AddInventoryItem","description":"back pack function","body":"Backpack_AddInventoryItem(const title[], limit = 10)"},"Backpack_RemoveInventoryItem":{"prefix":"Backpack_RemoveInventoryItem","description":"back pack function","body":"Backpack_RemoveInventoryItem(InvID)"},"Backpack_isValidInventoryItem":{"prefix":"Backpack_isValidInventoryItem","description":"back pack function","body":"Backpack_isValidInventoryItem(InvID)"},"Backpack_GetInvMaxLimit":{"prefix":"Backpack_GetInvMaxLimit","description":"back pack function","body":"Backpack_GetInvMaxLimit(InvID)"},"Backpack_GetInvItemTitle":{"prefix":"Backpack_GetInvItemTitle","description":"back pack function","body":"Backpack_GetInvItemTitle(InvID)"},"Backpack_PushItem":{"prefix":"Backpack_PushItem","description":"back pack function","body":"Backpack_PushItem(BpID, InvID, quantity)"},"Backpack_PopItem":{"prefix":"Backpack_PopItem","description":"back pack function","body":"Backpack_PopItem(BpID, InvID, quantity)"},"Backpack_DbInsert":{"prefix":"Backpack_DbInsert","description":"back pack function","body":"Backpack_DbInsert(BpID)"},"Backpack_DbRemove":{"prefix":"Backpack_DbRemove","description":"back pack function","body":"Backpack_DbRemove(BpID)"},"Backpack_DbSave":{"prefix":"Backpack_DbSave","description":"back pack function","body":"Backpack_DbSave(BpID)"},"Backpack_Drop":{"prefix":"Backpack_Drop","description":"back pack function","body":"Backpack_Drop(playerid, BpID)"},"Backpack_Take":{"prefix":"Backpack_Take","description":"back pack function","body":"Backpack_Take(playerid, BpID)"},"GetPlayerNearestBackpack":{"prefix":"GetPlayerNearestBackpack","description":"back pack function","body":"GetPlayerNearestBackpack(playerid)"},"Backpack_ShowToPlayer":{"prefix":"Backpack_ShowToPlayer","description":"back pack function","body":"Backpack_ShowToPlayer(playerid, BpID)"},"IventoryShopOpen":{"prefix":"IventoryShopOpen","description":"back pack function","body":"IventoryShopOpen(playerid)"},"OnPlayerShareInvItem":{"prefix":"OnPlayerShareInvItem","description":"back pack function","body":"OnPlayerShareInvItem(playerid, targetid, InvID)"},"OnBackpackCreate":{"prefix":"OnBackpackCreate","description":"back pack function","body":"OnBackpackCreate(BpID)"},"OnBackpackSave":{"prefix":"OnBackpackSave","description":"back pack function","body":"OnBackpackSave(BpID)"},"OnBackpackRemove":{"prefix":"OnBackpackRemove","description":"back pack function","body":"OnBackpackRemove(BpID)"},"OnBackpackLoad":{"prefix":"OnBackpackLoad","description":"back pack function","body":"OnBackpackLoad(BpID)"},"OnPlayerReqestBpItem":{"prefix":"OnPlayerReqestBpItem","description":"back pack function","body":"OnPlayerReqestBpItem(playerid, BpID, InvID)"},"SetPlayerJobStatus":{"prefix":"SetPlayerJobStatus","description":"job system function","body":"SetPlayerJobStatus(playerid, bool:newstate)"},"GetPlayerJobStatus":{"prefix":"GetPlayerJobStatus","description":"job system function","body":"GetPlayerJobStatus(playerid)"},"EndJobCommand":{"prefix":"EndJobCommand","description":"job system function","body":"EndJobCommand(playerid)"},"OnPlayerRequestEndJob":{"prefix":"OnPlayerRequestEndJob","description":"job system function","body":"OnPlayerRequestEndJob(playerid)"},"AddPlayerLog":{"prefix":"AddPlayerLog","description":"logging function","body":"AddPlayerLog(playerid, const log[])"},"AddMoneyLog":{"prefix":"AddMoneyLog","description":"logging function","body":"AddMoneyLog(playerid, amount, const log[])"},"AddMission":{"prefix":"AddMission","description":"Add mission into missions list","body":"AddMission(const name[], const desc[], score)"},"InitMissionsList":{"prefix":"InitMissionsList","description":"Show missions list to player","body":"InitMissionsList(playerid)"},"SetMissionStatus":{"prefix":"SetMissionStatus","description":"Set mission status for player","body":"SetMissionStatus(playerid, missionID, bool:status)"},"GetMissionStatus":{"prefix":"GetMissionStatus","description":"Get mission status for player","body":"GetMissionStatus(playerid, missionID)"},"MissionStart":{"prefix":"MissionStart","description":"Start MIssion for player","body":"MissionStart(playerid, missionID)"},"MissionPassed":{"prefix":"MissionPassed","description":"call when mission passed for player","body":"MissionPassed(playerid, missionID)"},"MissionFailed":{"prefix":"MissionFailed","description":"call when mission failed for player","body":"MissionFailed(playerid, missionID)"},"MissionInitTimerTD":{"prefix":"MissionInitTimerTD","description":"to init misison timer (don't call on your script)","body":"MissionInitTimerTD(playerid)"},"MissionStartTimer":{"prefix":"MissionStartTimer","description":"to start mission timer","body":"MissionStartTimer(playerid, seconds)"},"MissionTimerStop":{"prefix":"MissionTimerStop","description":"to stop mission timer (don't call when mission passed/failed called)","body":"MissionTimerStop(playerid)"},"MissionTimerUpdate":{"prefix":"MissionTimerUpdate","description":"to update mission timer textdraw only (don't call on your script)","body":"MissionTimerUpdate(playerid)"},"OnMissionTimerEnd":{"prefix":"OnMissionTimerEnd","description":"callback when mission timer ends","body":"OnMissionTimerEnd(playerid)"},"IsPlayerOnMission":{"prefix":"IsPlayerOnMission","description":"check if player is on mission","body":"IsPlayerOnMission(playerid)"},"GetPlayerMissionID":{"prefix":"GetPlayerMissionID","description":"get player on going mission id, return -1 if player is not on mission","body":"GetPlayerMissionID(playerid)"},"OnMissionStart":{"prefix":"OnMissionStart","description":"callback for mission start","body":"OnMissionStart(playerid, missionID)"},"OnMissionPassed":{"prefix":"OnMissionPassed","description":"callback for mission passed","body":"OnMissionPassed(playerid, missionID)"},"OnMissionFailed":{"prefix":"OnMissionFailed","description":"callback for mission failed","body":"OnMissionFailed(playerid, missionID)"},"OnInitializeMissions":{"prefix":"OnInitializeMissions","description":"called in every five miniute, so that mission scripts can use there own logic to avail new mission for player","body":"OnInitializeMissions(playerid)"},"isMissionCreated":{"prefix":"isMissionCreated","description":"check if mission is created","body":"isMissionCreated(playerid, missionID) "},"SetMissionCreatedStatus":{"prefix":"SetMissionCreatedStatus","description":"set mission created status","body":"SetMissionCreatedStatus(playerid, missionID, bool:status)"},"TotalMissionCreated":{"prefix":"TotalMissionCreated","description":"Get how many missions are created for player","body":"TotalMissionCreated(playerid)"},"Db_NumID_Init_DatabaseTable":{"prefix":"Db_NumID_Init_DatabaseTable","description":"new database string or id by functions","body":"Db_NumID_Init_DatabaseTable(const table[])"},"Db_NumID_Init_Data":{"prefix":"Db_NumID_Init_Data","description":"new database string or id by functions","body":"Db_NumID_Init_Data(const table[], id)"},"Db_NumID_Add_Bool":{"prefix":"Db_NumID_Add_Bool","description":"new database string or id by functions","body":"Db_NumID_Add_Bool(const table[], const column[])"},"Db_NumID_Add_Int":{"prefix":"Db_NumID_Add_Int","description":"new database string or id by functions","body":"Db_NumID_Add_Int(const table[], const column[])"},"Db_NumID_Add_Float":{"prefix":"Db_NumID_Add_Float","description":"new database string or id by functions","body":"Db_NumID_Add_Float(const table[], const column[])"},"Db_NumID_Add_String":{"prefix":"Db_NumID_Add_String","description":"new database string or id by functions","body":"Db_NumID_Add_String(const table[], const column[], size = 50)"},"Db_NumID_Get_Bool":{"prefix":"Db_NumID_Get_Bool","description":"new database string or id by functions","body":"bool:Db_NumID_Get_Bool(const table[], id, const column[])"},"Db_NumID_Get_Int":{"prefix":"Db_NumID_Get_Int","description":"new database string or id by functions","body":"Db_NumID_Get_Int(const table[], id, const column[])"},"Db_NumID_Get_Float":{"prefix":"Db_NumID_Get_Float","description":"new database string or id by functions","body":"Float:Db_NumID_Get_Float(const table[], id, const column[])"},"Db_NumID_Get_String":{"prefix":"Db_NumID_Get_String","description":"new database string or id by functions","body":"Db_NumID_Get_String(const table[], id, const column[])"},"Db_NumID_Update_Bool":{"prefix":"Db_NumID_Update_Bool","description":"new database string or id by functions","body":"Db_NumID_Update_Bool(const table[], id, const column[], bool:data)"},"Db_NumID_Update_Int":{"prefix":"Db_NumID_Update_Int","description":"new database string or id by functions","body":"Db_NumID_Update_Int(const table[], id, const column[], data)"},"Db_NumID_Update_Float":{"prefix":"Db_NumID_Update_Float","description":"new database string or id by functions","body":"Db_NumID_Update_Float(const table[], id, const column[], Float:data)"},"Db_NumID_Update_String":{"prefix":"Db_NumID_Update_String","description":"new database string or id by functions","body":"Db_NumID_Update_String(const table[], id, const column[], const data[])"},"Db_NumID_UpdateID":{"prefix":"Db_NumID_UpdateID","description":"new database string or id by functions","body":"Db_NumID_UpdateID(const table[], OldID, NewID)"},"Db_NumID_RemoveID":{"prefix":"Db_NumID_RemoveID","description":"new database string or id by functions","body":"Db_NumID_RemoveID(const table[], id)"},"Db_StrID_Init_DatabaseTable":{"prefix":"Db_StrID_Init_DatabaseTable","description":"new database string or id by functions","body":"Db_StrID_Init_DatabaseTable(const table[])"},"Db_StrID_Init_Data":{"prefix":"Db_StrID_Init_Data","description":"new database string or id by functions","body":"Db_StrID_Init_Data(const table[], const id[])"},"Db_StrID_Add_Bool":{"prefix":"Db_StrID_Add_Bool","description":"new database string or id by functions","body":"Db_StrID_Add_Bool(const table[], const column[])"},"Db_StrID_Add_Int":{"prefix":"Db_StrID_Add_Int","description":"new database string or id by functions","body":"Db_StrID_Add_Int(const table[], const column[])"},"Db_StrID_Add_Float":{"prefix":"Db_StrID_Add_Float","description":"new database string or id by functions","body":"Db_StrID_Add_Float(const table[], const column[])"},"Db_StrID_Add_String":{"prefix":"Db_StrID_Add_String","description":"new database string or id by functions","body":"Db_StrID_Add_String(const table[], const column[], size = 50)"},"Db_StrID_Get_Bool":{"prefix":"Db_StrID_Get_Bool","description":"new database string or id by functions","body":"bool:Db_StrID_Get_Bool(const table[], const id[], const column[])"},"Db_StrID_Get_Int":{"prefix":"Db_StrID_Get_Int","description":"new database string or id by functions","body":"Db_StrID_Get_Int(const table[], const id[], const column[])"},"Db_StrID_Get_Float":{"prefix":"Db_StrID_Get_Float","description":"new database string or id by functions","body":"Float:Db_StrID_Get_Float(const table[], const id[], const column[])"},"Db_StrID_Get_String":{"prefix":"Db_StrID_Get_String","description":"new database string or id by functions","body":"Db_StrID_Get_String(const table[], const id[], const column[])"},"Db_StrID_Update_Bool":{"prefix":"Db_StrID_Update_Bool","description":"new database string or id by functions","body":"Db_StrID_Update_Bool(const table[], const id[], const column[], bool:data)"},"Db_StrID_Update_Int":{"prefix":"Db_StrID_Update_Int","description":"new database string or id by functions","body":"Db_StrID_Update_Int(const table[], const id[], const column[], data)"},"Db_StrID_Update_Float":{"prefix":"Db_StrID_Update_Float","description":"new database string or id by functions","body":"Db_StrID_Update_Float(const table[], const id[], const column[], Float:data)"},"Db_StrID_Update_String":{"prefix":"Db_StrID_Update_String","description":"new database string or id by functions","body":"Db_StrID_Update_String(const table[], const id[], const column[], const data[])"},"Db_StrID_UpdateID":{"prefix":"Db_StrID_UpdateID","description":"new database string or id by functions","body":"Db_StrID_UpdateID(const table[], const oldID[], const newID[])"},"Db_StrID_RemodeID":{"prefix":"Db_StrID_RemodeID","description":"new database string or id by functions","body":"Db_StrID_RemodeID(const table[], const id[])"}}